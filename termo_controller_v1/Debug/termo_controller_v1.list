
termo_controller_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d70  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fcc  08003fcc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003fcc  08003fcc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fcc  08003fcc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003fcc  08003fcc  00013fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000004  08003fdc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003fdc  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000760c  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf1  00000000  00000000  00027638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  00029330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a8  00000000  00000000  00029a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d522  00000000  00000000  0002a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000066c5  00000000  00000000  00037642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003e77f  00000000  00000000  0003dd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007c486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b88  00000000  00000000  0007c4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e18 	.word	0x08003e18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003e18 	.word	0x08003e18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb83 	bl	8000934 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fb0f 	bl	800085c <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb75 	bl	8000934 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb6b 	bl	8000934 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb1b 	bl	80008a8 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fb11 	bl	80008a8 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_lmul>:
 8000294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000296:	46ce      	mov	lr, r9
 8000298:	4647      	mov	r7, r8
 800029a:	b580      	push	{r7, lr}
 800029c:	0007      	movs	r7, r0
 800029e:	4699      	mov	r9, r3
 80002a0:	0c3b      	lsrs	r3, r7, #16
 80002a2:	469c      	mov	ip, r3
 80002a4:	0413      	lsls	r3, r2, #16
 80002a6:	0c1b      	lsrs	r3, r3, #16
 80002a8:	001d      	movs	r5, r3
 80002aa:	000e      	movs	r6, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	0400      	lsls	r0, r0, #16
 80002b0:	0c14      	lsrs	r4, r2, #16
 80002b2:	0c00      	lsrs	r0, r0, #16
 80002b4:	4345      	muls	r5, r0
 80002b6:	434b      	muls	r3, r1
 80002b8:	4360      	muls	r0, r4
 80002ba:	4361      	muls	r1, r4
 80002bc:	18c0      	adds	r0, r0, r3
 80002be:	0c2c      	lsrs	r4, r5, #16
 80002c0:	1820      	adds	r0, r4, r0
 80002c2:	468c      	mov	ip, r1
 80002c4:	4283      	cmp	r3, r0
 80002c6:	d903      	bls.n	80002d0 <__aeabi_lmul+0x3c>
 80002c8:	2380      	movs	r3, #128	; 0x80
 80002ca:	025b      	lsls	r3, r3, #9
 80002cc:	4698      	mov	r8, r3
 80002ce:	44c4      	add	ip, r8
 80002d0:	4649      	mov	r1, r9
 80002d2:	4379      	muls	r1, r7
 80002d4:	4372      	muls	r2, r6
 80002d6:	0c03      	lsrs	r3, r0, #16
 80002d8:	4463      	add	r3, ip
 80002da:	042d      	lsls	r5, r5, #16
 80002dc:	0c2d      	lsrs	r5, r5, #16
 80002de:	18c9      	adds	r1, r1, r3
 80002e0:	0400      	lsls	r0, r0, #16
 80002e2:	1940      	adds	r0, r0, r5
 80002e4:	1889      	adds	r1, r1, r2
 80002e6:	bcc0      	pop	{r6, r7}
 80002e8:	46b9      	mov	r9, r7
 80002ea:	46b0      	mov	r8, r6
 80002ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)

080002f0 <__aeabi_fadd>:
 80002f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f2:	46c6      	mov	lr, r8
 80002f4:	0243      	lsls	r3, r0, #9
 80002f6:	0a5b      	lsrs	r3, r3, #9
 80002f8:	024e      	lsls	r6, r1, #9
 80002fa:	0045      	lsls	r5, r0, #1
 80002fc:	004f      	lsls	r7, r1, #1
 80002fe:	00da      	lsls	r2, r3, #3
 8000300:	0fc4      	lsrs	r4, r0, #31
 8000302:	469c      	mov	ip, r3
 8000304:	0a70      	lsrs	r0, r6, #9
 8000306:	4690      	mov	r8, r2
 8000308:	b500      	push	{lr}
 800030a:	0e2d      	lsrs	r5, r5, #24
 800030c:	0e3f      	lsrs	r7, r7, #24
 800030e:	0fc9      	lsrs	r1, r1, #31
 8000310:	09b6      	lsrs	r6, r6, #6
 8000312:	428c      	cmp	r4, r1
 8000314:	d04b      	beq.n	80003ae <__aeabi_fadd+0xbe>
 8000316:	1bea      	subs	r2, r5, r7
 8000318:	2a00      	cmp	r2, #0
 800031a:	dd36      	ble.n	800038a <__aeabi_fadd+0x9a>
 800031c:	2f00      	cmp	r7, #0
 800031e:	d061      	beq.n	80003e4 <__aeabi_fadd+0xf4>
 8000320:	2dff      	cmp	r5, #255	; 0xff
 8000322:	d100      	bne.n	8000326 <__aeabi_fadd+0x36>
 8000324:	e0ad      	b.n	8000482 <__aeabi_fadd+0x192>
 8000326:	2380      	movs	r3, #128	; 0x80
 8000328:	04db      	lsls	r3, r3, #19
 800032a:	431e      	orrs	r6, r3
 800032c:	2a1b      	cmp	r2, #27
 800032e:	dc00      	bgt.n	8000332 <__aeabi_fadd+0x42>
 8000330:	e0d3      	b.n	80004da <__aeabi_fadd+0x1ea>
 8000332:	2001      	movs	r0, #1
 8000334:	4643      	mov	r3, r8
 8000336:	1a18      	subs	r0, r3, r0
 8000338:	0143      	lsls	r3, r0, #5
 800033a:	d400      	bmi.n	800033e <__aeabi_fadd+0x4e>
 800033c:	e08c      	b.n	8000458 <__aeabi_fadd+0x168>
 800033e:	0180      	lsls	r0, r0, #6
 8000340:	0987      	lsrs	r7, r0, #6
 8000342:	0038      	movs	r0, r7
 8000344:	f001 f9a8 	bl	8001698 <__clzsi2>
 8000348:	3805      	subs	r0, #5
 800034a:	4087      	lsls	r7, r0
 800034c:	4285      	cmp	r5, r0
 800034e:	dc00      	bgt.n	8000352 <__aeabi_fadd+0x62>
 8000350:	e0b6      	b.n	80004c0 <__aeabi_fadd+0x1d0>
 8000352:	1a2d      	subs	r5, r5, r0
 8000354:	48b3      	ldr	r0, [pc, #716]	; (8000624 <__aeabi_fadd+0x334>)
 8000356:	4038      	ands	r0, r7
 8000358:	0743      	lsls	r3, r0, #29
 800035a:	d004      	beq.n	8000366 <__aeabi_fadd+0x76>
 800035c:	230f      	movs	r3, #15
 800035e:	4003      	ands	r3, r0
 8000360:	2b04      	cmp	r3, #4
 8000362:	d000      	beq.n	8000366 <__aeabi_fadd+0x76>
 8000364:	3004      	adds	r0, #4
 8000366:	0143      	lsls	r3, r0, #5
 8000368:	d400      	bmi.n	800036c <__aeabi_fadd+0x7c>
 800036a:	e078      	b.n	800045e <__aeabi_fadd+0x16e>
 800036c:	1c6a      	adds	r2, r5, #1
 800036e:	2dfe      	cmp	r5, #254	; 0xfe
 8000370:	d065      	beq.n	800043e <__aeabi_fadd+0x14e>
 8000372:	0180      	lsls	r0, r0, #6
 8000374:	0a43      	lsrs	r3, r0, #9
 8000376:	469c      	mov	ip, r3
 8000378:	b2d2      	uxtb	r2, r2
 800037a:	4663      	mov	r3, ip
 800037c:	05d0      	lsls	r0, r2, #23
 800037e:	4318      	orrs	r0, r3
 8000380:	07e4      	lsls	r4, r4, #31
 8000382:	4320      	orrs	r0, r4
 8000384:	bc80      	pop	{r7}
 8000386:	46b8      	mov	r8, r7
 8000388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038a:	2a00      	cmp	r2, #0
 800038c:	d035      	beq.n	80003fa <__aeabi_fadd+0x10a>
 800038e:	1b7a      	subs	r2, r7, r5
 8000390:	2d00      	cmp	r5, #0
 8000392:	d000      	beq.n	8000396 <__aeabi_fadd+0xa6>
 8000394:	e0af      	b.n	80004f6 <__aeabi_fadd+0x206>
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d100      	bne.n	800039e <__aeabi_fadd+0xae>
 800039c:	e0a7      	b.n	80004ee <__aeabi_fadd+0x1fe>
 800039e:	1e53      	subs	r3, r2, #1
 80003a0:	2a01      	cmp	r2, #1
 80003a2:	d100      	bne.n	80003a6 <__aeabi_fadd+0xb6>
 80003a4:	e12f      	b.n	8000606 <__aeabi_fadd+0x316>
 80003a6:	2aff      	cmp	r2, #255	; 0xff
 80003a8:	d069      	beq.n	800047e <__aeabi_fadd+0x18e>
 80003aa:	001a      	movs	r2, r3
 80003ac:	e0aa      	b.n	8000504 <__aeabi_fadd+0x214>
 80003ae:	1be9      	subs	r1, r5, r7
 80003b0:	2900      	cmp	r1, #0
 80003b2:	dd70      	ble.n	8000496 <__aeabi_fadd+0x1a6>
 80003b4:	2f00      	cmp	r7, #0
 80003b6:	d037      	beq.n	8000428 <__aeabi_fadd+0x138>
 80003b8:	2dff      	cmp	r5, #255	; 0xff
 80003ba:	d062      	beq.n	8000482 <__aeabi_fadd+0x192>
 80003bc:	2380      	movs	r3, #128	; 0x80
 80003be:	04db      	lsls	r3, r3, #19
 80003c0:	431e      	orrs	r6, r3
 80003c2:	291b      	cmp	r1, #27
 80003c4:	dc00      	bgt.n	80003c8 <__aeabi_fadd+0xd8>
 80003c6:	e0b0      	b.n	800052a <__aeabi_fadd+0x23a>
 80003c8:	2001      	movs	r0, #1
 80003ca:	4440      	add	r0, r8
 80003cc:	0143      	lsls	r3, r0, #5
 80003ce:	d543      	bpl.n	8000458 <__aeabi_fadd+0x168>
 80003d0:	3501      	adds	r5, #1
 80003d2:	2dff      	cmp	r5, #255	; 0xff
 80003d4:	d033      	beq.n	800043e <__aeabi_fadd+0x14e>
 80003d6:	2301      	movs	r3, #1
 80003d8:	4a93      	ldr	r2, [pc, #588]	; (8000628 <__aeabi_fadd+0x338>)
 80003da:	4003      	ands	r3, r0
 80003dc:	0840      	lsrs	r0, r0, #1
 80003de:	4010      	ands	r0, r2
 80003e0:	4318      	orrs	r0, r3
 80003e2:	e7b9      	b.n	8000358 <__aeabi_fadd+0x68>
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d100      	bne.n	80003ea <__aeabi_fadd+0xfa>
 80003e8:	e083      	b.n	80004f2 <__aeabi_fadd+0x202>
 80003ea:	1e51      	subs	r1, r2, #1
 80003ec:	2a01      	cmp	r2, #1
 80003ee:	d100      	bne.n	80003f2 <__aeabi_fadd+0x102>
 80003f0:	e0d8      	b.n	80005a4 <__aeabi_fadd+0x2b4>
 80003f2:	2aff      	cmp	r2, #255	; 0xff
 80003f4:	d045      	beq.n	8000482 <__aeabi_fadd+0x192>
 80003f6:	000a      	movs	r2, r1
 80003f8:	e798      	b.n	800032c <__aeabi_fadd+0x3c>
 80003fa:	27fe      	movs	r7, #254	; 0xfe
 80003fc:	1c6a      	adds	r2, r5, #1
 80003fe:	4217      	tst	r7, r2
 8000400:	d000      	beq.n	8000404 <__aeabi_fadd+0x114>
 8000402:	e086      	b.n	8000512 <__aeabi_fadd+0x222>
 8000404:	2d00      	cmp	r5, #0
 8000406:	d000      	beq.n	800040a <__aeabi_fadd+0x11a>
 8000408:	e0b7      	b.n	800057a <__aeabi_fadd+0x28a>
 800040a:	4643      	mov	r3, r8
 800040c:	2b00      	cmp	r3, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_fadd+0x122>
 8000410:	e0f3      	b.n	80005fa <__aeabi_fadd+0x30a>
 8000412:	2200      	movs	r2, #0
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0b0      	beq.n	800037a <__aeabi_fadd+0x8a>
 8000418:	1b98      	subs	r0, r3, r6
 800041a:	0143      	lsls	r3, r0, #5
 800041c:	d400      	bmi.n	8000420 <__aeabi_fadd+0x130>
 800041e:	e0fa      	b.n	8000616 <__aeabi_fadd+0x326>
 8000420:	4643      	mov	r3, r8
 8000422:	000c      	movs	r4, r1
 8000424:	1af0      	subs	r0, r6, r3
 8000426:	e797      	b.n	8000358 <__aeabi_fadd+0x68>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d100      	bne.n	800042e <__aeabi_fadd+0x13e>
 800042c:	e0c8      	b.n	80005c0 <__aeabi_fadd+0x2d0>
 800042e:	1e4a      	subs	r2, r1, #1
 8000430:	2901      	cmp	r1, #1
 8000432:	d100      	bne.n	8000436 <__aeabi_fadd+0x146>
 8000434:	e0ae      	b.n	8000594 <__aeabi_fadd+0x2a4>
 8000436:	29ff      	cmp	r1, #255	; 0xff
 8000438:	d023      	beq.n	8000482 <__aeabi_fadd+0x192>
 800043a:	0011      	movs	r1, r2
 800043c:	e7c1      	b.n	80003c2 <__aeabi_fadd+0xd2>
 800043e:	2300      	movs	r3, #0
 8000440:	22ff      	movs	r2, #255	; 0xff
 8000442:	469c      	mov	ip, r3
 8000444:	e799      	b.n	800037a <__aeabi_fadd+0x8a>
 8000446:	21fe      	movs	r1, #254	; 0xfe
 8000448:	1c6a      	adds	r2, r5, #1
 800044a:	4211      	tst	r1, r2
 800044c:	d077      	beq.n	800053e <__aeabi_fadd+0x24e>
 800044e:	2aff      	cmp	r2, #255	; 0xff
 8000450:	d0f5      	beq.n	800043e <__aeabi_fadd+0x14e>
 8000452:	0015      	movs	r5, r2
 8000454:	4446      	add	r6, r8
 8000456:	0870      	lsrs	r0, r6, #1
 8000458:	0743      	lsls	r3, r0, #29
 800045a:	d000      	beq.n	800045e <__aeabi_fadd+0x16e>
 800045c:	e77e      	b.n	800035c <__aeabi_fadd+0x6c>
 800045e:	08c3      	lsrs	r3, r0, #3
 8000460:	2dff      	cmp	r5, #255	; 0xff
 8000462:	d00e      	beq.n	8000482 <__aeabi_fadd+0x192>
 8000464:	025b      	lsls	r3, r3, #9
 8000466:	0a5b      	lsrs	r3, r3, #9
 8000468:	469c      	mov	ip, r3
 800046a:	b2ea      	uxtb	r2, r5
 800046c:	e785      	b.n	800037a <__aeabi_fadd+0x8a>
 800046e:	2e00      	cmp	r6, #0
 8000470:	d007      	beq.n	8000482 <__aeabi_fadd+0x192>
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	03d2      	lsls	r2, r2, #15
 8000476:	4213      	tst	r3, r2
 8000478:	d003      	beq.n	8000482 <__aeabi_fadd+0x192>
 800047a:	4210      	tst	r0, r2
 800047c:	d101      	bne.n	8000482 <__aeabi_fadd+0x192>
 800047e:	000c      	movs	r4, r1
 8000480:	0003      	movs	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0db      	beq.n	800043e <__aeabi_fadd+0x14e>
 8000486:	2080      	movs	r0, #128	; 0x80
 8000488:	03c0      	lsls	r0, r0, #15
 800048a:	4318      	orrs	r0, r3
 800048c:	0240      	lsls	r0, r0, #9
 800048e:	0a43      	lsrs	r3, r0, #9
 8000490:	469c      	mov	ip, r3
 8000492:	22ff      	movs	r2, #255	; 0xff
 8000494:	e771      	b.n	800037a <__aeabi_fadd+0x8a>
 8000496:	2900      	cmp	r1, #0
 8000498:	d0d5      	beq.n	8000446 <__aeabi_fadd+0x156>
 800049a:	1b7a      	subs	r2, r7, r5
 800049c:	2d00      	cmp	r5, #0
 800049e:	d160      	bne.n	8000562 <__aeabi_fadd+0x272>
 80004a0:	4643      	mov	r3, r8
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d024      	beq.n	80004f0 <__aeabi_fadd+0x200>
 80004a6:	1e53      	subs	r3, r2, #1
 80004a8:	2a01      	cmp	r2, #1
 80004aa:	d073      	beq.n	8000594 <__aeabi_fadd+0x2a4>
 80004ac:	2aff      	cmp	r2, #255	; 0xff
 80004ae:	d0e7      	beq.n	8000480 <__aeabi_fadd+0x190>
 80004b0:	001a      	movs	r2, r3
 80004b2:	2a1b      	cmp	r2, #27
 80004b4:	dc00      	bgt.n	80004b8 <__aeabi_fadd+0x1c8>
 80004b6:	e085      	b.n	80005c4 <__aeabi_fadd+0x2d4>
 80004b8:	2001      	movs	r0, #1
 80004ba:	003d      	movs	r5, r7
 80004bc:	1980      	adds	r0, r0, r6
 80004be:	e785      	b.n	80003cc <__aeabi_fadd+0xdc>
 80004c0:	2320      	movs	r3, #32
 80004c2:	003a      	movs	r2, r7
 80004c4:	1b45      	subs	r5, r0, r5
 80004c6:	0038      	movs	r0, r7
 80004c8:	3501      	adds	r5, #1
 80004ca:	40ea      	lsrs	r2, r5
 80004cc:	1b5d      	subs	r5, r3, r5
 80004ce:	40a8      	lsls	r0, r5
 80004d0:	1e43      	subs	r3, r0, #1
 80004d2:	4198      	sbcs	r0, r3
 80004d4:	2500      	movs	r5, #0
 80004d6:	4310      	orrs	r0, r2
 80004d8:	e73e      	b.n	8000358 <__aeabi_fadd+0x68>
 80004da:	2320      	movs	r3, #32
 80004dc:	0030      	movs	r0, r6
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	0031      	movs	r1, r6
 80004e2:	4098      	lsls	r0, r3
 80004e4:	40d1      	lsrs	r1, r2
 80004e6:	1e43      	subs	r3, r0, #1
 80004e8:	4198      	sbcs	r0, r3
 80004ea:	4308      	orrs	r0, r1
 80004ec:	e722      	b.n	8000334 <__aeabi_fadd+0x44>
 80004ee:	000c      	movs	r4, r1
 80004f0:	0003      	movs	r3, r0
 80004f2:	0015      	movs	r5, r2
 80004f4:	e7b4      	b.n	8000460 <__aeabi_fadd+0x170>
 80004f6:	2fff      	cmp	r7, #255	; 0xff
 80004f8:	d0c1      	beq.n	800047e <__aeabi_fadd+0x18e>
 80004fa:	2380      	movs	r3, #128	; 0x80
 80004fc:	4640      	mov	r0, r8
 80004fe:	04db      	lsls	r3, r3, #19
 8000500:	4318      	orrs	r0, r3
 8000502:	4680      	mov	r8, r0
 8000504:	2a1b      	cmp	r2, #27
 8000506:	dd51      	ble.n	80005ac <__aeabi_fadd+0x2bc>
 8000508:	2001      	movs	r0, #1
 800050a:	000c      	movs	r4, r1
 800050c:	003d      	movs	r5, r7
 800050e:	1a30      	subs	r0, r6, r0
 8000510:	e712      	b.n	8000338 <__aeabi_fadd+0x48>
 8000512:	4643      	mov	r3, r8
 8000514:	1b9f      	subs	r7, r3, r6
 8000516:	017b      	lsls	r3, r7, #5
 8000518:	d42b      	bmi.n	8000572 <__aeabi_fadd+0x282>
 800051a:	2f00      	cmp	r7, #0
 800051c:	d000      	beq.n	8000520 <__aeabi_fadd+0x230>
 800051e:	e710      	b.n	8000342 <__aeabi_fadd+0x52>
 8000520:	2300      	movs	r3, #0
 8000522:	2400      	movs	r4, #0
 8000524:	2200      	movs	r2, #0
 8000526:	469c      	mov	ip, r3
 8000528:	e727      	b.n	800037a <__aeabi_fadd+0x8a>
 800052a:	2320      	movs	r3, #32
 800052c:	0032      	movs	r2, r6
 800052e:	0030      	movs	r0, r6
 8000530:	40ca      	lsrs	r2, r1
 8000532:	1a59      	subs	r1, r3, r1
 8000534:	4088      	lsls	r0, r1
 8000536:	1e43      	subs	r3, r0, #1
 8000538:	4198      	sbcs	r0, r3
 800053a:	4310      	orrs	r0, r2
 800053c:	e745      	b.n	80003ca <__aeabi_fadd+0xda>
 800053e:	2d00      	cmp	r5, #0
 8000540:	d14a      	bne.n	80005d8 <__aeabi_fadd+0x2e8>
 8000542:	4643      	mov	r3, r8
 8000544:	2b00      	cmp	r3, #0
 8000546:	d063      	beq.n	8000610 <__aeabi_fadd+0x320>
 8000548:	2200      	movs	r2, #0
 800054a:	2e00      	cmp	r6, #0
 800054c:	d100      	bne.n	8000550 <__aeabi_fadd+0x260>
 800054e:	e714      	b.n	800037a <__aeabi_fadd+0x8a>
 8000550:	0030      	movs	r0, r6
 8000552:	4440      	add	r0, r8
 8000554:	0143      	lsls	r3, r0, #5
 8000556:	d400      	bmi.n	800055a <__aeabi_fadd+0x26a>
 8000558:	e77e      	b.n	8000458 <__aeabi_fadd+0x168>
 800055a:	4b32      	ldr	r3, [pc, #200]	; (8000624 <__aeabi_fadd+0x334>)
 800055c:	3501      	adds	r5, #1
 800055e:	4018      	ands	r0, r3
 8000560:	e77a      	b.n	8000458 <__aeabi_fadd+0x168>
 8000562:	2fff      	cmp	r7, #255	; 0xff
 8000564:	d08c      	beq.n	8000480 <__aeabi_fadd+0x190>
 8000566:	2380      	movs	r3, #128	; 0x80
 8000568:	4641      	mov	r1, r8
 800056a:	04db      	lsls	r3, r3, #19
 800056c:	4319      	orrs	r1, r3
 800056e:	4688      	mov	r8, r1
 8000570:	e79f      	b.n	80004b2 <__aeabi_fadd+0x1c2>
 8000572:	4643      	mov	r3, r8
 8000574:	000c      	movs	r4, r1
 8000576:	1af7      	subs	r7, r6, r3
 8000578:	e6e3      	b.n	8000342 <__aeabi_fadd+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2a00      	cmp	r2, #0
 800057e:	d000      	beq.n	8000582 <__aeabi_fadd+0x292>
 8000580:	e775      	b.n	800046e <__aeabi_fadd+0x17e>
 8000582:	2e00      	cmp	r6, #0
 8000584:	d000      	beq.n	8000588 <__aeabi_fadd+0x298>
 8000586:	e77a      	b.n	800047e <__aeabi_fadd+0x18e>
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	03db      	lsls	r3, r3, #15
 800058c:	2400      	movs	r4, #0
 800058e:	469c      	mov	ip, r3
 8000590:	22ff      	movs	r2, #255	; 0xff
 8000592:	e6f2      	b.n	800037a <__aeabi_fadd+0x8a>
 8000594:	0030      	movs	r0, r6
 8000596:	4440      	add	r0, r8
 8000598:	2501      	movs	r5, #1
 800059a:	0143      	lsls	r3, r0, #5
 800059c:	d400      	bmi.n	80005a0 <__aeabi_fadd+0x2b0>
 800059e:	e75b      	b.n	8000458 <__aeabi_fadd+0x168>
 80005a0:	2502      	movs	r5, #2
 80005a2:	e718      	b.n	80003d6 <__aeabi_fadd+0xe6>
 80005a4:	4643      	mov	r3, r8
 80005a6:	2501      	movs	r5, #1
 80005a8:	1b98      	subs	r0, r3, r6
 80005aa:	e6c5      	b.n	8000338 <__aeabi_fadd+0x48>
 80005ac:	2320      	movs	r3, #32
 80005ae:	4644      	mov	r4, r8
 80005b0:	4640      	mov	r0, r8
 80005b2:	40d4      	lsrs	r4, r2
 80005b4:	1a9a      	subs	r2, r3, r2
 80005b6:	4090      	lsls	r0, r2
 80005b8:	1e43      	subs	r3, r0, #1
 80005ba:	4198      	sbcs	r0, r3
 80005bc:	4320      	orrs	r0, r4
 80005be:	e7a4      	b.n	800050a <__aeabi_fadd+0x21a>
 80005c0:	000d      	movs	r5, r1
 80005c2:	e74d      	b.n	8000460 <__aeabi_fadd+0x170>
 80005c4:	2320      	movs	r3, #32
 80005c6:	4641      	mov	r1, r8
 80005c8:	4640      	mov	r0, r8
 80005ca:	40d1      	lsrs	r1, r2
 80005cc:	1a9a      	subs	r2, r3, r2
 80005ce:	4090      	lsls	r0, r2
 80005d0:	1e43      	subs	r3, r0, #1
 80005d2:	4198      	sbcs	r0, r3
 80005d4:	4308      	orrs	r0, r1
 80005d6:	e770      	b.n	80004ba <__aeabi_fadd+0x1ca>
 80005d8:	4642      	mov	r2, r8
 80005da:	2a00      	cmp	r2, #0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fadd+0x2f0>
 80005de:	e74f      	b.n	8000480 <__aeabi_fadd+0x190>
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fadd+0x2f6>
 80005e4:	e74d      	b.n	8000482 <__aeabi_fadd+0x192>
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	03d2      	lsls	r2, r2, #15
 80005ea:	4213      	tst	r3, r2
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fadd+0x300>
 80005ee:	e748      	b.n	8000482 <__aeabi_fadd+0x192>
 80005f0:	4210      	tst	r0, r2
 80005f2:	d000      	beq.n	80005f6 <__aeabi_fadd+0x306>
 80005f4:	e745      	b.n	8000482 <__aeabi_fadd+0x192>
 80005f6:	0003      	movs	r3, r0
 80005f8:	e743      	b.n	8000482 <__aeabi_fadd+0x192>
 80005fa:	2e00      	cmp	r6, #0
 80005fc:	d090      	beq.n	8000520 <__aeabi_fadd+0x230>
 80005fe:	000c      	movs	r4, r1
 8000600:	4684      	mov	ip, r0
 8000602:	2200      	movs	r2, #0
 8000604:	e6b9      	b.n	800037a <__aeabi_fadd+0x8a>
 8000606:	4643      	mov	r3, r8
 8000608:	000c      	movs	r4, r1
 800060a:	1af0      	subs	r0, r6, r3
 800060c:	3501      	adds	r5, #1
 800060e:	e693      	b.n	8000338 <__aeabi_fadd+0x48>
 8000610:	4684      	mov	ip, r0
 8000612:	2200      	movs	r2, #0
 8000614:	e6b1      	b.n	800037a <__aeabi_fadd+0x8a>
 8000616:	2800      	cmp	r0, #0
 8000618:	d000      	beq.n	800061c <__aeabi_fadd+0x32c>
 800061a:	e71d      	b.n	8000458 <__aeabi_fadd+0x168>
 800061c:	2300      	movs	r3, #0
 800061e:	2400      	movs	r4, #0
 8000620:	469c      	mov	ip, r3
 8000622:	e6aa      	b.n	800037a <__aeabi_fadd+0x8a>
 8000624:	fbffffff 	.word	0xfbffffff
 8000628:	7dffffff 	.word	0x7dffffff

0800062c <__aeabi_fdiv>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	0245      	lsls	r5, r0, #9
 8000636:	b5c0      	push	{r6, r7, lr}
 8000638:	0047      	lsls	r7, r0, #1
 800063a:	1c0c      	adds	r4, r1, #0
 800063c:	0a6d      	lsrs	r5, r5, #9
 800063e:	0e3f      	lsrs	r7, r7, #24
 8000640:	0fc6      	lsrs	r6, r0, #31
 8000642:	2f00      	cmp	r7, #0
 8000644:	d100      	bne.n	8000648 <__aeabi_fdiv+0x1c>
 8000646:	e070      	b.n	800072a <__aeabi_fdiv+0xfe>
 8000648:	2fff      	cmp	r7, #255	; 0xff
 800064a:	d100      	bne.n	800064e <__aeabi_fdiv+0x22>
 800064c:	e075      	b.n	800073a <__aeabi_fdiv+0x10e>
 800064e:	00eb      	lsls	r3, r5, #3
 8000650:	2580      	movs	r5, #128	; 0x80
 8000652:	04ed      	lsls	r5, r5, #19
 8000654:	431d      	orrs	r5, r3
 8000656:	2300      	movs	r3, #0
 8000658:	4699      	mov	r9, r3
 800065a:	469a      	mov	sl, r3
 800065c:	3f7f      	subs	r7, #127	; 0x7f
 800065e:	0260      	lsls	r0, r4, #9
 8000660:	0a43      	lsrs	r3, r0, #9
 8000662:	4698      	mov	r8, r3
 8000664:	0063      	lsls	r3, r4, #1
 8000666:	0e1b      	lsrs	r3, r3, #24
 8000668:	0fe4      	lsrs	r4, r4, #31
 800066a:	2b00      	cmp	r3, #0
 800066c:	d04e      	beq.n	800070c <__aeabi_fdiv+0xe0>
 800066e:	2bff      	cmp	r3, #255	; 0xff
 8000670:	d046      	beq.n	8000700 <__aeabi_fdiv+0xd4>
 8000672:	4642      	mov	r2, r8
 8000674:	00d0      	lsls	r0, r2, #3
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	04d2      	lsls	r2, r2, #19
 800067a:	4302      	orrs	r2, r0
 800067c:	4690      	mov	r8, r2
 800067e:	2200      	movs	r2, #0
 8000680:	3b7f      	subs	r3, #127	; 0x7f
 8000682:	0031      	movs	r1, r6
 8000684:	1aff      	subs	r7, r7, r3
 8000686:	464b      	mov	r3, r9
 8000688:	4061      	eors	r1, r4
 800068a:	b2c9      	uxtb	r1, r1
 800068c:	4313      	orrs	r3, r2
 800068e:	2b0f      	cmp	r3, #15
 8000690:	d900      	bls.n	8000694 <__aeabi_fdiv+0x68>
 8000692:	e0b5      	b.n	8000800 <__aeabi_fdiv+0x1d4>
 8000694:	486e      	ldr	r0, [pc, #440]	; (8000850 <__aeabi_fdiv+0x224>)
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	58c3      	ldr	r3, [r0, r3]
 800069a:	469f      	mov	pc, r3
 800069c:	2300      	movs	r3, #0
 800069e:	4698      	mov	r8, r3
 80006a0:	0026      	movs	r6, r4
 80006a2:	4645      	mov	r5, r8
 80006a4:	4692      	mov	sl, r2
 80006a6:	4653      	mov	r3, sl
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d100      	bne.n	80006ae <__aeabi_fdiv+0x82>
 80006ac:	e089      	b.n	80007c2 <__aeabi_fdiv+0x196>
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d100      	bne.n	80006b4 <__aeabi_fdiv+0x88>
 80006b2:	e09e      	b.n	80007f2 <__aeabi_fdiv+0x1c6>
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d018      	beq.n	80006ea <__aeabi_fdiv+0xbe>
 80006b8:	003b      	movs	r3, r7
 80006ba:	337f      	adds	r3, #127	; 0x7f
 80006bc:	2b00      	cmp	r3, #0
 80006be:	dd69      	ble.n	8000794 <__aeabi_fdiv+0x168>
 80006c0:	076a      	lsls	r2, r5, #29
 80006c2:	d004      	beq.n	80006ce <__aeabi_fdiv+0xa2>
 80006c4:	220f      	movs	r2, #15
 80006c6:	402a      	ands	r2, r5
 80006c8:	2a04      	cmp	r2, #4
 80006ca:	d000      	beq.n	80006ce <__aeabi_fdiv+0xa2>
 80006cc:	3504      	adds	r5, #4
 80006ce:	012a      	lsls	r2, r5, #4
 80006d0:	d503      	bpl.n	80006da <__aeabi_fdiv+0xae>
 80006d2:	4b60      	ldr	r3, [pc, #384]	; (8000854 <__aeabi_fdiv+0x228>)
 80006d4:	401d      	ands	r5, r3
 80006d6:	003b      	movs	r3, r7
 80006d8:	3380      	adds	r3, #128	; 0x80
 80006da:	2bfe      	cmp	r3, #254	; 0xfe
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_fdiv+0xb4>
 80006de:	e070      	b.n	80007c2 <__aeabi_fdiv+0x196>
 80006e0:	01ad      	lsls	r5, r5, #6
 80006e2:	0a6d      	lsrs	r5, r5, #9
 80006e4:	b2d8      	uxtb	r0, r3
 80006e6:	e002      	b.n	80006ee <__aeabi_fdiv+0xc2>
 80006e8:	000e      	movs	r6, r1
 80006ea:	2000      	movs	r0, #0
 80006ec:	2500      	movs	r5, #0
 80006ee:	05c0      	lsls	r0, r0, #23
 80006f0:	4328      	orrs	r0, r5
 80006f2:	07f6      	lsls	r6, r6, #31
 80006f4:	4330      	orrs	r0, r6
 80006f6:	bce0      	pop	{r5, r6, r7}
 80006f8:	46ba      	mov	sl, r7
 80006fa:	46b1      	mov	r9, r6
 80006fc:	46a8      	mov	r8, r5
 80006fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000700:	4643      	mov	r3, r8
 8000702:	2b00      	cmp	r3, #0
 8000704:	d13f      	bne.n	8000786 <__aeabi_fdiv+0x15a>
 8000706:	2202      	movs	r2, #2
 8000708:	3fff      	subs	r7, #255	; 0xff
 800070a:	e003      	b.n	8000714 <__aeabi_fdiv+0xe8>
 800070c:	4643      	mov	r3, r8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d12d      	bne.n	800076e <__aeabi_fdiv+0x142>
 8000712:	2201      	movs	r2, #1
 8000714:	0031      	movs	r1, r6
 8000716:	464b      	mov	r3, r9
 8000718:	4061      	eors	r1, r4
 800071a:	b2c9      	uxtb	r1, r1
 800071c:	4313      	orrs	r3, r2
 800071e:	2b0f      	cmp	r3, #15
 8000720:	d834      	bhi.n	800078c <__aeabi_fdiv+0x160>
 8000722:	484d      	ldr	r0, [pc, #308]	; (8000858 <__aeabi_fdiv+0x22c>)
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	58c3      	ldr	r3, [r0, r3]
 8000728:	469f      	mov	pc, r3
 800072a:	2d00      	cmp	r5, #0
 800072c:	d113      	bne.n	8000756 <__aeabi_fdiv+0x12a>
 800072e:	2304      	movs	r3, #4
 8000730:	4699      	mov	r9, r3
 8000732:	3b03      	subs	r3, #3
 8000734:	2700      	movs	r7, #0
 8000736:	469a      	mov	sl, r3
 8000738:	e791      	b.n	800065e <__aeabi_fdiv+0x32>
 800073a:	2d00      	cmp	r5, #0
 800073c:	d105      	bne.n	800074a <__aeabi_fdiv+0x11e>
 800073e:	2308      	movs	r3, #8
 8000740:	4699      	mov	r9, r3
 8000742:	3b06      	subs	r3, #6
 8000744:	27ff      	movs	r7, #255	; 0xff
 8000746:	469a      	mov	sl, r3
 8000748:	e789      	b.n	800065e <__aeabi_fdiv+0x32>
 800074a:	230c      	movs	r3, #12
 800074c:	4699      	mov	r9, r3
 800074e:	3b09      	subs	r3, #9
 8000750:	27ff      	movs	r7, #255	; 0xff
 8000752:	469a      	mov	sl, r3
 8000754:	e783      	b.n	800065e <__aeabi_fdiv+0x32>
 8000756:	0028      	movs	r0, r5
 8000758:	f000 ff9e 	bl	8001698 <__clzsi2>
 800075c:	2776      	movs	r7, #118	; 0x76
 800075e:	1f43      	subs	r3, r0, #5
 8000760:	409d      	lsls	r5, r3
 8000762:	2300      	movs	r3, #0
 8000764:	427f      	negs	r7, r7
 8000766:	4699      	mov	r9, r3
 8000768:	469a      	mov	sl, r3
 800076a:	1a3f      	subs	r7, r7, r0
 800076c:	e777      	b.n	800065e <__aeabi_fdiv+0x32>
 800076e:	4640      	mov	r0, r8
 8000770:	f000 ff92 	bl	8001698 <__clzsi2>
 8000774:	4642      	mov	r2, r8
 8000776:	1f43      	subs	r3, r0, #5
 8000778:	409a      	lsls	r2, r3
 800077a:	2376      	movs	r3, #118	; 0x76
 800077c:	425b      	negs	r3, r3
 800077e:	4690      	mov	r8, r2
 8000780:	1a1b      	subs	r3, r3, r0
 8000782:	2200      	movs	r2, #0
 8000784:	e77d      	b.n	8000682 <__aeabi_fdiv+0x56>
 8000786:	23ff      	movs	r3, #255	; 0xff
 8000788:	2203      	movs	r2, #3
 800078a:	e77a      	b.n	8000682 <__aeabi_fdiv+0x56>
 800078c:	000e      	movs	r6, r1
 800078e:	20ff      	movs	r0, #255	; 0xff
 8000790:	2500      	movs	r5, #0
 8000792:	e7ac      	b.n	80006ee <__aeabi_fdiv+0xc2>
 8000794:	2001      	movs	r0, #1
 8000796:	1ac0      	subs	r0, r0, r3
 8000798:	281b      	cmp	r0, #27
 800079a:	dca6      	bgt.n	80006ea <__aeabi_fdiv+0xbe>
 800079c:	379e      	adds	r7, #158	; 0x9e
 800079e:	002a      	movs	r2, r5
 80007a0:	40bd      	lsls	r5, r7
 80007a2:	40c2      	lsrs	r2, r0
 80007a4:	1e6b      	subs	r3, r5, #1
 80007a6:	419d      	sbcs	r5, r3
 80007a8:	4315      	orrs	r5, r2
 80007aa:	076b      	lsls	r3, r5, #29
 80007ac:	d004      	beq.n	80007b8 <__aeabi_fdiv+0x18c>
 80007ae:	230f      	movs	r3, #15
 80007b0:	402b      	ands	r3, r5
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	d000      	beq.n	80007b8 <__aeabi_fdiv+0x18c>
 80007b6:	3504      	adds	r5, #4
 80007b8:	016b      	lsls	r3, r5, #5
 80007ba:	d544      	bpl.n	8000846 <__aeabi_fdiv+0x21a>
 80007bc:	2001      	movs	r0, #1
 80007be:	2500      	movs	r5, #0
 80007c0:	e795      	b.n	80006ee <__aeabi_fdiv+0xc2>
 80007c2:	20ff      	movs	r0, #255	; 0xff
 80007c4:	2500      	movs	r5, #0
 80007c6:	e792      	b.n	80006ee <__aeabi_fdiv+0xc2>
 80007c8:	2580      	movs	r5, #128	; 0x80
 80007ca:	2600      	movs	r6, #0
 80007cc:	20ff      	movs	r0, #255	; 0xff
 80007ce:	03ed      	lsls	r5, r5, #15
 80007d0:	e78d      	b.n	80006ee <__aeabi_fdiv+0xc2>
 80007d2:	2300      	movs	r3, #0
 80007d4:	4698      	mov	r8, r3
 80007d6:	2080      	movs	r0, #128	; 0x80
 80007d8:	03c0      	lsls	r0, r0, #15
 80007da:	4205      	tst	r5, r0
 80007dc:	d009      	beq.n	80007f2 <__aeabi_fdiv+0x1c6>
 80007de:	4643      	mov	r3, r8
 80007e0:	4203      	tst	r3, r0
 80007e2:	d106      	bne.n	80007f2 <__aeabi_fdiv+0x1c6>
 80007e4:	4645      	mov	r5, r8
 80007e6:	4305      	orrs	r5, r0
 80007e8:	026d      	lsls	r5, r5, #9
 80007ea:	0026      	movs	r6, r4
 80007ec:	20ff      	movs	r0, #255	; 0xff
 80007ee:	0a6d      	lsrs	r5, r5, #9
 80007f0:	e77d      	b.n	80006ee <__aeabi_fdiv+0xc2>
 80007f2:	2080      	movs	r0, #128	; 0x80
 80007f4:	03c0      	lsls	r0, r0, #15
 80007f6:	4305      	orrs	r5, r0
 80007f8:	026d      	lsls	r5, r5, #9
 80007fa:	20ff      	movs	r0, #255	; 0xff
 80007fc:	0a6d      	lsrs	r5, r5, #9
 80007fe:	e776      	b.n	80006ee <__aeabi_fdiv+0xc2>
 8000800:	4642      	mov	r2, r8
 8000802:	016b      	lsls	r3, r5, #5
 8000804:	0150      	lsls	r0, r2, #5
 8000806:	4283      	cmp	r3, r0
 8000808:	d219      	bcs.n	800083e <__aeabi_fdiv+0x212>
 800080a:	221b      	movs	r2, #27
 800080c:	2500      	movs	r5, #0
 800080e:	3f01      	subs	r7, #1
 8000810:	2601      	movs	r6, #1
 8000812:	001c      	movs	r4, r3
 8000814:	006d      	lsls	r5, r5, #1
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	2c00      	cmp	r4, #0
 800081a:	db01      	blt.n	8000820 <__aeabi_fdiv+0x1f4>
 800081c:	4298      	cmp	r0, r3
 800081e:	d801      	bhi.n	8000824 <__aeabi_fdiv+0x1f8>
 8000820:	1a1b      	subs	r3, r3, r0
 8000822:	4335      	orrs	r5, r6
 8000824:	3a01      	subs	r2, #1
 8000826:	2a00      	cmp	r2, #0
 8000828:	d1f3      	bne.n	8000812 <__aeabi_fdiv+0x1e6>
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	4193      	sbcs	r3, r2
 800082e:	431d      	orrs	r5, r3
 8000830:	003b      	movs	r3, r7
 8000832:	337f      	adds	r3, #127	; 0x7f
 8000834:	000e      	movs	r6, r1
 8000836:	2b00      	cmp	r3, #0
 8000838:	dd00      	ble.n	800083c <__aeabi_fdiv+0x210>
 800083a:	e741      	b.n	80006c0 <__aeabi_fdiv+0x94>
 800083c:	e7aa      	b.n	8000794 <__aeabi_fdiv+0x168>
 800083e:	221a      	movs	r2, #26
 8000840:	2501      	movs	r5, #1
 8000842:	1a1b      	subs	r3, r3, r0
 8000844:	e7e4      	b.n	8000810 <__aeabi_fdiv+0x1e4>
 8000846:	01ad      	lsls	r5, r5, #6
 8000848:	2000      	movs	r0, #0
 800084a:	0a6d      	lsrs	r5, r5, #9
 800084c:	e74f      	b.n	80006ee <__aeabi_fdiv+0xc2>
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	08003e30 	.word	0x08003e30
 8000854:	f7ffffff 	.word	0xf7ffffff
 8000858:	08003e70 	.word	0x08003e70

0800085c <__eqsf2>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	0042      	lsls	r2, r0, #1
 8000860:	0245      	lsls	r5, r0, #9
 8000862:	024e      	lsls	r6, r1, #9
 8000864:	004c      	lsls	r4, r1, #1
 8000866:	0fc3      	lsrs	r3, r0, #31
 8000868:	0a6d      	lsrs	r5, r5, #9
 800086a:	2001      	movs	r0, #1
 800086c:	0e12      	lsrs	r2, r2, #24
 800086e:	0a76      	lsrs	r6, r6, #9
 8000870:	0e24      	lsrs	r4, r4, #24
 8000872:	0fc9      	lsrs	r1, r1, #31
 8000874:	2aff      	cmp	r2, #255	; 0xff
 8000876:	d006      	beq.n	8000886 <__eqsf2+0x2a>
 8000878:	2cff      	cmp	r4, #255	; 0xff
 800087a:	d003      	beq.n	8000884 <__eqsf2+0x28>
 800087c:	42a2      	cmp	r2, r4
 800087e:	d101      	bne.n	8000884 <__eqsf2+0x28>
 8000880:	42b5      	cmp	r5, r6
 8000882:	d006      	beq.n	8000892 <__eqsf2+0x36>
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	2d00      	cmp	r5, #0
 8000888:	d1fc      	bne.n	8000884 <__eqsf2+0x28>
 800088a:	2cff      	cmp	r4, #255	; 0xff
 800088c:	d1fa      	bne.n	8000884 <__eqsf2+0x28>
 800088e:	2e00      	cmp	r6, #0
 8000890:	d1f8      	bne.n	8000884 <__eqsf2+0x28>
 8000892:	428b      	cmp	r3, r1
 8000894:	d006      	beq.n	80008a4 <__eqsf2+0x48>
 8000896:	2001      	movs	r0, #1
 8000898:	2a00      	cmp	r2, #0
 800089a:	d1f3      	bne.n	8000884 <__eqsf2+0x28>
 800089c:	0028      	movs	r0, r5
 800089e:	1e43      	subs	r3, r0, #1
 80008a0:	4198      	sbcs	r0, r3
 80008a2:	e7ef      	b.n	8000884 <__eqsf2+0x28>
 80008a4:	2000      	movs	r0, #0
 80008a6:	e7ed      	b.n	8000884 <__eqsf2+0x28>

080008a8 <__gesf2>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	0042      	lsls	r2, r0, #1
 80008ac:	0245      	lsls	r5, r0, #9
 80008ae:	024e      	lsls	r6, r1, #9
 80008b0:	004c      	lsls	r4, r1, #1
 80008b2:	0fc3      	lsrs	r3, r0, #31
 80008b4:	0a6d      	lsrs	r5, r5, #9
 80008b6:	0e12      	lsrs	r2, r2, #24
 80008b8:	0a76      	lsrs	r6, r6, #9
 80008ba:	0e24      	lsrs	r4, r4, #24
 80008bc:	0fc8      	lsrs	r0, r1, #31
 80008be:	2aff      	cmp	r2, #255	; 0xff
 80008c0:	d01b      	beq.n	80008fa <__gesf2+0x52>
 80008c2:	2cff      	cmp	r4, #255	; 0xff
 80008c4:	d00e      	beq.n	80008e4 <__gesf2+0x3c>
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	d11b      	bne.n	8000902 <__gesf2+0x5a>
 80008ca:	2c00      	cmp	r4, #0
 80008cc:	d101      	bne.n	80008d2 <__gesf2+0x2a>
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	d01c      	beq.n	800090c <__gesf2+0x64>
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d00c      	beq.n	80008f0 <__gesf2+0x48>
 80008d6:	4283      	cmp	r3, r0
 80008d8:	d01c      	beq.n	8000914 <__gesf2+0x6c>
 80008da:	2102      	movs	r1, #2
 80008dc:	1e58      	subs	r0, r3, #1
 80008de:	4008      	ands	r0, r1
 80008e0:	3801      	subs	r0, #1
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	2e00      	cmp	r6, #0
 80008e6:	d122      	bne.n	800092e <__gesf2+0x86>
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	d1f4      	bne.n	80008d6 <__gesf2+0x2e>
 80008ec:	2d00      	cmp	r5, #0
 80008ee:	d1f2      	bne.n	80008d6 <__gesf2+0x2e>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d1f6      	bne.n	80008e2 <__gesf2+0x3a>
 80008f4:	2001      	movs	r0, #1
 80008f6:	4240      	negs	r0, r0
 80008f8:	e7f3      	b.n	80008e2 <__gesf2+0x3a>
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d117      	bne.n	800092e <__gesf2+0x86>
 80008fe:	2cff      	cmp	r4, #255	; 0xff
 8000900:	d0f0      	beq.n	80008e4 <__gesf2+0x3c>
 8000902:	2c00      	cmp	r4, #0
 8000904:	d1e7      	bne.n	80008d6 <__gesf2+0x2e>
 8000906:	2e00      	cmp	r6, #0
 8000908:	d1e5      	bne.n	80008d6 <__gesf2+0x2e>
 800090a:	e7e6      	b.n	80008da <__gesf2+0x32>
 800090c:	2000      	movs	r0, #0
 800090e:	2d00      	cmp	r5, #0
 8000910:	d0e7      	beq.n	80008e2 <__gesf2+0x3a>
 8000912:	e7e2      	b.n	80008da <__gesf2+0x32>
 8000914:	42a2      	cmp	r2, r4
 8000916:	dc05      	bgt.n	8000924 <__gesf2+0x7c>
 8000918:	dbea      	blt.n	80008f0 <__gesf2+0x48>
 800091a:	42b5      	cmp	r5, r6
 800091c:	d802      	bhi.n	8000924 <__gesf2+0x7c>
 800091e:	d3e7      	bcc.n	80008f0 <__gesf2+0x48>
 8000920:	2000      	movs	r0, #0
 8000922:	e7de      	b.n	80008e2 <__gesf2+0x3a>
 8000924:	4243      	negs	r3, r0
 8000926:	4158      	adcs	r0, r3
 8000928:	0040      	lsls	r0, r0, #1
 800092a:	3801      	subs	r0, #1
 800092c:	e7d9      	b.n	80008e2 <__gesf2+0x3a>
 800092e:	2002      	movs	r0, #2
 8000930:	4240      	negs	r0, r0
 8000932:	e7d6      	b.n	80008e2 <__gesf2+0x3a>

08000934 <__lesf2>:
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	0042      	lsls	r2, r0, #1
 8000938:	0245      	lsls	r5, r0, #9
 800093a:	024e      	lsls	r6, r1, #9
 800093c:	004c      	lsls	r4, r1, #1
 800093e:	0fc3      	lsrs	r3, r0, #31
 8000940:	0a6d      	lsrs	r5, r5, #9
 8000942:	0e12      	lsrs	r2, r2, #24
 8000944:	0a76      	lsrs	r6, r6, #9
 8000946:	0e24      	lsrs	r4, r4, #24
 8000948:	0fc8      	lsrs	r0, r1, #31
 800094a:	2aff      	cmp	r2, #255	; 0xff
 800094c:	d00b      	beq.n	8000966 <__lesf2+0x32>
 800094e:	2cff      	cmp	r4, #255	; 0xff
 8000950:	d00d      	beq.n	800096e <__lesf2+0x3a>
 8000952:	2a00      	cmp	r2, #0
 8000954:	d11f      	bne.n	8000996 <__lesf2+0x62>
 8000956:	2c00      	cmp	r4, #0
 8000958:	d116      	bne.n	8000988 <__lesf2+0x54>
 800095a:	2e00      	cmp	r6, #0
 800095c:	d114      	bne.n	8000988 <__lesf2+0x54>
 800095e:	2000      	movs	r0, #0
 8000960:	2d00      	cmp	r5, #0
 8000962:	d010      	beq.n	8000986 <__lesf2+0x52>
 8000964:	e009      	b.n	800097a <__lesf2+0x46>
 8000966:	2d00      	cmp	r5, #0
 8000968:	d10c      	bne.n	8000984 <__lesf2+0x50>
 800096a:	2cff      	cmp	r4, #255	; 0xff
 800096c:	d113      	bne.n	8000996 <__lesf2+0x62>
 800096e:	2e00      	cmp	r6, #0
 8000970:	d108      	bne.n	8000984 <__lesf2+0x50>
 8000972:	2a00      	cmp	r2, #0
 8000974:	d008      	beq.n	8000988 <__lesf2+0x54>
 8000976:	4283      	cmp	r3, r0
 8000978:	d012      	beq.n	80009a0 <__lesf2+0x6c>
 800097a:	2102      	movs	r1, #2
 800097c:	1e58      	subs	r0, r3, #1
 800097e:	4008      	ands	r0, r1
 8000980:	3801      	subs	r0, #1
 8000982:	e000      	b.n	8000986 <__lesf2+0x52>
 8000984:	2002      	movs	r0, #2
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	2d00      	cmp	r5, #0
 800098a:	d1f4      	bne.n	8000976 <__lesf2+0x42>
 800098c:	2800      	cmp	r0, #0
 800098e:	d1fa      	bne.n	8000986 <__lesf2+0x52>
 8000990:	2001      	movs	r0, #1
 8000992:	4240      	negs	r0, r0
 8000994:	e7f7      	b.n	8000986 <__lesf2+0x52>
 8000996:	2c00      	cmp	r4, #0
 8000998:	d1ed      	bne.n	8000976 <__lesf2+0x42>
 800099a:	2e00      	cmp	r6, #0
 800099c:	d1eb      	bne.n	8000976 <__lesf2+0x42>
 800099e:	e7ec      	b.n	800097a <__lesf2+0x46>
 80009a0:	42a2      	cmp	r2, r4
 80009a2:	dc05      	bgt.n	80009b0 <__lesf2+0x7c>
 80009a4:	dbf2      	blt.n	800098c <__lesf2+0x58>
 80009a6:	42b5      	cmp	r5, r6
 80009a8:	d802      	bhi.n	80009b0 <__lesf2+0x7c>
 80009aa:	d3ef      	bcc.n	800098c <__lesf2+0x58>
 80009ac:	2000      	movs	r0, #0
 80009ae:	e7ea      	b.n	8000986 <__lesf2+0x52>
 80009b0:	4243      	negs	r3, r0
 80009b2:	4158      	adcs	r0, r3
 80009b4:	0040      	lsls	r0, r0, #1
 80009b6:	3801      	subs	r0, #1
 80009b8:	e7e5      	b.n	8000986 <__lesf2+0x52>
 80009ba:	46c0      	nop			; (mov r8, r8)

080009bc <__aeabi_fmul>:
 80009bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009be:	464f      	mov	r7, r9
 80009c0:	4646      	mov	r6, r8
 80009c2:	46d6      	mov	lr, sl
 80009c4:	0244      	lsls	r4, r0, #9
 80009c6:	0045      	lsls	r5, r0, #1
 80009c8:	b5c0      	push	{r6, r7, lr}
 80009ca:	0a64      	lsrs	r4, r4, #9
 80009cc:	1c0f      	adds	r7, r1, #0
 80009ce:	0e2d      	lsrs	r5, r5, #24
 80009d0:	0fc6      	lsrs	r6, r0, #31
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fmul+0x1c>
 80009d6:	e08d      	b.n	8000af4 <__aeabi_fmul+0x138>
 80009d8:	2dff      	cmp	r5, #255	; 0xff
 80009da:	d100      	bne.n	80009de <__aeabi_fmul+0x22>
 80009dc:	e092      	b.n	8000b04 <__aeabi_fmul+0x148>
 80009de:	2300      	movs	r3, #0
 80009e0:	2080      	movs	r0, #128	; 0x80
 80009e2:	4699      	mov	r9, r3
 80009e4:	469a      	mov	sl, r3
 80009e6:	00e4      	lsls	r4, r4, #3
 80009e8:	04c0      	lsls	r0, r0, #19
 80009ea:	4304      	orrs	r4, r0
 80009ec:	3d7f      	subs	r5, #127	; 0x7f
 80009ee:	0278      	lsls	r0, r7, #9
 80009f0:	0a43      	lsrs	r3, r0, #9
 80009f2:	4698      	mov	r8, r3
 80009f4:	007b      	lsls	r3, r7, #1
 80009f6:	0e1b      	lsrs	r3, r3, #24
 80009f8:	0fff      	lsrs	r7, r7, #31
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d100      	bne.n	8000a00 <__aeabi_fmul+0x44>
 80009fe:	e070      	b.n	8000ae2 <__aeabi_fmul+0x126>
 8000a00:	2bff      	cmp	r3, #255	; 0xff
 8000a02:	d100      	bne.n	8000a06 <__aeabi_fmul+0x4a>
 8000a04:	e086      	b.n	8000b14 <__aeabi_fmul+0x158>
 8000a06:	4642      	mov	r2, r8
 8000a08:	00d0      	lsls	r0, r2, #3
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	3b7f      	subs	r3, #127	; 0x7f
 8000a0e:	18ed      	adds	r5, r5, r3
 8000a10:	2300      	movs	r3, #0
 8000a12:	04d2      	lsls	r2, r2, #19
 8000a14:	4302      	orrs	r2, r0
 8000a16:	4690      	mov	r8, r2
 8000a18:	469c      	mov	ip, r3
 8000a1a:	0031      	movs	r1, r6
 8000a1c:	464b      	mov	r3, r9
 8000a1e:	4079      	eors	r1, r7
 8000a20:	1c68      	adds	r0, r5, #1
 8000a22:	2b0f      	cmp	r3, #15
 8000a24:	d81c      	bhi.n	8000a60 <__aeabi_fmul+0xa4>
 8000a26:	4a76      	ldr	r2, [pc, #472]	; (8000c00 <__aeabi_fmul+0x244>)
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	58d3      	ldr	r3, [r2, r3]
 8000a2c:	469f      	mov	pc, r3
 8000a2e:	0039      	movs	r1, r7
 8000a30:	4644      	mov	r4, r8
 8000a32:	46e2      	mov	sl, ip
 8000a34:	4653      	mov	r3, sl
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d00f      	beq.n	8000a5a <__aeabi_fmul+0x9e>
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fmul+0x84>
 8000a3e:	e0d7      	b.n	8000bf0 <__aeabi_fmul+0x234>
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d137      	bne.n	8000ab4 <__aeabi_fmul+0xf8>
 8000a44:	2000      	movs	r0, #0
 8000a46:	2400      	movs	r4, #0
 8000a48:	05c0      	lsls	r0, r0, #23
 8000a4a:	4320      	orrs	r0, r4
 8000a4c:	07c9      	lsls	r1, r1, #31
 8000a4e:	4308      	orrs	r0, r1
 8000a50:	bce0      	pop	{r5, r6, r7}
 8000a52:	46ba      	mov	sl, r7
 8000a54:	46b1      	mov	r9, r6
 8000a56:	46a8      	mov	r8, r5
 8000a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a5a:	20ff      	movs	r0, #255	; 0xff
 8000a5c:	2400      	movs	r4, #0
 8000a5e:	e7f3      	b.n	8000a48 <__aeabi_fmul+0x8c>
 8000a60:	0c26      	lsrs	r6, r4, #16
 8000a62:	0424      	lsls	r4, r4, #16
 8000a64:	0c22      	lsrs	r2, r4, #16
 8000a66:	4644      	mov	r4, r8
 8000a68:	0424      	lsls	r4, r4, #16
 8000a6a:	0c24      	lsrs	r4, r4, #16
 8000a6c:	4643      	mov	r3, r8
 8000a6e:	0027      	movs	r7, r4
 8000a70:	0c1b      	lsrs	r3, r3, #16
 8000a72:	4357      	muls	r7, r2
 8000a74:	4374      	muls	r4, r6
 8000a76:	435a      	muls	r2, r3
 8000a78:	435e      	muls	r6, r3
 8000a7a:	1912      	adds	r2, r2, r4
 8000a7c:	0c3b      	lsrs	r3, r7, #16
 8000a7e:	189b      	adds	r3, r3, r2
 8000a80:	429c      	cmp	r4, r3
 8000a82:	d903      	bls.n	8000a8c <__aeabi_fmul+0xd0>
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	0252      	lsls	r2, r2, #9
 8000a88:	4694      	mov	ip, r2
 8000a8a:	4466      	add	r6, ip
 8000a8c:	043f      	lsls	r7, r7, #16
 8000a8e:	041a      	lsls	r2, r3, #16
 8000a90:	0c3f      	lsrs	r7, r7, #16
 8000a92:	19d2      	adds	r2, r2, r7
 8000a94:	0194      	lsls	r4, r2, #6
 8000a96:	1e67      	subs	r7, r4, #1
 8000a98:	41bc      	sbcs	r4, r7
 8000a9a:	0c1b      	lsrs	r3, r3, #16
 8000a9c:	0e92      	lsrs	r2, r2, #26
 8000a9e:	199b      	adds	r3, r3, r6
 8000aa0:	4314      	orrs	r4, r2
 8000aa2:	019b      	lsls	r3, r3, #6
 8000aa4:	431c      	orrs	r4, r3
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	d400      	bmi.n	8000aac <__aeabi_fmul+0xf0>
 8000aaa:	e09b      	b.n	8000be4 <__aeabi_fmul+0x228>
 8000aac:	2301      	movs	r3, #1
 8000aae:	0862      	lsrs	r2, r4, #1
 8000ab0:	401c      	ands	r4, r3
 8000ab2:	4314      	orrs	r4, r2
 8000ab4:	0002      	movs	r2, r0
 8000ab6:	327f      	adds	r2, #127	; 0x7f
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	dd64      	ble.n	8000b86 <__aeabi_fmul+0x1ca>
 8000abc:	0763      	lsls	r3, r4, #29
 8000abe:	d004      	beq.n	8000aca <__aeabi_fmul+0x10e>
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	4023      	ands	r3, r4
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d000      	beq.n	8000aca <__aeabi_fmul+0x10e>
 8000ac8:	3404      	adds	r4, #4
 8000aca:	0123      	lsls	r3, r4, #4
 8000acc:	d503      	bpl.n	8000ad6 <__aeabi_fmul+0x11a>
 8000ace:	0002      	movs	r2, r0
 8000ad0:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <__aeabi_fmul+0x248>)
 8000ad2:	3280      	adds	r2, #128	; 0x80
 8000ad4:	401c      	ands	r4, r3
 8000ad6:	2afe      	cmp	r2, #254	; 0xfe
 8000ad8:	dcbf      	bgt.n	8000a5a <__aeabi_fmul+0x9e>
 8000ada:	01a4      	lsls	r4, r4, #6
 8000adc:	0a64      	lsrs	r4, r4, #9
 8000ade:	b2d0      	uxtb	r0, r2
 8000ae0:	e7b2      	b.n	8000a48 <__aeabi_fmul+0x8c>
 8000ae2:	4643      	mov	r3, r8
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d13d      	bne.n	8000b64 <__aeabi_fmul+0x1a8>
 8000ae8:	464a      	mov	r2, r9
 8000aea:	3301      	adds	r3, #1
 8000aec:	431a      	orrs	r2, r3
 8000aee:	4691      	mov	r9, r2
 8000af0:	469c      	mov	ip, r3
 8000af2:	e792      	b.n	8000a1a <__aeabi_fmul+0x5e>
 8000af4:	2c00      	cmp	r4, #0
 8000af6:	d129      	bne.n	8000b4c <__aeabi_fmul+0x190>
 8000af8:	2304      	movs	r3, #4
 8000afa:	4699      	mov	r9, r3
 8000afc:	3b03      	subs	r3, #3
 8000afe:	2500      	movs	r5, #0
 8000b00:	469a      	mov	sl, r3
 8000b02:	e774      	b.n	80009ee <__aeabi_fmul+0x32>
 8000b04:	2c00      	cmp	r4, #0
 8000b06:	d11b      	bne.n	8000b40 <__aeabi_fmul+0x184>
 8000b08:	2308      	movs	r3, #8
 8000b0a:	4699      	mov	r9, r3
 8000b0c:	3b06      	subs	r3, #6
 8000b0e:	25ff      	movs	r5, #255	; 0xff
 8000b10:	469a      	mov	sl, r3
 8000b12:	e76c      	b.n	80009ee <__aeabi_fmul+0x32>
 8000b14:	4643      	mov	r3, r8
 8000b16:	35ff      	adds	r5, #255	; 0xff
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10b      	bne.n	8000b34 <__aeabi_fmul+0x178>
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	464a      	mov	r2, r9
 8000b20:	431a      	orrs	r2, r3
 8000b22:	4691      	mov	r9, r2
 8000b24:	469c      	mov	ip, r3
 8000b26:	e778      	b.n	8000a1a <__aeabi_fmul+0x5e>
 8000b28:	4653      	mov	r3, sl
 8000b2a:	0031      	movs	r1, r6
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_fmul+0x176>
 8000b30:	e783      	b.n	8000a3a <__aeabi_fmul+0x7e>
 8000b32:	e792      	b.n	8000a5a <__aeabi_fmul+0x9e>
 8000b34:	2303      	movs	r3, #3
 8000b36:	464a      	mov	r2, r9
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	4691      	mov	r9, r2
 8000b3c:	469c      	mov	ip, r3
 8000b3e:	e76c      	b.n	8000a1a <__aeabi_fmul+0x5e>
 8000b40:	230c      	movs	r3, #12
 8000b42:	4699      	mov	r9, r3
 8000b44:	3b09      	subs	r3, #9
 8000b46:	25ff      	movs	r5, #255	; 0xff
 8000b48:	469a      	mov	sl, r3
 8000b4a:	e750      	b.n	80009ee <__aeabi_fmul+0x32>
 8000b4c:	0020      	movs	r0, r4
 8000b4e:	f000 fda3 	bl	8001698 <__clzsi2>
 8000b52:	2576      	movs	r5, #118	; 0x76
 8000b54:	1f43      	subs	r3, r0, #5
 8000b56:	409c      	lsls	r4, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	426d      	negs	r5, r5
 8000b5c:	4699      	mov	r9, r3
 8000b5e:	469a      	mov	sl, r3
 8000b60:	1a2d      	subs	r5, r5, r0
 8000b62:	e744      	b.n	80009ee <__aeabi_fmul+0x32>
 8000b64:	4640      	mov	r0, r8
 8000b66:	f000 fd97 	bl	8001698 <__clzsi2>
 8000b6a:	4642      	mov	r2, r8
 8000b6c:	1f43      	subs	r3, r0, #5
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	2300      	movs	r3, #0
 8000b72:	1a2d      	subs	r5, r5, r0
 8000b74:	4690      	mov	r8, r2
 8000b76:	469c      	mov	ip, r3
 8000b78:	3d76      	subs	r5, #118	; 0x76
 8000b7a:	e74e      	b.n	8000a1a <__aeabi_fmul+0x5e>
 8000b7c:	2480      	movs	r4, #128	; 0x80
 8000b7e:	2100      	movs	r1, #0
 8000b80:	20ff      	movs	r0, #255	; 0xff
 8000b82:	03e4      	lsls	r4, r4, #15
 8000b84:	e760      	b.n	8000a48 <__aeabi_fmul+0x8c>
 8000b86:	2301      	movs	r3, #1
 8000b88:	1a9b      	subs	r3, r3, r2
 8000b8a:	2b1b      	cmp	r3, #27
 8000b8c:	dd00      	ble.n	8000b90 <__aeabi_fmul+0x1d4>
 8000b8e:	e759      	b.n	8000a44 <__aeabi_fmul+0x88>
 8000b90:	0022      	movs	r2, r4
 8000b92:	309e      	adds	r0, #158	; 0x9e
 8000b94:	40da      	lsrs	r2, r3
 8000b96:	4084      	lsls	r4, r0
 8000b98:	0013      	movs	r3, r2
 8000b9a:	1e62      	subs	r2, r4, #1
 8000b9c:	4194      	sbcs	r4, r2
 8000b9e:	431c      	orrs	r4, r3
 8000ba0:	0763      	lsls	r3, r4, #29
 8000ba2:	d004      	beq.n	8000bae <__aeabi_fmul+0x1f2>
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	4023      	ands	r3, r4
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d000      	beq.n	8000bae <__aeabi_fmul+0x1f2>
 8000bac:	3404      	adds	r4, #4
 8000bae:	0163      	lsls	r3, r4, #5
 8000bb0:	d51a      	bpl.n	8000be8 <__aeabi_fmul+0x22c>
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	e747      	b.n	8000a48 <__aeabi_fmul+0x8c>
 8000bb8:	2080      	movs	r0, #128	; 0x80
 8000bba:	03c0      	lsls	r0, r0, #15
 8000bbc:	4204      	tst	r4, r0
 8000bbe:	d009      	beq.n	8000bd4 <__aeabi_fmul+0x218>
 8000bc0:	4643      	mov	r3, r8
 8000bc2:	4203      	tst	r3, r0
 8000bc4:	d106      	bne.n	8000bd4 <__aeabi_fmul+0x218>
 8000bc6:	4644      	mov	r4, r8
 8000bc8:	4304      	orrs	r4, r0
 8000bca:	0264      	lsls	r4, r4, #9
 8000bcc:	0039      	movs	r1, r7
 8000bce:	20ff      	movs	r0, #255	; 0xff
 8000bd0:	0a64      	lsrs	r4, r4, #9
 8000bd2:	e739      	b.n	8000a48 <__aeabi_fmul+0x8c>
 8000bd4:	2080      	movs	r0, #128	; 0x80
 8000bd6:	03c0      	lsls	r0, r0, #15
 8000bd8:	4304      	orrs	r4, r0
 8000bda:	0264      	lsls	r4, r4, #9
 8000bdc:	0031      	movs	r1, r6
 8000bde:	20ff      	movs	r0, #255	; 0xff
 8000be0:	0a64      	lsrs	r4, r4, #9
 8000be2:	e731      	b.n	8000a48 <__aeabi_fmul+0x8c>
 8000be4:	0028      	movs	r0, r5
 8000be6:	e765      	b.n	8000ab4 <__aeabi_fmul+0xf8>
 8000be8:	01a4      	lsls	r4, r4, #6
 8000bea:	2000      	movs	r0, #0
 8000bec:	0a64      	lsrs	r4, r4, #9
 8000bee:	e72b      	b.n	8000a48 <__aeabi_fmul+0x8c>
 8000bf0:	2080      	movs	r0, #128	; 0x80
 8000bf2:	03c0      	lsls	r0, r0, #15
 8000bf4:	4304      	orrs	r4, r0
 8000bf6:	0264      	lsls	r4, r4, #9
 8000bf8:	20ff      	movs	r0, #255	; 0xff
 8000bfa:	0a64      	lsrs	r4, r4, #9
 8000bfc:	e724      	b.n	8000a48 <__aeabi_fmul+0x8c>
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	08003eb0 	.word	0x08003eb0
 8000c04:	f7ffffff 	.word	0xf7ffffff

08000c08 <__aeabi_fsub>:
 8000c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0a:	46ce      	mov	lr, r9
 8000c0c:	4647      	mov	r7, r8
 8000c0e:	0243      	lsls	r3, r0, #9
 8000c10:	0a5b      	lsrs	r3, r3, #9
 8000c12:	024e      	lsls	r6, r1, #9
 8000c14:	00da      	lsls	r2, r3, #3
 8000c16:	4694      	mov	ip, r2
 8000c18:	0a72      	lsrs	r2, r6, #9
 8000c1a:	4691      	mov	r9, r2
 8000c1c:	0045      	lsls	r5, r0, #1
 8000c1e:	004a      	lsls	r2, r1, #1
 8000c20:	b580      	push	{r7, lr}
 8000c22:	0e2d      	lsrs	r5, r5, #24
 8000c24:	001f      	movs	r7, r3
 8000c26:	0fc4      	lsrs	r4, r0, #31
 8000c28:	0e12      	lsrs	r2, r2, #24
 8000c2a:	0fc9      	lsrs	r1, r1, #31
 8000c2c:	09b6      	lsrs	r6, r6, #6
 8000c2e:	2aff      	cmp	r2, #255	; 0xff
 8000c30:	d05b      	beq.n	8000cea <__aeabi_fsub+0xe2>
 8000c32:	2001      	movs	r0, #1
 8000c34:	4041      	eors	r1, r0
 8000c36:	428c      	cmp	r4, r1
 8000c38:	d039      	beq.n	8000cae <__aeabi_fsub+0xa6>
 8000c3a:	1aa8      	subs	r0, r5, r2
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	dd5a      	ble.n	8000cf6 <__aeabi_fsub+0xee>
 8000c40:	2a00      	cmp	r2, #0
 8000c42:	d06a      	beq.n	8000d1a <__aeabi_fsub+0x112>
 8000c44:	2dff      	cmp	r5, #255	; 0xff
 8000c46:	d100      	bne.n	8000c4a <__aeabi_fsub+0x42>
 8000c48:	e0d9      	b.n	8000dfe <__aeabi_fsub+0x1f6>
 8000c4a:	2280      	movs	r2, #128	; 0x80
 8000c4c:	04d2      	lsls	r2, r2, #19
 8000c4e:	4316      	orrs	r6, r2
 8000c50:	281b      	cmp	r0, #27
 8000c52:	dc00      	bgt.n	8000c56 <__aeabi_fsub+0x4e>
 8000c54:	e0e9      	b.n	8000e2a <__aeabi_fsub+0x222>
 8000c56:	2001      	movs	r0, #1
 8000c58:	4663      	mov	r3, ip
 8000c5a:	1a18      	subs	r0, r3, r0
 8000c5c:	0143      	lsls	r3, r0, #5
 8000c5e:	d400      	bmi.n	8000c62 <__aeabi_fsub+0x5a>
 8000c60:	e0b4      	b.n	8000dcc <__aeabi_fsub+0x1c4>
 8000c62:	0180      	lsls	r0, r0, #6
 8000c64:	0987      	lsrs	r7, r0, #6
 8000c66:	0038      	movs	r0, r7
 8000c68:	f000 fd16 	bl	8001698 <__clzsi2>
 8000c6c:	3805      	subs	r0, #5
 8000c6e:	4087      	lsls	r7, r0
 8000c70:	4285      	cmp	r5, r0
 8000c72:	dc00      	bgt.n	8000c76 <__aeabi_fsub+0x6e>
 8000c74:	e0cc      	b.n	8000e10 <__aeabi_fsub+0x208>
 8000c76:	1a2d      	subs	r5, r5, r0
 8000c78:	48b5      	ldr	r0, [pc, #724]	; (8000f50 <__aeabi_fsub+0x348>)
 8000c7a:	4038      	ands	r0, r7
 8000c7c:	0743      	lsls	r3, r0, #29
 8000c7e:	d004      	beq.n	8000c8a <__aeabi_fsub+0x82>
 8000c80:	230f      	movs	r3, #15
 8000c82:	4003      	ands	r3, r0
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	d000      	beq.n	8000c8a <__aeabi_fsub+0x82>
 8000c88:	3004      	adds	r0, #4
 8000c8a:	0143      	lsls	r3, r0, #5
 8000c8c:	d400      	bmi.n	8000c90 <__aeabi_fsub+0x88>
 8000c8e:	e0a0      	b.n	8000dd2 <__aeabi_fsub+0x1ca>
 8000c90:	1c6a      	adds	r2, r5, #1
 8000c92:	2dfe      	cmp	r5, #254	; 0xfe
 8000c94:	d100      	bne.n	8000c98 <__aeabi_fsub+0x90>
 8000c96:	e08d      	b.n	8000db4 <__aeabi_fsub+0x1ac>
 8000c98:	0180      	lsls	r0, r0, #6
 8000c9a:	0a47      	lsrs	r7, r0, #9
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	05d0      	lsls	r0, r2, #23
 8000ca0:	4338      	orrs	r0, r7
 8000ca2:	07e4      	lsls	r4, r4, #31
 8000ca4:	4320      	orrs	r0, r4
 8000ca6:	bcc0      	pop	{r6, r7}
 8000ca8:	46b9      	mov	r9, r7
 8000caa:	46b0      	mov	r8, r6
 8000cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cae:	1aa8      	subs	r0, r5, r2
 8000cb0:	4680      	mov	r8, r0
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	dd45      	ble.n	8000d42 <__aeabi_fsub+0x13a>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d070      	beq.n	8000d9c <__aeabi_fsub+0x194>
 8000cba:	2dff      	cmp	r5, #255	; 0xff
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_fsub+0xb8>
 8000cbe:	e09e      	b.n	8000dfe <__aeabi_fsub+0x1f6>
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	04db      	lsls	r3, r3, #19
 8000cc4:	431e      	orrs	r6, r3
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	2b1b      	cmp	r3, #27
 8000cca:	dc00      	bgt.n	8000cce <__aeabi_fsub+0xc6>
 8000ccc:	e0d2      	b.n	8000e74 <__aeabi_fsub+0x26c>
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4460      	add	r0, ip
 8000cd2:	0143      	lsls	r3, r0, #5
 8000cd4:	d57a      	bpl.n	8000dcc <__aeabi_fsub+0x1c4>
 8000cd6:	3501      	adds	r5, #1
 8000cd8:	2dff      	cmp	r5, #255	; 0xff
 8000cda:	d06b      	beq.n	8000db4 <__aeabi_fsub+0x1ac>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	4a9d      	ldr	r2, [pc, #628]	; (8000f54 <__aeabi_fsub+0x34c>)
 8000ce0:	4003      	ands	r3, r0
 8000ce2:	0840      	lsrs	r0, r0, #1
 8000ce4:	4010      	ands	r0, r2
 8000ce6:	4318      	orrs	r0, r3
 8000ce8:	e7c8      	b.n	8000c7c <__aeabi_fsub+0x74>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d020      	beq.n	8000d30 <__aeabi_fsub+0x128>
 8000cee:	428c      	cmp	r4, r1
 8000cf0:	d023      	beq.n	8000d3a <__aeabi_fsub+0x132>
 8000cf2:	0028      	movs	r0, r5
 8000cf4:	38ff      	subs	r0, #255	; 0xff
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d039      	beq.n	8000d6e <__aeabi_fsub+0x166>
 8000cfa:	1b57      	subs	r7, r2, r5
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_fsub+0xfa>
 8000d00:	e09d      	b.n	8000e3e <__aeabi_fsub+0x236>
 8000d02:	4663      	mov	r3, ip
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d100      	bne.n	8000d0a <__aeabi_fsub+0x102>
 8000d08:	e0db      	b.n	8000ec2 <__aeabi_fsub+0x2ba>
 8000d0a:	1e7b      	subs	r3, r7, #1
 8000d0c:	2f01      	cmp	r7, #1
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_fsub+0x10a>
 8000d10:	e10d      	b.n	8000f2e <__aeabi_fsub+0x326>
 8000d12:	2fff      	cmp	r7, #255	; 0xff
 8000d14:	d071      	beq.n	8000dfa <__aeabi_fsub+0x1f2>
 8000d16:	001f      	movs	r7, r3
 8000d18:	e098      	b.n	8000e4c <__aeabi_fsub+0x244>
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_fsub+0x118>
 8000d1e:	e0a7      	b.n	8000e70 <__aeabi_fsub+0x268>
 8000d20:	1e42      	subs	r2, r0, #1
 8000d22:	2801      	cmp	r0, #1
 8000d24:	d100      	bne.n	8000d28 <__aeabi_fsub+0x120>
 8000d26:	e0e6      	b.n	8000ef6 <__aeabi_fsub+0x2ee>
 8000d28:	28ff      	cmp	r0, #255	; 0xff
 8000d2a:	d068      	beq.n	8000dfe <__aeabi_fsub+0x1f6>
 8000d2c:	0010      	movs	r0, r2
 8000d2e:	e78f      	b.n	8000c50 <__aeabi_fsub+0x48>
 8000d30:	2001      	movs	r0, #1
 8000d32:	4041      	eors	r1, r0
 8000d34:	42a1      	cmp	r1, r4
 8000d36:	d000      	beq.n	8000d3a <__aeabi_fsub+0x132>
 8000d38:	e77f      	b.n	8000c3a <__aeabi_fsub+0x32>
 8000d3a:	20ff      	movs	r0, #255	; 0xff
 8000d3c:	4240      	negs	r0, r0
 8000d3e:	4680      	mov	r8, r0
 8000d40:	44a8      	add	r8, r5
 8000d42:	4640      	mov	r0, r8
 8000d44:	2800      	cmp	r0, #0
 8000d46:	d038      	beq.n	8000dba <__aeabi_fsub+0x1b2>
 8000d48:	1b51      	subs	r1, r2, r5
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_fsub+0x148>
 8000d4e:	e0ae      	b.n	8000eae <__aeabi_fsub+0x2a6>
 8000d50:	2aff      	cmp	r2, #255	; 0xff
 8000d52:	d100      	bne.n	8000d56 <__aeabi_fsub+0x14e>
 8000d54:	e0df      	b.n	8000f16 <__aeabi_fsub+0x30e>
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	4660      	mov	r0, ip
 8000d5a:	04db      	lsls	r3, r3, #19
 8000d5c:	4318      	orrs	r0, r3
 8000d5e:	4684      	mov	ip, r0
 8000d60:	291b      	cmp	r1, #27
 8000d62:	dc00      	bgt.n	8000d66 <__aeabi_fsub+0x15e>
 8000d64:	e0d9      	b.n	8000f1a <__aeabi_fsub+0x312>
 8000d66:	2001      	movs	r0, #1
 8000d68:	0015      	movs	r5, r2
 8000d6a:	1980      	adds	r0, r0, r6
 8000d6c:	e7b1      	b.n	8000cd2 <__aeabi_fsub+0xca>
 8000d6e:	20fe      	movs	r0, #254	; 0xfe
 8000d70:	1c6a      	adds	r2, r5, #1
 8000d72:	4210      	tst	r0, r2
 8000d74:	d171      	bne.n	8000e5a <__aeabi_fsub+0x252>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d000      	beq.n	8000d7c <__aeabi_fsub+0x174>
 8000d7a:	e0a6      	b.n	8000eca <__aeabi_fsub+0x2c2>
 8000d7c:	4663      	mov	r3, ip
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d100      	bne.n	8000d84 <__aeabi_fsub+0x17c>
 8000d82:	e0d9      	b.n	8000f38 <__aeabi_fsub+0x330>
 8000d84:	2200      	movs	r2, #0
 8000d86:	2e00      	cmp	r6, #0
 8000d88:	d100      	bne.n	8000d8c <__aeabi_fsub+0x184>
 8000d8a:	e788      	b.n	8000c9e <__aeabi_fsub+0x96>
 8000d8c:	1b98      	subs	r0, r3, r6
 8000d8e:	0143      	lsls	r3, r0, #5
 8000d90:	d400      	bmi.n	8000d94 <__aeabi_fsub+0x18c>
 8000d92:	e0e1      	b.n	8000f58 <__aeabi_fsub+0x350>
 8000d94:	4663      	mov	r3, ip
 8000d96:	000c      	movs	r4, r1
 8000d98:	1af0      	subs	r0, r6, r3
 8000d9a:	e76f      	b.n	8000c7c <__aeabi_fsub+0x74>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x19a>
 8000da0:	e0b7      	b.n	8000f12 <__aeabi_fsub+0x30a>
 8000da2:	0002      	movs	r2, r0
 8000da4:	3a01      	subs	r2, #1
 8000da6:	2801      	cmp	r0, #1
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x1a4>
 8000daa:	e09c      	b.n	8000ee6 <__aeabi_fsub+0x2de>
 8000dac:	28ff      	cmp	r0, #255	; 0xff
 8000dae:	d026      	beq.n	8000dfe <__aeabi_fsub+0x1f6>
 8000db0:	4690      	mov	r8, r2
 8000db2:	e788      	b.n	8000cc6 <__aeabi_fsub+0xbe>
 8000db4:	22ff      	movs	r2, #255	; 0xff
 8000db6:	2700      	movs	r7, #0
 8000db8:	e771      	b.n	8000c9e <__aeabi_fsub+0x96>
 8000dba:	20fe      	movs	r0, #254	; 0xfe
 8000dbc:	1c6a      	adds	r2, r5, #1
 8000dbe:	4210      	tst	r0, r2
 8000dc0:	d064      	beq.n	8000e8c <__aeabi_fsub+0x284>
 8000dc2:	2aff      	cmp	r2, #255	; 0xff
 8000dc4:	d0f6      	beq.n	8000db4 <__aeabi_fsub+0x1ac>
 8000dc6:	0015      	movs	r5, r2
 8000dc8:	4466      	add	r6, ip
 8000dca:	0870      	lsrs	r0, r6, #1
 8000dcc:	0743      	lsls	r3, r0, #29
 8000dce:	d000      	beq.n	8000dd2 <__aeabi_fsub+0x1ca>
 8000dd0:	e756      	b.n	8000c80 <__aeabi_fsub+0x78>
 8000dd2:	08c3      	lsrs	r3, r0, #3
 8000dd4:	2dff      	cmp	r5, #255	; 0xff
 8000dd6:	d012      	beq.n	8000dfe <__aeabi_fsub+0x1f6>
 8000dd8:	025b      	lsls	r3, r3, #9
 8000dda:	0a5f      	lsrs	r7, r3, #9
 8000ddc:	b2ea      	uxtb	r2, r5
 8000dde:	e75e      	b.n	8000c9e <__aeabi_fsub+0x96>
 8000de0:	4662      	mov	r2, ip
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d100      	bne.n	8000de8 <__aeabi_fsub+0x1e0>
 8000de6:	e096      	b.n	8000f16 <__aeabi_fsub+0x30e>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d008      	beq.n	8000dfe <__aeabi_fsub+0x1f6>
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	03d2      	lsls	r2, r2, #15
 8000df0:	4213      	tst	r3, r2
 8000df2:	d004      	beq.n	8000dfe <__aeabi_fsub+0x1f6>
 8000df4:	4648      	mov	r0, r9
 8000df6:	4210      	tst	r0, r2
 8000df8:	d101      	bne.n	8000dfe <__aeabi_fsub+0x1f6>
 8000dfa:	000c      	movs	r4, r1
 8000dfc:	464b      	mov	r3, r9
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0d8      	beq.n	8000db4 <__aeabi_fsub+0x1ac>
 8000e02:	2780      	movs	r7, #128	; 0x80
 8000e04:	03ff      	lsls	r7, r7, #15
 8000e06:	431f      	orrs	r7, r3
 8000e08:	027f      	lsls	r7, r7, #9
 8000e0a:	22ff      	movs	r2, #255	; 0xff
 8000e0c:	0a7f      	lsrs	r7, r7, #9
 8000e0e:	e746      	b.n	8000c9e <__aeabi_fsub+0x96>
 8000e10:	2320      	movs	r3, #32
 8000e12:	003a      	movs	r2, r7
 8000e14:	1b45      	subs	r5, r0, r5
 8000e16:	0038      	movs	r0, r7
 8000e18:	3501      	adds	r5, #1
 8000e1a:	40ea      	lsrs	r2, r5
 8000e1c:	1b5d      	subs	r5, r3, r5
 8000e1e:	40a8      	lsls	r0, r5
 8000e20:	1e43      	subs	r3, r0, #1
 8000e22:	4198      	sbcs	r0, r3
 8000e24:	2500      	movs	r5, #0
 8000e26:	4310      	orrs	r0, r2
 8000e28:	e728      	b.n	8000c7c <__aeabi_fsub+0x74>
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	1a1b      	subs	r3, r3, r0
 8000e2e:	0032      	movs	r2, r6
 8000e30:	409e      	lsls	r6, r3
 8000e32:	40c2      	lsrs	r2, r0
 8000e34:	0030      	movs	r0, r6
 8000e36:	1e43      	subs	r3, r0, #1
 8000e38:	4198      	sbcs	r0, r3
 8000e3a:	4310      	orrs	r0, r2
 8000e3c:	e70c      	b.n	8000c58 <__aeabi_fsub+0x50>
 8000e3e:	2aff      	cmp	r2, #255	; 0xff
 8000e40:	d0db      	beq.n	8000dfa <__aeabi_fsub+0x1f2>
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	4660      	mov	r0, ip
 8000e46:	04db      	lsls	r3, r3, #19
 8000e48:	4318      	orrs	r0, r3
 8000e4a:	4684      	mov	ip, r0
 8000e4c:	2f1b      	cmp	r7, #27
 8000e4e:	dd56      	ble.n	8000efe <__aeabi_fsub+0x2f6>
 8000e50:	2001      	movs	r0, #1
 8000e52:	000c      	movs	r4, r1
 8000e54:	0015      	movs	r5, r2
 8000e56:	1a30      	subs	r0, r6, r0
 8000e58:	e700      	b.n	8000c5c <__aeabi_fsub+0x54>
 8000e5a:	4663      	mov	r3, ip
 8000e5c:	1b9f      	subs	r7, r3, r6
 8000e5e:	017b      	lsls	r3, r7, #5
 8000e60:	d43d      	bmi.n	8000ede <__aeabi_fsub+0x2d6>
 8000e62:	2f00      	cmp	r7, #0
 8000e64:	d000      	beq.n	8000e68 <__aeabi_fsub+0x260>
 8000e66:	e6fe      	b.n	8000c66 <__aeabi_fsub+0x5e>
 8000e68:	2400      	movs	r4, #0
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2700      	movs	r7, #0
 8000e6e:	e716      	b.n	8000c9e <__aeabi_fsub+0x96>
 8000e70:	0005      	movs	r5, r0
 8000e72:	e7af      	b.n	8000dd4 <__aeabi_fsub+0x1cc>
 8000e74:	0032      	movs	r2, r6
 8000e76:	4643      	mov	r3, r8
 8000e78:	4641      	mov	r1, r8
 8000e7a:	40da      	lsrs	r2, r3
 8000e7c:	2320      	movs	r3, #32
 8000e7e:	1a5b      	subs	r3, r3, r1
 8000e80:	409e      	lsls	r6, r3
 8000e82:	0030      	movs	r0, r6
 8000e84:	1e43      	subs	r3, r0, #1
 8000e86:	4198      	sbcs	r0, r3
 8000e88:	4310      	orrs	r0, r2
 8000e8a:	e721      	b.n	8000cd0 <__aeabi_fsub+0xc8>
 8000e8c:	2d00      	cmp	r5, #0
 8000e8e:	d1a7      	bne.n	8000de0 <__aeabi_fsub+0x1d8>
 8000e90:	4663      	mov	r3, ip
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d059      	beq.n	8000f4a <__aeabi_fsub+0x342>
 8000e96:	2200      	movs	r2, #0
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_fsub+0x296>
 8000e9c:	e6ff      	b.n	8000c9e <__aeabi_fsub+0x96>
 8000e9e:	0030      	movs	r0, r6
 8000ea0:	4460      	add	r0, ip
 8000ea2:	0143      	lsls	r3, r0, #5
 8000ea4:	d592      	bpl.n	8000dcc <__aeabi_fsub+0x1c4>
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <__aeabi_fsub+0x348>)
 8000ea8:	3501      	adds	r5, #1
 8000eaa:	4018      	ands	r0, r3
 8000eac:	e78e      	b.n	8000dcc <__aeabi_fsub+0x1c4>
 8000eae:	4663      	mov	r3, ip
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d047      	beq.n	8000f44 <__aeabi_fsub+0x33c>
 8000eb4:	1e4b      	subs	r3, r1, #1
 8000eb6:	2901      	cmp	r1, #1
 8000eb8:	d015      	beq.n	8000ee6 <__aeabi_fsub+0x2de>
 8000eba:	29ff      	cmp	r1, #255	; 0xff
 8000ebc:	d02b      	beq.n	8000f16 <__aeabi_fsub+0x30e>
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	e74e      	b.n	8000d60 <__aeabi_fsub+0x158>
 8000ec2:	000c      	movs	r4, r1
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	003d      	movs	r5, r7
 8000ec8:	e784      	b.n	8000dd4 <__aeabi_fsub+0x1cc>
 8000eca:	4662      	mov	r2, ip
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	d18b      	bne.n	8000de8 <__aeabi_fsub+0x1e0>
 8000ed0:	2e00      	cmp	r6, #0
 8000ed2:	d192      	bne.n	8000dfa <__aeabi_fsub+0x1f2>
 8000ed4:	2780      	movs	r7, #128	; 0x80
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	22ff      	movs	r2, #255	; 0xff
 8000eda:	03ff      	lsls	r7, r7, #15
 8000edc:	e6df      	b.n	8000c9e <__aeabi_fsub+0x96>
 8000ede:	4663      	mov	r3, ip
 8000ee0:	000c      	movs	r4, r1
 8000ee2:	1af7      	subs	r7, r6, r3
 8000ee4:	e6bf      	b.n	8000c66 <__aeabi_fsub+0x5e>
 8000ee6:	0030      	movs	r0, r6
 8000ee8:	4460      	add	r0, ip
 8000eea:	2501      	movs	r5, #1
 8000eec:	0143      	lsls	r3, r0, #5
 8000eee:	d400      	bmi.n	8000ef2 <__aeabi_fsub+0x2ea>
 8000ef0:	e76c      	b.n	8000dcc <__aeabi_fsub+0x1c4>
 8000ef2:	2502      	movs	r5, #2
 8000ef4:	e6f2      	b.n	8000cdc <__aeabi_fsub+0xd4>
 8000ef6:	4663      	mov	r3, ip
 8000ef8:	2501      	movs	r5, #1
 8000efa:	1b98      	subs	r0, r3, r6
 8000efc:	e6ae      	b.n	8000c5c <__aeabi_fsub+0x54>
 8000efe:	2320      	movs	r3, #32
 8000f00:	4664      	mov	r4, ip
 8000f02:	4660      	mov	r0, ip
 8000f04:	40fc      	lsrs	r4, r7
 8000f06:	1bdf      	subs	r7, r3, r7
 8000f08:	40b8      	lsls	r0, r7
 8000f0a:	1e43      	subs	r3, r0, #1
 8000f0c:	4198      	sbcs	r0, r3
 8000f0e:	4320      	orrs	r0, r4
 8000f10:	e79f      	b.n	8000e52 <__aeabi_fsub+0x24a>
 8000f12:	0005      	movs	r5, r0
 8000f14:	e75e      	b.n	8000dd4 <__aeabi_fsub+0x1cc>
 8000f16:	464b      	mov	r3, r9
 8000f18:	e771      	b.n	8000dfe <__aeabi_fsub+0x1f6>
 8000f1a:	2320      	movs	r3, #32
 8000f1c:	4665      	mov	r5, ip
 8000f1e:	4660      	mov	r0, ip
 8000f20:	40cd      	lsrs	r5, r1
 8000f22:	1a59      	subs	r1, r3, r1
 8000f24:	4088      	lsls	r0, r1
 8000f26:	1e43      	subs	r3, r0, #1
 8000f28:	4198      	sbcs	r0, r3
 8000f2a:	4328      	orrs	r0, r5
 8000f2c:	e71c      	b.n	8000d68 <__aeabi_fsub+0x160>
 8000f2e:	4663      	mov	r3, ip
 8000f30:	000c      	movs	r4, r1
 8000f32:	2501      	movs	r5, #1
 8000f34:	1af0      	subs	r0, r6, r3
 8000f36:	e691      	b.n	8000c5c <__aeabi_fsub+0x54>
 8000f38:	2e00      	cmp	r6, #0
 8000f3a:	d095      	beq.n	8000e68 <__aeabi_fsub+0x260>
 8000f3c:	000c      	movs	r4, r1
 8000f3e:	464f      	mov	r7, r9
 8000f40:	2200      	movs	r2, #0
 8000f42:	e6ac      	b.n	8000c9e <__aeabi_fsub+0x96>
 8000f44:	464b      	mov	r3, r9
 8000f46:	000d      	movs	r5, r1
 8000f48:	e744      	b.n	8000dd4 <__aeabi_fsub+0x1cc>
 8000f4a:	464f      	mov	r7, r9
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	e6a6      	b.n	8000c9e <__aeabi_fsub+0x96>
 8000f50:	fbffffff 	.word	0xfbffffff
 8000f54:	7dffffff 	.word	0x7dffffff
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_fsub+0x356>
 8000f5c:	e736      	b.n	8000dcc <__aeabi_fsub+0x1c4>
 8000f5e:	2400      	movs	r4, #0
 8000f60:	2700      	movs	r7, #0
 8000f62:	e69c      	b.n	8000c9e <__aeabi_fsub+0x96>

08000f64 <__aeabi_f2iz>:
 8000f64:	0241      	lsls	r1, r0, #9
 8000f66:	0042      	lsls	r2, r0, #1
 8000f68:	0fc3      	lsrs	r3, r0, #31
 8000f6a:	0a49      	lsrs	r1, r1, #9
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	0e12      	lsrs	r2, r2, #24
 8000f70:	2a7e      	cmp	r2, #126	; 0x7e
 8000f72:	dd03      	ble.n	8000f7c <__aeabi_f2iz+0x18>
 8000f74:	2a9d      	cmp	r2, #157	; 0x9d
 8000f76:	dd02      	ble.n	8000f7e <__aeabi_f2iz+0x1a>
 8000f78:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <__aeabi_f2iz+0x3c>)
 8000f7a:	1898      	adds	r0, r3, r2
 8000f7c:	4770      	bx	lr
 8000f7e:	2080      	movs	r0, #128	; 0x80
 8000f80:	0400      	lsls	r0, r0, #16
 8000f82:	4301      	orrs	r1, r0
 8000f84:	2a95      	cmp	r2, #149	; 0x95
 8000f86:	dc07      	bgt.n	8000f98 <__aeabi_f2iz+0x34>
 8000f88:	2096      	movs	r0, #150	; 0x96
 8000f8a:	1a82      	subs	r2, r0, r2
 8000f8c:	40d1      	lsrs	r1, r2
 8000f8e:	4248      	negs	r0, r1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f3      	bne.n	8000f7c <__aeabi_f2iz+0x18>
 8000f94:	0008      	movs	r0, r1
 8000f96:	e7f1      	b.n	8000f7c <__aeabi_f2iz+0x18>
 8000f98:	3a96      	subs	r2, #150	; 0x96
 8000f9a:	4091      	lsls	r1, r2
 8000f9c:	e7f7      	b.n	8000f8e <__aeabi_f2iz+0x2a>
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	7fffffff 	.word	0x7fffffff

08000fa4 <__aeabi_i2f>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d013      	beq.n	8000fd2 <__aeabi_i2f+0x2e>
 8000faa:	17c3      	asrs	r3, r0, #31
 8000fac:	18c6      	adds	r6, r0, r3
 8000fae:	405e      	eors	r6, r3
 8000fb0:	0fc4      	lsrs	r4, r0, #31
 8000fb2:	0030      	movs	r0, r6
 8000fb4:	f000 fb70 	bl	8001698 <__clzsi2>
 8000fb8:	239e      	movs	r3, #158	; 0x9e
 8000fba:	0005      	movs	r5, r0
 8000fbc:	1a1b      	subs	r3, r3, r0
 8000fbe:	2b96      	cmp	r3, #150	; 0x96
 8000fc0:	dc0f      	bgt.n	8000fe2 <__aeabi_i2f+0x3e>
 8000fc2:	2808      	cmp	r0, #8
 8000fc4:	dd01      	ble.n	8000fca <__aeabi_i2f+0x26>
 8000fc6:	3d08      	subs	r5, #8
 8000fc8:	40ae      	lsls	r6, r5
 8000fca:	0276      	lsls	r6, r6, #9
 8000fcc:	0a76      	lsrs	r6, r6, #9
 8000fce:	b2d8      	uxtb	r0, r3
 8000fd0:	e002      	b.n	8000fd8 <__aeabi_i2f+0x34>
 8000fd2:	2400      	movs	r4, #0
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	05c0      	lsls	r0, r0, #23
 8000fda:	4330      	orrs	r0, r6
 8000fdc:	07e4      	lsls	r4, r4, #31
 8000fde:	4320      	orrs	r0, r4
 8000fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fe2:	2b99      	cmp	r3, #153	; 0x99
 8000fe4:	dd0c      	ble.n	8001000 <__aeabi_i2f+0x5c>
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	0031      	movs	r1, r6
 8000fea:	1a12      	subs	r2, r2, r0
 8000fec:	40d1      	lsrs	r1, r2
 8000fee:	000a      	movs	r2, r1
 8000ff0:	0001      	movs	r1, r0
 8000ff2:	0030      	movs	r0, r6
 8000ff4:	311b      	adds	r1, #27
 8000ff6:	4088      	lsls	r0, r1
 8000ff8:	1e41      	subs	r1, r0, #1
 8000ffa:	4188      	sbcs	r0, r1
 8000ffc:	4302      	orrs	r2, r0
 8000ffe:	0016      	movs	r6, r2
 8001000:	2d05      	cmp	r5, #5
 8001002:	dc12      	bgt.n	800102a <__aeabi_i2f+0x86>
 8001004:	0031      	movs	r1, r6
 8001006:	4f0d      	ldr	r7, [pc, #52]	; (800103c <__aeabi_i2f+0x98>)
 8001008:	4039      	ands	r1, r7
 800100a:	0772      	lsls	r2, r6, #29
 800100c:	d009      	beq.n	8001022 <__aeabi_i2f+0x7e>
 800100e:	200f      	movs	r0, #15
 8001010:	4030      	ands	r0, r6
 8001012:	2804      	cmp	r0, #4
 8001014:	d005      	beq.n	8001022 <__aeabi_i2f+0x7e>
 8001016:	3104      	adds	r1, #4
 8001018:	014a      	lsls	r2, r1, #5
 800101a:	d502      	bpl.n	8001022 <__aeabi_i2f+0x7e>
 800101c:	239f      	movs	r3, #159	; 0x9f
 800101e:	4039      	ands	r1, r7
 8001020:	1b5b      	subs	r3, r3, r5
 8001022:	0189      	lsls	r1, r1, #6
 8001024:	0a4e      	lsrs	r6, r1, #9
 8001026:	b2d8      	uxtb	r0, r3
 8001028:	e7d6      	b.n	8000fd8 <__aeabi_i2f+0x34>
 800102a:	1f6a      	subs	r2, r5, #5
 800102c:	4096      	lsls	r6, r2
 800102e:	0031      	movs	r1, r6
 8001030:	4f02      	ldr	r7, [pc, #8]	; (800103c <__aeabi_i2f+0x98>)
 8001032:	4039      	ands	r1, r7
 8001034:	0772      	lsls	r2, r6, #29
 8001036:	d0f4      	beq.n	8001022 <__aeabi_i2f+0x7e>
 8001038:	e7e9      	b.n	800100e <__aeabi_i2f+0x6a>
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	fbffffff 	.word	0xfbffffff

08001040 <__aeabi_ui2f>:
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	1e05      	subs	r5, r0, #0
 8001044:	d00e      	beq.n	8001064 <__aeabi_ui2f+0x24>
 8001046:	f000 fb27 	bl	8001698 <__clzsi2>
 800104a:	239e      	movs	r3, #158	; 0x9e
 800104c:	0004      	movs	r4, r0
 800104e:	1a1b      	subs	r3, r3, r0
 8001050:	2b96      	cmp	r3, #150	; 0x96
 8001052:	dc0c      	bgt.n	800106e <__aeabi_ui2f+0x2e>
 8001054:	2808      	cmp	r0, #8
 8001056:	dd01      	ble.n	800105c <__aeabi_ui2f+0x1c>
 8001058:	3c08      	subs	r4, #8
 800105a:	40a5      	lsls	r5, r4
 800105c:	026d      	lsls	r5, r5, #9
 800105e:	0a6d      	lsrs	r5, r5, #9
 8001060:	b2d8      	uxtb	r0, r3
 8001062:	e001      	b.n	8001068 <__aeabi_ui2f+0x28>
 8001064:	2000      	movs	r0, #0
 8001066:	2500      	movs	r5, #0
 8001068:	05c0      	lsls	r0, r0, #23
 800106a:	4328      	orrs	r0, r5
 800106c:	bd70      	pop	{r4, r5, r6, pc}
 800106e:	2b99      	cmp	r3, #153	; 0x99
 8001070:	dd09      	ble.n	8001086 <__aeabi_ui2f+0x46>
 8001072:	0002      	movs	r2, r0
 8001074:	0029      	movs	r1, r5
 8001076:	321b      	adds	r2, #27
 8001078:	4091      	lsls	r1, r2
 800107a:	1e4a      	subs	r2, r1, #1
 800107c:	4191      	sbcs	r1, r2
 800107e:	2205      	movs	r2, #5
 8001080:	1a12      	subs	r2, r2, r0
 8001082:	40d5      	lsrs	r5, r2
 8001084:	430d      	orrs	r5, r1
 8001086:	2c05      	cmp	r4, #5
 8001088:	dc12      	bgt.n	80010b0 <__aeabi_ui2f+0x70>
 800108a:	0029      	movs	r1, r5
 800108c:	4e0c      	ldr	r6, [pc, #48]	; (80010c0 <__aeabi_ui2f+0x80>)
 800108e:	4031      	ands	r1, r6
 8001090:	076a      	lsls	r2, r5, #29
 8001092:	d009      	beq.n	80010a8 <__aeabi_ui2f+0x68>
 8001094:	200f      	movs	r0, #15
 8001096:	4028      	ands	r0, r5
 8001098:	2804      	cmp	r0, #4
 800109a:	d005      	beq.n	80010a8 <__aeabi_ui2f+0x68>
 800109c:	3104      	adds	r1, #4
 800109e:	014a      	lsls	r2, r1, #5
 80010a0:	d502      	bpl.n	80010a8 <__aeabi_ui2f+0x68>
 80010a2:	239f      	movs	r3, #159	; 0x9f
 80010a4:	4031      	ands	r1, r6
 80010a6:	1b1b      	subs	r3, r3, r4
 80010a8:	0189      	lsls	r1, r1, #6
 80010aa:	0a4d      	lsrs	r5, r1, #9
 80010ac:	b2d8      	uxtb	r0, r3
 80010ae:	e7db      	b.n	8001068 <__aeabi_ui2f+0x28>
 80010b0:	1f62      	subs	r2, r4, #5
 80010b2:	4095      	lsls	r5, r2
 80010b4:	0029      	movs	r1, r5
 80010b6:	4e02      	ldr	r6, [pc, #8]	; (80010c0 <__aeabi_ui2f+0x80>)
 80010b8:	4031      	ands	r1, r6
 80010ba:	076a      	lsls	r2, r5, #29
 80010bc:	d0f4      	beq.n	80010a8 <__aeabi_ui2f+0x68>
 80010be:	e7e9      	b.n	8001094 <__aeabi_ui2f+0x54>
 80010c0:	fbffffff 	.word	0xfbffffff

080010c4 <__aeabi_dmul>:
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	4657      	mov	r7, sl
 80010c8:	464e      	mov	r6, r9
 80010ca:	4645      	mov	r5, r8
 80010cc:	46de      	mov	lr, fp
 80010ce:	b5e0      	push	{r5, r6, r7, lr}
 80010d0:	4698      	mov	r8, r3
 80010d2:	030c      	lsls	r4, r1, #12
 80010d4:	004b      	lsls	r3, r1, #1
 80010d6:	0006      	movs	r6, r0
 80010d8:	4692      	mov	sl, r2
 80010da:	b087      	sub	sp, #28
 80010dc:	0b24      	lsrs	r4, r4, #12
 80010de:	0d5b      	lsrs	r3, r3, #21
 80010e0:	0fcf      	lsrs	r7, r1, #31
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_dmul+0x24>
 80010e6:	e15c      	b.n	80013a2 <__aeabi_dmul+0x2de>
 80010e8:	4ad9      	ldr	r2, [pc, #868]	; (8001450 <__aeabi_dmul+0x38c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d100      	bne.n	80010f0 <__aeabi_dmul+0x2c>
 80010ee:	e175      	b.n	80013dc <__aeabi_dmul+0x318>
 80010f0:	0f42      	lsrs	r2, r0, #29
 80010f2:	00e4      	lsls	r4, r4, #3
 80010f4:	4314      	orrs	r4, r2
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	0412      	lsls	r2, r2, #16
 80010fa:	4314      	orrs	r4, r2
 80010fc:	4ad5      	ldr	r2, [pc, #852]	; (8001454 <__aeabi_dmul+0x390>)
 80010fe:	00c5      	lsls	r5, r0, #3
 8001100:	4694      	mov	ip, r2
 8001102:	4463      	add	r3, ip
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	4699      	mov	r9, r3
 800110a:	469b      	mov	fp, r3
 800110c:	4643      	mov	r3, r8
 800110e:	4642      	mov	r2, r8
 8001110:	031e      	lsls	r6, r3, #12
 8001112:	0fd2      	lsrs	r2, r2, #31
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4650      	mov	r0, sl
 8001118:	4690      	mov	r8, r2
 800111a:	0b36      	lsrs	r6, r6, #12
 800111c:	0d5b      	lsrs	r3, r3, #21
 800111e:	d100      	bne.n	8001122 <__aeabi_dmul+0x5e>
 8001120:	e120      	b.n	8001364 <__aeabi_dmul+0x2a0>
 8001122:	4acb      	ldr	r2, [pc, #812]	; (8001450 <__aeabi_dmul+0x38c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d100      	bne.n	800112a <__aeabi_dmul+0x66>
 8001128:	e162      	b.n	80013f0 <__aeabi_dmul+0x32c>
 800112a:	49ca      	ldr	r1, [pc, #808]	; (8001454 <__aeabi_dmul+0x390>)
 800112c:	0f42      	lsrs	r2, r0, #29
 800112e:	468c      	mov	ip, r1
 8001130:	9900      	ldr	r1, [sp, #0]
 8001132:	4463      	add	r3, ip
 8001134:	00f6      	lsls	r6, r6, #3
 8001136:	468c      	mov	ip, r1
 8001138:	4316      	orrs	r6, r2
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	449c      	add	ip, r3
 800113e:	0412      	lsls	r2, r2, #16
 8001140:	4663      	mov	r3, ip
 8001142:	4316      	orrs	r6, r2
 8001144:	00c2      	lsls	r2, r0, #3
 8001146:	2000      	movs	r0, #0
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	9900      	ldr	r1, [sp, #0]
 800114c:	4643      	mov	r3, r8
 800114e:	3101      	adds	r1, #1
 8001150:	468c      	mov	ip, r1
 8001152:	4649      	mov	r1, r9
 8001154:	407b      	eors	r3, r7
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	290f      	cmp	r1, #15
 800115a:	d826      	bhi.n	80011aa <__aeabi_dmul+0xe6>
 800115c:	4bbe      	ldr	r3, [pc, #760]	; (8001458 <__aeabi_dmul+0x394>)
 800115e:	0089      	lsls	r1, r1, #2
 8001160:	5859      	ldr	r1, [r3, r1]
 8001162:	468f      	mov	pc, r1
 8001164:	4643      	mov	r3, r8
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	0034      	movs	r4, r6
 800116a:	0015      	movs	r5, r2
 800116c:	4683      	mov	fp, r0
 800116e:	465b      	mov	r3, fp
 8001170:	2b02      	cmp	r3, #2
 8001172:	d016      	beq.n	80011a2 <__aeabi_dmul+0xde>
 8001174:	2b03      	cmp	r3, #3
 8001176:	d100      	bne.n	800117a <__aeabi_dmul+0xb6>
 8001178:	e203      	b.n	8001582 <__aeabi_dmul+0x4be>
 800117a:	2b01      	cmp	r3, #1
 800117c:	d000      	beq.n	8001180 <__aeabi_dmul+0xbc>
 800117e:	e0cd      	b.n	800131c <__aeabi_dmul+0x258>
 8001180:	2200      	movs	r2, #0
 8001182:	2400      	movs	r4, #0
 8001184:	2500      	movs	r5, #0
 8001186:	9b01      	ldr	r3, [sp, #4]
 8001188:	0512      	lsls	r2, r2, #20
 800118a:	4322      	orrs	r2, r4
 800118c:	07db      	lsls	r3, r3, #31
 800118e:	431a      	orrs	r2, r3
 8001190:	0028      	movs	r0, r5
 8001192:	0011      	movs	r1, r2
 8001194:	b007      	add	sp, #28
 8001196:	bcf0      	pop	{r4, r5, r6, r7}
 8001198:	46bb      	mov	fp, r7
 800119a:	46b2      	mov	sl, r6
 800119c:	46a9      	mov	r9, r5
 800119e:	46a0      	mov	r8, r4
 80011a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a2:	2400      	movs	r4, #0
 80011a4:	2500      	movs	r5, #0
 80011a6:	4aaa      	ldr	r2, [pc, #680]	; (8001450 <__aeabi_dmul+0x38c>)
 80011a8:	e7ed      	b.n	8001186 <__aeabi_dmul+0xc2>
 80011aa:	0c28      	lsrs	r0, r5, #16
 80011ac:	042d      	lsls	r5, r5, #16
 80011ae:	0c2d      	lsrs	r5, r5, #16
 80011b0:	002b      	movs	r3, r5
 80011b2:	0c11      	lsrs	r1, r2, #16
 80011b4:	0412      	lsls	r2, r2, #16
 80011b6:	0c12      	lsrs	r2, r2, #16
 80011b8:	4353      	muls	r3, r2
 80011ba:	4698      	mov	r8, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	002f      	movs	r7, r5
 80011c0:	4343      	muls	r3, r0
 80011c2:	4699      	mov	r9, r3
 80011c4:	434f      	muls	r7, r1
 80011c6:	444f      	add	r7, r9
 80011c8:	46bb      	mov	fp, r7
 80011ca:	4647      	mov	r7, r8
 80011cc:	000b      	movs	r3, r1
 80011ce:	0c3f      	lsrs	r7, r7, #16
 80011d0:	46ba      	mov	sl, r7
 80011d2:	4343      	muls	r3, r0
 80011d4:	44da      	add	sl, fp
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	45d1      	cmp	r9, sl
 80011da:	d904      	bls.n	80011e6 <__aeabi_dmul+0x122>
 80011dc:	2780      	movs	r7, #128	; 0x80
 80011de:	027f      	lsls	r7, r7, #9
 80011e0:	46b9      	mov	r9, r7
 80011e2:	444b      	add	r3, r9
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	4653      	mov	r3, sl
 80011e8:	0c1b      	lsrs	r3, r3, #16
 80011ea:	469b      	mov	fp, r3
 80011ec:	4653      	mov	r3, sl
 80011ee:	041f      	lsls	r7, r3, #16
 80011f0:	4643      	mov	r3, r8
 80011f2:	041b      	lsls	r3, r3, #16
 80011f4:	0c1b      	lsrs	r3, r3, #16
 80011f6:	4698      	mov	r8, r3
 80011f8:	003b      	movs	r3, r7
 80011fa:	4443      	add	r3, r8
 80011fc:	9304      	str	r3, [sp, #16]
 80011fe:	0c33      	lsrs	r3, r6, #16
 8001200:	0436      	lsls	r6, r6, #16
 8001202:	0c36      	lsrs	r6, r6, #16
 8001204:	4698      	mov	r8, r3
 8001206:	0033      	movs	r3, r6
 8001208:	4343      	muls	r3, r0
 800120a:	4699      	mov	r9, r3
 800120c:	4643      	mov	r3, r8
 800120e:	4343      	muls	r3, r0
 8001210:	002f      	movs	r7, r5
 8001212:	469a      	mov	sl, r3
 8001214:	4643      	mov	r3, r8
 8001216:	4377      	muls	r7, r6
 8001218:	435d      	muls	r5, r3
 800121a:	0c38      	lsrs	r0, r7, #16
 800121c:	444d      	add	r5, r9
 800121e:	1945      	adds	r5, r0, r5
 8001220:	45a9      	cmp	r9, r5
 8001222:	d903      	bls.n	800122c <__aeabi_dmul+0x168>
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	025b      	lsls	r3, r3, #9
 8001228:	4699      	mov	r9, r3
 800122a:	44ca      	add	sl, r9
 800122c:	043f      	lsls	r7, r7, #16
 800122e:	0c28      	lsrs	r0, r5, #16
 8001230:	0c3f      	lsrs	r7, r7, #16
 8001232:	042d      	lsls	r5, r5, #16
 8001234:	19ed      	adds	r5, r5, r7
 8001236:	0c27      	lsrs	r7, r4, #16
 8001238:	0424      	lsls	r4, r4, #16
 800123a:	0c24      	lsrs	r4, r4, #16
 800123c:	0003      	movs	r3, r0
 800123e:	0020      	movs	r0, r4
 8001240:	4350      	muls	r0, r2
 8001242:	437a      	muls	r2, r7
 8001244:	4691      	mov	r9, r2
 8001246:	003a      	movs	r2, r7
 8001248:	4453      	add	r3, sl
 800124a:	9305      	str	r3, [sp, #20]
 800124c:	0c03      	lsrs	r3, r0, #16
 800124e:	469a      	mov	sl, r3
 8001250:	434a      	muls	r2, r1
 8001252:	4361      	muls	r1, r4
 8001254:	4449      	add	r1, r9
 8001256:	4451      	add	r1, sl
 8001258:	44ab      	add	fp, r5
 800125a:	4589      	cmp	r9, r1
 800125c:	d903      	bls.n	8001266 <__aeabi_dmul+0x1a2>
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	025b      	lsls	r3, r3, #9
 8001262:	4699      	mov	r9, r3
 8001264:	444a      	add	r2, r9
 8001266:	0400      	lsls	r0, r0, #16
 8001268:	0c0b      	lsrs	r3, r1, #16
 800126a:	0c00      	lsrs	r0, r0, #16
 800126c:	0409      	lsls	r1, r1, #16
 800126e:	1809      	adds	r1, r1, r0
 8001270:	0020      	movs	r0, r4
 8001272:	4699      	mov	r9, r3
 8001274:	4643      	mov	r3, r8
 8001276:	4370      	muls	r0, r6
 8001278:	435c      	muls	r4, r3
 800127a:	437e      	muls	r6, r7
 800127c:	435f      	muls	r7, r3
 800127e:	0c03      	lsrs	r3, r0, #16
 8001280:	4698      	mov	r8, r3
 8001282:	19a4      	adds	r4, r4, r6
 8001284:	4444      	add	r4, r8
 8001286:	444a      	add	r2, r9
 8001288:	9703      	str	r7, [sp, #12]
 800128a:	42a6      	cmp	r6, r4
 800128c:	d904      	bls.n	8001298 <__aeabi_dmul+0x1d4>
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	025b      	lsls	r3, r3, #9
 8001292:	4698      	mov	r8, r3
 8001294:	4447      	add	r7, r8
 8001296:	9703      	str	r7, [sp, #12]
 8001298:	0423      	lsls	r3, r4, #16
 800129a:	9e02      	ldr	r6, [sp, #8]
 800129c:	469a      	mov	sl, r3
 800129e:	9b05      	ldr	r3, [sp, #20]
 80012a0:	445e      	add	r6, fp
 80012a2:	4698      	mov	r8, r3
 80012a4:	42ae      	cmp	r6, r5
 80012a6:	41ad      	sbcs	r5, r5
 80012a8:	1876      	adds	r6, r6, r1
 80012aa:	428e      	cmp	r6, r1
 80012ac:	4189      	sbcs	r1, r1
 80012ae:	0400      	lsls	r0, r0, #16
 80012b0:	0c00      	lsrs	r0, r0, #16
 80012b2:	4450      	add	r0, sl
 80012b4:	4440      	add	r0, r8
 80012b6:	426d      	negs	r5, r5
 80012b8:	1947      	adds	r7, r0, r5
 80012ba:	46b8      	mov	r8, r7
 80012bc:	4693      	mov	fp, r2
 80012be:	4249      	negs	r1, r1
 80012c0:	4689      	mov	r9, r1
 80012c2:	44c3      	add	fp, r8
 80012c4:	44d9      	add	r9, fp
 80012c6:	4298      	cmp	r0, r3
 80012c8:	4180      	sbcs	r0, r0
 80012ca:	45a8      	cmp	r8, r5
 80012cc:	41ad      	sbcs	r5, r5
 80012ce:	4593      	cmp	fp, r2
 80012d0:	4192      	sbcs	r2, r2
 80012d2:	4589      	cmp	r9, r1
 80012d4:	4189      	sbcs	r1, r1
 80012d6:	426d      	negs	r5, r5
 80012d8:	4240      	negs	r0, r0
 80012da:	4328      	orrs	r0, r5
 80012dc:	0c24      	lsrs	r4, r4, #16
 80012de:	4252      	negs	r2, r2
 80012e0:	4249      	negs	r1, r1
 80012e2:	430a      	orrs	r2, r1
 80012e4:	9b03      	ldr	r3, [sp, #12]
 80012e6:	1900      	adds	r0, r0, r4
 80012e8:	1880      	adds	r0, r0, r2
 80012ea:	18c7      	adds	r7, r0, r3
 80012ec:	464b      	mov	r3, r9
 80012ee:	0ddc      	lsrs	r4, r3, #23
 80012f0:	9b04      	ldr	r3, [sp, #16]
 80012f2:	0275      	lsls	r5, r6, #9
 80012f4:	431d      	orrs	r5, r3
 80012f6:	1e6a      	subs	r2, r5, #1
 80012f8:	4195      	sbcs	r5, r2
 80012fa:	464b      	mov	r3, r9
 80012fc:	0df6      	lsrs	r6, r6, #23
 80012fe:	027f      	lsls	r7, r7, #9
 8001300:	4335      	orrs	r5, r6
 8001302:	025a      	lsls	r2, r3, #9
 8001304:	433c      	orrs	r4, r7
 8001306:	4315      	orrs	r5, r2
 8001308:	01fb      	lsls	r3, r7, #7
 800130a:	d400      	bmi.n	800130e <__aeabi_dmul+0x24a>
 800130c:	e11c      	b.n	8001548 <__aeabi_dmul+0x484>
 800130e:	2101      	movs	r1, #1
 8001310:	086a      	lsrs	r2, r5, #1
 8001312:	400d      	ands	r5, r1
 8001314:	4315      	orrs	r5, r2
 8001316:	07e2      	lsls	r2, r4, #31
 8001318:	4315      	orrs	r5, r2
 800131a:	0864      	lsrs	r4, r4, #1
 800131c:	494f      	ldr	r1, [pc, #316]	; (800145c <__aeabi_dmul+0x398>)
 800131e:	4461      	add	r1, ip
 8001320:	2900      	cmp	r1, #0
 8001322:	dc00      	bgt.n	8001326 <__aeabi_dmul+0x262>
 8001324:	e0b0      	b.n	8001488 <__aeabi_dmul+0x3c4>
 8001326:	076b      	lsls	r3, r5, #29
 8001328:	d009      	beq.n	800133e <__aeabi_dmul+0x27a>
 800132a:	220f      	movs	r2, #15
 800132c:	402a      	ands	r2, r5
 800132e:	2a04      	cmp	r2, #4
 8001330:	d005      	beq.n	800133e <__aeabi_dmul+0x27a>
 8001332:	1d2a      	adds	r2, r5, #4
 8001334:	42aa      	cmp	r2, r5
 8001336:	41ad      	sbcs	r5, r5
 8001338:	426d      	negs	r5, r5
 800133a:	1964      	adds	r4, r4, r5
 800133c:	0015      	movs	r5, r2
 800133e:	01e3      	lsls	r3, r4, #7
 8001340:	d504      	bpl.n	800134c <__aeabi_dmul+0x288>
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	4a46      	ldr	r2, [pc, #280]	; (8001460 <__aeabi_dmul+0x39c>)
 8001346:	00c9      	lsls	r1, r1, #3
 8001348:	4014      	ands	r4, r2
 800134a:	4461      	add	r1, ip
 800134c:	4a45      	ldr	r2, [pc, #276]	; (8001464 <__aeabi_dmul+0x3a0>)
 800134e:	4291      	cmp	r1, r2
 8001350:	dd00      	ble.n	8001354 <__aeabi_dmul+0x290>
 8001352:	e726      	b.n	80011a2 <__aeabi_dmul+0xde>
 8001354:	0762      	lsls	r2, r4, #29
 8001356:	08ed      	lsrs	r5, r5, #3
 8001358:	0264      	lsls	r4, r4, #9
 800135a:	0549      	lsls	r1, r1, #21
 800135c:	4315      	orrs	r5, r2
 800135e:	0b24      	lsrs	r4, r4, #12
 8001360:	0d4a      	lsrs	r2, r1, #21
 8001362:	e710      	b.n	8001186 <__aeabi_dmul+0xc2>
 8001364:	4652      	mov	r2, sl
 8001366:	4332      	orrs	r2, r6
 8001368:	d100      	bne.n	800136c <__aeabi_dmul+0x2a8>
 800136a:	e07f      	b.n	800146c <__aeabi_dmul+0x3a8>
 800136c:	2e00      	cmp	r6, #0
 800136e:	d100      	bne.n	8001372 <__aeabi_dmul+0x2ae>
 8001370:	e0dc      	b.n	800152c <__aeabi_dmul+0x468>
 8001372:	0030      	movs	r0, r6
 8001374:	f000 f990 	bl	8001698 <__clzsi2>
 8001378:	0002      	movs	r2, r0
 800137a:	3a0b      	subs	r2, #11
 800137c:	231d      	movs	r3, #29
 800137e:	0001      	movs	r1, r0
 8001380:	1a9b      	subs	r3, r3, r2
 8001382:	4652      	mov	r2, sl
 8001384:	3908      	subs	r1, #8
 8001386:	40da      	lsrs	r2, r3
 8001388:	408e      	lsls	r6, r1
 800138a:	4316      	orrs	r6, r2
 800138c:	4652      	mov	r2, sl
 800138e:	408a      	lsls	r2, r1
 8001390:	9b00      	ldr	r3, [sp, #0]
 8001392:	4935      	ldr	r1, [pc, #212]	; (8001468 <__aeabi_dmul+0x3a4>)
 8001394:	1a18      	subs	r0, r3, r0
 8001396:	0003      	movs	r3, r0
 8001398:	468c      	mov	ip, r1
 800139a:	4463      	add	r3, ip
 800139c:	2000      	movs	r0, #0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	e6d3      	b.n	800114a <__aeabi_dmul+0x86>
 80013a2:	0025      	movs	r5, r4
 80013a4:	4305      	orrs	r5, r0
 80013a6:	d04a      	beq.n	800143e <__aeabi_dmul+0x37a>
 80013a8:	2c00      	cmp	r4, #0
 80013aa:	d100      	bne.n	80013ae <__aeabi_dmul+0x2ea>
 80013ac:	e0b0      	b.n	8001510 <__aeabi_dmul+0x44c>
 80013ae:	0020      	movs	r0, r4
 80013b0:	f000 f972 	bl	8001698 <__clzsi2>
 80013b4:	0001      	movs	r1, r0
 80013b6:	0002      	movs	r2, r0
 80013b8:	390b      	subs	r1, #11
 80013ba:	231d      	movs	r3, #29
 80013bc:	0010      	movs	r0, r2
 80013be:	1a5b      	subs	r3, r3, r1
 80013c0:	0031      	movs	r1, r6
 80013c2:	0035      	movs	r5, r6
 80013c4:	3808      	subs	r0, #8
 80013c6:	4084      	lsls	r4, r0
 80013c8:	40d9      	lsrs	r1, r3
 80013ca:	4085      	lsls	r5, r0
 80013cc:	430c      	orrs	r4, r1
 80013ce:	4826      	ldr	r0, [pc, #152]	; (8001468 <__aeabi_dmul+0x3a4>)
 80013d0:	1a83      	subs	r3, r0, r2
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	4699      	mov	r9, r3
 80013d8:	469b      	mov	fp, r3
 80013da:	e697      	b.n	800110c <__aeabi_dmul+0x48>
 80013dc:	0005      	movs	r5, r0
 80013de:	4325      	orrs	r5, r4
 80013e0:	d126      	bne.n	8001430 <__aeabi_dmul+0x36c>
 80013e2:	2208      	movs	r2, #8
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2302      	movs	r3, #2
 80013e8:	2400      	movs	r4, #0
 80013ea:	4691      	mov	r9, r2
 80013ec:	469b      	mov	fp, r3
 80013ee:	e68d      	b.n	800110c <__aeabi_dmul+0x48>
 80013f0:	4652      	mov	r2, sl
 80013f2:	9b00      	ldr	r3, [sp, #0]
 80013f4:	4332      	orrs	r2, r6
 80013f6:	d110      	bne.n	800141a <__aeabi_dmul+0x356>
 80013f8:	4915      	ldr	r1, [pc, #84]	; (8001450 <__aeabi_dmul+0x38c>)
 80013fa:	2600      	movs	r6, #0
 80013fc:	468c      	mov	ip, r1
 80013fe:	4463      	add	r3, ip
 8001400:	4649      	mov	r1, r9
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2302      	movs	r3, #2
 8001406:	4319      	orrs	r1, r3
 8001408:	4689      	mov	r9, r1
 800140a:	2002      	movs	r0, #2
 800140c:	e69d      	b.n	800114a <__aeabi_dmul+0x86>
 800140e:	465b      	mov	r3, fp
 8001410:	9701      	str	r7, [sp, #4]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d000      	beq.n	8001418 <__aeabi_dmul+0x354>
 8001416:	e6ad      	b.n	8001174 <__aeabi_dmul+0xb0>
 8001418:	e6c3      	b.n	80011a2 <__aeabi_dmul+0xde>
 800141a:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <__aeabi_dmul+0x38c>)
 800141c:	2003      	movs	r0, #3
 800141e:	4694      	mov	ip, r2
 8001420:	4463      	add	r3, ip
 8001422:	464a      	mov	r2, r9
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2303      	movs	r3, #3
 8001428:	431a      	orrs	r2, r3
 800142a:	4691      	mov	r9, r2
 800142c:	4652      	mov	r2, sl
 800142e:	e68c      	b.n	800114a <__aeabi_dmul+0x86>
 8001430:	220c      	movs	r2, #12
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2303      	movs	r3, #3
 8001436:	0005      	movs	r5, r0
 8001438:	4691      	mov	r9, r2
 800143a:	469b      	mov	fp, r3
 800143c:	e666      	b.n	800110c <__aeabi_dmul+0x48>
 800143e:	2304      	movs	r3, #4
 8001440:	4699      	mov	r9, r3
 8001442:	2300      	movs	r3, #0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	2400      	movs	r4, #0
 800144a:	469b      	mov	fp, r3
 800144c:	e65e      	b.n	800110c <__aeabi_dmul+0x48>
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	000007ff 	.word	0x000007ff
 8001454:	fffffc01 	.word	0xfffffc01
 8001458:	08003ef0 	.word	0x08003ef0
 800145c:	000003ff 	.word	0x000003ff
 8001460:	feffffff 	.word	0xfeffffff
 8001464:	000007fe 	.word	0x000007fe
 8001468:	fffffc0d 	.word	0xfffffc0d
 800146c:	4649      	mov	r1, r9
 800146e:	2301      	movs	r3, #1
 8001470:	4319      	orrs	r1, r3
 8001472:	4689      	mov	r9, r1
 8001474:	2600      	movs	r6, #0
 8001476:	2001      	movs	r0, #1
 8001478:	e667      	b.n	800114a <__aeabi_dmul+0x86>
 800147a:	2300      	movs	r3, #0
 800147c:	2480      	movs	r4, #128	; 0x80
 800147e:	2500      	movs	r5, #0
 8001480:	4a43      	ldr	r2, [pc, #268]	; (8001590 <__aeabi_dmul+0x4cc>)
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	0324      	lsls	r4, r4, #12
 8001486:	e67e      	b.n	8001186 <__aeabi_dmul+0xc2>
 8001488:	2001      	movs	r0, #1
 800148a:	1a40      	subs	r0, r0, r1
 800148c:	2838      	cmp	r0, #56	; 0x38
 800148e:	dd00      	ble.n	8001492 <__aeabi_dmul+0x3ce>
 8001490:	e676      	b.n	8001180 <__aeabi_dmul+0xbc>
 8001492:	281f      	cmp	r0, #31
 8001494:	dd5b      	ble.n	800154e <__aeabi_dmul+0x48a>
 8001496:	221f      	movs	r2, #31
 8001498:	0023      	movs	r3, r4
 800149a:	4252      	negs	r2, r2
 800149c:	1a51      	subs	r1, r2, r1
 800149e:	40cb      	lsrs	r3, r1
 80014a0:	0019      	movs	r1, r3
 80014a2:	2820      	cmp	r0, #32
 80014a4:	d003      	beq.n	80014ae <__aeabi_dmul+0x3ea>
 80014a6:	4a3b      	ldr	r2, [pc, #236]	; (8001594 <__aeabi_dmul+0x4d0>)
 80014a8:	4462      	add	r2, ip
 80014aa:	4094      	lsls	r4, r2
 80014ac:	4325      	orrs	r5, r4
 80014ae:	1e6a      	subs	r2, r5, #1
 80014b0:	4195      	sbcs	r5, r2
 80014b2:	002a      	movs	r2, r5
 80014b4:	430a      	orrs	r2, r1
 80014b6:	2107      	movs	r1, #7
 80014b8:	000d      	movs	r5, r1
 80014ba:	2400      	movs	r4, #0
 80014bc:	4015      	ands	r5, r2
 80014be:	4211      	tst	r1, r2
 80014c0:	d05b      	beq.n	800157a <__aeabi_dmul+0x4b6>
 80014c2:	210f      	movs	r1, #15
 80014c4:	2400      	movs	r4, #0
 80014c6:	4011      	ands	r1, r2
 80014c8:	2904      	cmp	r1, #4
 80014ca:	d053      	beq.n	8001574 <__aeabi_dmul+0x4b0>
 80014cc:	1d11      	adds	r1, r2, #4
 80014ce:	4291      	cmp	r1, r2
 80014d0:	4192      	sbcs	r2, r2
 80014d2:	4252      	negs	r2, r2
 80014d4:	18a4      	adds	r4, r4, r2
 80014d6:	000a      	movs	r2, r1
 80014d8:	0223      	lsls	r3, r4, #8
 80014da:	d54b      	bpl.n	8001574 <__aeabi_dmul+0x4b0>
 80014dc:	2201      	movs	r2, #1
 80014de:	2400      	movs	r4, #0
 80014e0:	2500      	movs	r5, #0
 80014e2:	e650      	b.n	8001186 <__aeabi_dmul+0xc2>
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	031b      	lsls	r3, r3, #12
 80014e8:	421c      	tst	r4, r3
 80014ea:	d009      	beq.n	8001500 <__aeabi_dmul+0x43c>
 80014ec:	421e      	tst	r6, r3
 80014ee:	d107      	bne.n	8001500 <__aeabi_dmul+0x43c>
 80014f0:	4333      	orrs	r3, r6
 80014f2:	031c      	lsls	r4, r3, #12
 80014f4:	4643      	mov	r3, r8
 80014f6:	0015      	movs	r5, r2
 80014f8:	0b24      	lsrs	r4, r4, #12
 80014fa:	4a25      	ldr	r2, [pc, #148]	; (8001590 <__aeabi_dmul+0x4cc>)
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	e642      	b.n	8001186 <__aeabi_dmul+0xc2>
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	0312      	lsls	r2, r2, #12
 8001504:	4314      	orrs	r4, r2
 8001506:	0324      	lsls	r4, r4, #12
 8001508:	4a21      	ldr	r2, [pc, #132]	; (8001590 <__aeabi_dmul+0x4cc>)
 800150a:	0b24      	lsrs	r4, r4, #12
 800150c:	9701      	str	r7, [sp, #4]
 800150e:	e63a      	b.n	8001186 <__aeabi_dmul+0xc2>
 8001510:	f000 f8c2 	bl	8001698 <__clzsi2>
 8001514:	0001      	movs	r1, r0
 8001516:	0002      	movs	r2, r0
 8001518:	3115      	adds	r1, #21
 800151a:	3220      	adds	r2, #32
 800151c:	291c      	cmp	r1, #28
 800151e:	dc00      	bgt.n	8001522 <__aeabi_dmul+0x45e>
 8001520:	e74b      	b.n	80013ba <__aeabi_dmul+0x2f6>
 8001522:	0034      	movs	r4, r6
 8001524:	3808      	subs	r0, #8
 8001526:	2500      	movs	r5, #0
 8001528:	4084      	lsls	r4, r0
 800152a:	e750      	b.n	80013ce <__aeabi_dmul+0x30a>
 800152c:	f000 f8b4 	bl	8001698 <__clzsi2>
 8001530:	0003      	movs	r3, r0
 8001532:	001a      	movs	r2, r3
 8001534:	3215      	adds	r2, #21
 8001536:	3020      	adds	r0, #32
 8001538:	2a1c      	cmp	r2, #28
 800153a:	dc00      	bgt.n	800153e <__aeabi_dmul+0x47a>
 800153c:	e71e      	b.n	800137c <__aeabi_dmul+0x2b8>
 800153e:	4656      	mov	r6, sl
 8001540:	3b08      	subs	r3, #8
 8001542:	2200      	movs	r2, #0
 8001544:	409e      	lsls	r6, r3
 8001546:	e723      	b.n	8001390 <__aeabi_dmul+0x2cc>
 8001548:	9b00      	ldr	r3, [sp, #0]
 800154a:	469c      	mov	ip, r3
 800154c:	e6e6      	b.n	800131c <__aeabi_dmul+0x258>
 800154e:	4912      	ldr	r1, [pc, #72]	; (8001598 <__aeabi_dmul+0x4d4>)
 8001550:	0022      	movs	r2, r4
 8001552:	4461      	add	r1, ip
 8001554:	002e      	movs	r6, r5
 8001556:	408d      	lsls	r5, r1
 8001558:	408a      	lsls	r2, r1
 800155a:	40c6      	lsrs	r6, r0
 800155c:	1e69      	subs	r1, r5, #1
 800155e:	418d      	sbcs	r5, r1
 8001560:	4332      	orrs	r2, r6
 8001562:	432a      	orrs	r2, r5
 8001564:	40c4      	lsrs	r4, r0
 8001566:	0753      	lsls	r3, r2, #29
 8001568:	d0b6      	beq.n	80014d8 <__aeabi_dmul+0x414>
 800156a:	210f      	movs	r1, #15
 800156c:	4011      	ands	r1, r2
 800156e:	2904      	cmp	r1, #4
 8001570:	d1ac      	bne.n	80014cc <__aeabi_dmul+0x408>
 8001572:	e7b1      	b.n	80014d8 <__aeabi_dmul+0x414>
 8001574:	0765      	lsls	r5, r4, #29
 8001576:	0264      	lsls	r4, r4, #9
 8001578:	0b24      	lsrs	r4, r4, #12
 800157a:	08d2      	lsrs	r2, r2, #3
 800157c:	4315      	orrs	r5, r2
 800157e:	2200      	movs	r2, #0
 8001580:	e601      	b.n	8001186 <__aeabi_dmul+0xc2>
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	0312      	lsls	r2, r2, #12
 8001586:	4314      	orrs	r4, r2
 8001588:	0324      	lsls	r4, r4, #12
 800158a:	4a01      	ldr	r2, [pc, #4]	; (8001590 <__aeabi_dmul+0x4cc>)
 800158c:	0b24      	lsrs	r4, r4, #12
 800158e:	e5fa      	b.n	8001186 <__aeabi_dmul+0xc2>
 8001590:	000007ff 	.word	0x000007ff
 8001594:	0000043e 	.word	0x0000043e
 8001598:	0000041e 	.word	0x0000041e

0800159c <__aeabi_d2iz>:
 800159c:	000a      	movs	r2, r1
 800159e:	b530      	push	{r4, r5, lr}
 80015a0:	4c13      	ldr	r4, [pc, #76]	; (80015f0 <__aeabi_d2iz+0x54>)
 80015a2:	0053      	lsls	r3, r2, #1
 80015a4:	0309      	lsls	r1, r1, #12
 80015a6:	0005      	movs	r5, r0
 80015a8:	0b09      	lsrs	r1, r1, #12
 80015aa:	2000      	movs	r0, #0
 80015ac:	0d5b      	lsrs	r3, r3, #21
 80015ae:	0fd2      	lsrs	r2, r2, #31
 80015b0:	42a3      	cmp	r3, r4
 80015b2:	dd04      	ble.n	80015be <__aeabi_d2iz+0x22>
 80015b4:	480f      	ldr	r0, [pc, #60]	; (80015f4 <__aeabi_d2iz+0x58>)
 80015b6:	4283      	cmp	r3, r0
 80015b8:	dd02      	ble.n	80015c0 <__aeabi_d2iz+0x24>
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <__aeabi_d2iz+0x5c>)
 80015bc:	18d0      	adds	r0, r2, r3
 80015be:	bd30      	pop	{r4, r5, pc}
 80015c0:	2080      	movs	r0, #128	; 0x80
 80015c2:	0340      	lsls	r0, r0, #13
 80015c4:	4301      	orrs	r1, r0
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <__aeabi_d2iz+0x60>)
 80015c8:	1ac0      	subs	r0, r0, r3
 80015ca:	281f      	cmp	r0, #31
 80015cc:	dd08      	ble.n	80015e0 <__aeabi_d2iz+0x44>
 80015ce:	480c      	ldr	r0, [pc, #48]	; (8001600 <__aeabi_d2iz+0x64>)
 80015d0:	1ac3      	subs	r3, r0, r3
 80015d2:	40d9      	lsrs	r1, r3
 80015d4:	000b      	movs	r3, r1
 80015d6:	4258      	negs	r0, r3
 80015d8:	2a00      	cmp	r2, #0
 80015da:	d1f0      	bne.n	80015be <__aeabi_d2iz+0x22>
 80015dc:	0018      	movs	r0, r3
 80015de:	e7ee      	b.n	80015be <__aeabi_d2iz+0x22>
 80015e0:	4c08      	ldr	r4, [pc, #32]	; (8001604 <__aeabi_d2iz+0x68>)
 80015e2:	40c5      	lsrs	r5, r0
 80015e4:	46a4      	mov	ip, r4
 80015e6:	4463      	add	r3, ip
 80015e8:	4099      	lsls	r1, r3
 80015ea:	000b      	movs	r3, r1
 80015ec:	432b      	orrs	r3, r5
 80015ee:	e7f2      	b.n	80015d6 <__aeabi_d2iz+0x3a>
 80015f0:	000003fe 	.word	0x000003fe
 80015f4:	0000041d 	.word	0x0000041d
 80015f8:	7fffffff 	.word	0x7fffffff
 80015fc:	00000433 	.word	0x00000433
 8001600:	00000413 	.word	0x00000413
 8001604:	fffffbed 	.word	0xfffffbed

08001608 <__aeabi_f2d>:
 8001608:	b570      	push	{r4, r5, r6, lr}
 800160a:	0043      	lsls	r3, r0, #1
 800160c:	0246      	lsls	r6, r0, #9
 800160e:	0fc4      	lsrs	r4, r0, #31
 8001610:	20fe      	movs	r0, #254	; 0xfe
 8001612:	0e1b      	lsrs	r3, r3, #24
 8001614:	1c59      	adds	r1, r3, #1
 8001616:	0a75      	lsrs	r5, r6, #9
 8001618:	4208      	tst	r0, r1
 800161a:	d00c      	beq.n	8001636 <__aeabi_f2d+0x2e>
 800161c:	22e0      	movs	r2, #224	; 0xe0
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	4694      	mov	ip, r2
 8001622:	076d      	lsls	r5, r5, #29
 8001624:	0b36      	lsrs	r6, r6, #12
 8001626:	4463      	add	r3, ip
 8001628:	051b      	lsls	r3, r3, #20
 800162a:	4333      	orrs	r3, r6
 800162c:	07e4      	lsls	r4, r4, #31
 800162e:	4323      	orrs	r3, r4
 8001630:	0028      	movs	r0, r5
 8001632:	0019      	movs	r1, r3
 8001634:	bd70      	pop	{r4, r5, r6, pc}
 8001636:	2b00      	cmp	r3, #0
 8001638:	d114      	bne.n	8001664 <__aeabi_f2d+0x5c>
 800163a:	2d00      	cmp	r5, #0
 800163c:	d01b      	beq.n	8001676 <__aeabi_f2d+0x6e>
 800163e:	0028      	movs	r0, r5
 8001640:	f000 f82a 	bl	8001698 <__clzsi2>
 8001644:	280a      	cmp	r0, #10
 8001646:	dc1c      	bgt.n	8001682 <__aeabi_f2d+0x7a>
 8001648:	230b      	movs	r3, #11
 800164a:	002e      	movs	r6, r5
 800164c:	1a1b      	subs	r3, r3, r0
 800164e:	40de      	lsrs	r6, r3
 8001650:	0003      	movs	r3, r0
 8001652:	3315      	adds	r3, #21
 8001654:	409d      	lsls	r5, r3
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <__aeabi_f2d+0x88>)
 8001658:	0336      	lsls	r6, r6, #12
 800165a:	1a12      	subs	r2, r2, r0
 800165c:	0552      	lsls	r2, r2, #21
 800165e:	0b36      	lsrs	r6, r6, #12
 8001660:	0d53      	lsrs	r3, r2, #21
 8001662:	e7e1      	b.n	8001628 <__aeabi_f2d+0x20>
 8001664:	2d00      	cmp	r5, #0
 8001666:	d009      	beq.n	800167c <__aeabi_f2d+0x74>
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	0b36      	lsrs	r6, r6, #12
 800166c:	0312      	lsls	r2, r2, #12
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <__aeabi_f2d+0x8c>)
 8001670:	076d      	lsls	r5, r5, #29
 8001672:	4316      	orrs	r6, r2
 8001674:	e7d8      	b.n	8001628 <__aeabi_f2d+0x20>
 8001676:	2300      	movs	r3, #0
 8001678:	2600      	movs	r6, #0
 800167a:	e7d5      	b.n	8001628 <__aeabi_f2d+0x20>
 800167c:	2600      	movs	r6, #0
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <__aeabi_f2d+0x8c>)
 8001680:	e7d2      	b.n	8001628 <__aeabi_f2d+0x20>
 8001682:	0003      	movs	r3, r0
 8001684:	3b0b      	subs	r3, #11
 8001686:	409d      	lsls	r5, r3
 8001688:	002e      	movs	r6, r5
 800168a:	2500      	movs	r5, #0
 800168c:	e7e3      	b.n	8001656 <__aeabi_f2d+0x4e>
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	00000389 	.word	0x00000389
 8001694:	000007ff 	.word	0x000007ff

08001698 <__clzsi2>:
 8001698:	211c      	movs	r1, #28
 800169a:	2301      	movs	r3, #1
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	4298      	cmp	r0, r3
 80016a0:	d301      	bcc.n	80016a6 <__clzsi2+0xe>
 80016a2:	0c00      	lsrs	r0, r0, #16
 80016a4:	3910      	subs	r1, #16
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	4298      	cmp	r0, r3
 80016aa:	d301      	bcc.n	80016b0 <__clzsi2+0x18>
 80016ac:	0a00      	lsrs	r0, r0, #8
 80016ae:	3908      	subs	r1, #8
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	4298      	cmp	r0, r3
 80016b4:	d301      	bcc.n	80016ba <__clzsi2+0x22>
 80016b6:	0900      	lsrs	r0, r0, #4
 80016b8:	3904      	subs	r1, #4
 80016ba:	a202      	add	r2, pc, #8	; (adr r2, 80016c4 <__clzsi2+0x2c>)
 80016bc:	5c10      	ldrb	r0, [r2, r0]
 80016be:	1840      	adds	r0, r0, r1
 80016c0:	4770      	bx	lr
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	02020304 	.word	0x02020304
 80016c8:	01010101 	.word	0x01010101
	...

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	0002      	movs	r2, r0
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b7f      	cmp	r3, #127	; 0x7f
 80016e6:	d809      	bhi.n	80016fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e8:	1dfb      	adds	r3, r7, #7
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	001a      	movs	r2, r3
 80016ee:	231f      	movs	r3, #31
 80016f0:	401a      	ands	r2, r3
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_EnableIRQ+0x30>)
 80016f4:	2101      	movs	r1, #1
 80016f6:	4091      	lsls	r1, r2
 80016f8:	000a      	movs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]
  }
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	0002      	movs	r2, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b7f      	cmp	r3, #127	; 0x7f
 800171c:	d828      	bhi.n	8001770 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800171e:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <__NVIC_SetPriority+0xd4>)
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b25b      	sxtb	r3, r3
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	33c0      	adds	r3, #192	; 0xc0
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	589b      	ldr	r3, [r3, r2]
 800172e:	1dfa      	adds	r2, r7, #7
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	b252      	sxtb	r2, r2
 8001734:	2103      	movs	r1, #3
 8001736:	400a      	ands	r2, r1
 8001738:	00d2      	lsls	r2, r2, #3
 800173a:	21ff      	movs	r1, #255	; 0xff
 800173c:	4091      	lsls	r1, r2
 800173e:	000a      	movs	r2, r1
 8001740:	43d2      	mvns	r2, r2
 8001742:	401a      	ands	r2, r3
 8001744:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	019b      	lsls	r3, r3, #6
 800174a:	22ff      	movs	r2, #255	; 0xff
 800174c:	401a      	ands	r2, r3
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b25b      	sxtb	r3, r3
 8001754:	2003      	movs	r0, #3
 8001756:	4003      	ands	r3, r0
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800175c:	481f      	ldr	r0, [pc, #124]	; (80017dc <__NVIC_SetPriority+0xd4>)
 800175e:	1dfb      	adds	r3, r7, #7
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b25b      	sxtb	r3, r3
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	430a      	orrs	r2, r1
 8001768:	33c0      	adds	r3, #192	; 0xc0
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800176e:	e031      	b.n	80017d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001770:	4a1b      	ldr	r2, [pc, #108]	; (80017e0 <__NVIC_SetPriority+0xd8>)
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b25b      	sxtb	r3, r3
 8001778:	210f      	movs	r1, #15
 800177a:	400b      	ands	r3, r1
 800177c:	3b08      	subs	r3, #8
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3306      	adds	r3, #6
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	3304      	adds	r3, #4
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	1dfa      	adds	r2, r7, #7
 800178c:	7812      	ldrb	r2, [r2, #0]
 800178e:	b252      	sxtb	r2, r2
 8001790:	2103      	movs	r1, #3
 8001792:	400a      	ands	r2, r1
 8001794:	00d2      	lsls	r2, r2, #3
 8001796:	21ff      	movs	r1, #255	; 0xff
 8001798:	4091      	lsls	r1, r2
 800179a:	000a      	movs	r2, r1
 800179c:	43d2      	mvns	r2, r2
 800179e:	401a      	ands	r2, r3
 80017a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	019b      	lsls	r3, r3, #6
 80017a6:	22ff      	movs	r2, #255	; 0xff
 80017a8:	401a      	ands	r2, r3
 80017aa:	1dfb      	adds	r3, r7, #7
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	2003      	movs	r0, #3
 80017b2:	4003      	ands	r3, r0
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <__NVIC_SetPriority+0xd8>)
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	240f      	movs	r4, #15
 80017c2:	4023      	ands	r3, r4
 80017c4:	3b08      	subs	r3, #8
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	430a      	orrs	r2, r1
 80017ca:	3306      	adds	r3, #6
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	18c3      	adds	r3, r0, r3
 80017d0:	3304      	adds	r3, #4
 80017d2:	601a      	str	r2, [r3, #0]
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b003      	add	sp, #12
 80017da:	bd90      	pop	{r4, r7, pc}
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <LL_RCC_HSE_Enable+0x18>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <LL_RCC_HSE_Enable+0x18>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	0249      	lsls	r1, r1, #9
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000

08001800 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <LL_RCC_HSE_IsReady+0x20>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	029b      	lsls	r3, r3, #10
 800180c:	4013      	ands	r3, r2
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <LL_RCC_HSE_IsReady+0x24>)
 8001810:	4694      	mov	ip, r2
 8001812:	4463      	add	r3, ip
 8001814:	425a      	negs	r2, r3
 8001816:	4153      	adcs	r3, r2
 8001818:	b2db      	uxtb	r3, r3
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	fffe0000 	.word	0xfffe0000

08001828 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <LL_RCC_SetSysClkSource+0x24>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2203      	movs	r2, #3
 8001836:	4393      	bics	r3, r2
 8001838:	0019      	movs	r1, r3
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <LL_RCC_SetSysClkSource+0x24>)
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	430a      	orrs	r2, r1
 8001840:	605a      	str	r2, [r3, #4]
}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b002      	add	sp, #8
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	40021000 	.word	0x40021000

08001850 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <LL_RCC_GetSysClkSource+0x14>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	220c      	movs	r2, #12
 800185a:	4013      	ands	r3, r2
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	40021000 	.word	0x40021000

08001868 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <LL_RCC_SetAHBPrescaler+0x24>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	22f0      	movs	r2, #240	; 0xf0
 8001876:	4393      	bics	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <LL_RCC_SetAHBPrescaler+0x24>)
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]
}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b002      	add	sp, #8
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40021000 	.word	0x40021000

08001890 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <LL_RCC_SetAPB1Prescaler+0x28>)
 800189e:	4013      	ands	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]
}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b002      	add	sp, #8
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	40021000 	.word	0x40021000
 80018b8:	fffff8ff 	.word	0xfffff8ff

080018bc <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <LL_RCC_SetUSARTClockSource+0x30>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	0e12      	lsrs	r2, r2, #24
 80018cc:	2103      	movs	r1, #3
 80018ce:	4091      	lsls	r1, r2
 80018d0:	000a      	movs	r2, r1
 80018d2:	43d2      	mvns	r2, r2
 80018d4:	401a      	ands	r2, r3
 80018d6:	0011      	movs	r1, r2
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	0a1a      	lsrs	r2, r3, #8
 80018de:	4b03      	ldr	r3, [pc, #12]	; (80018ec <LL_RCC_SetUSARTClockSource+0x30>)
 80018e0:	430a      	orrs	r2, r1
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80018e4:	46c0      	nop			; (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b002      	add	sp, #8
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000

080018f0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <LL_RCC_PLL_Enable+0x18>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <LL_RCC_PLL_Enable+0x18>)
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	0449      	lsls	r1, r1, #17
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000

0800190c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <LL_RCC_PLL_IsReady+0x24>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	049b      	lsls	r3, r3, #18
 8001918:	4013      	ands	r3, r2
 800191a:	22fe      	movs	r2, #254	; 0xfe
 800191c:	0612      	lsls	r2, r2, #24
 800191e:	4694      	mov	ip, r2
 8001920:	4463      	add	r3, ip
 8001922:	425a      	negs	r2, r3
 8001924:	4153      	adcs	r3, r2
 8001926:	b2db      	uxtb	r3, r3
}
 8001928:	0018      	movs	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	40021000 	.word	0x40021000

08001934 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001944:	4013      	ands	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	401a      	ands	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	431a      	orrs	r2, r3
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	220f      	movs	r2, #15
 8001960:	4393      	bics	r3, r2
 8001962:	0019      	movs	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	220f      	movs	r2, #15
 8001968:	401a      	ands	r2, r3
 800196a:	4b03      	ldr	r3, [pc, #12]	; (8001978 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800196c:	430a      	orrs	r2, r1
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	b002      	add	sp, #8
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000
 800197c:	ffc2ffff 	.word	0xffc2ffff

08001980 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <LL_AHB1_GRP1_EnableClock+0x28>)
 800198a:	6959      	ldr	r1, [r3, #20]
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <LL_AHB1_GRP1_EnableClock+0x28>)
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	430a      	orrs	r2, r1
 8001992:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4013      	ands	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b004      	add	sp, #16
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000

080019ac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <LL_APB1_GRP1_EnableClock+0x28>)
 80019b6:	69d9      	ldr	r1, [r3, #28]
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <LL_APB1_GRP1_EnableClock+0x28>)
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	430a      	orrs	r2, r1
 80019be:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <LL_APB1_GRP1_EnableClock+0x28>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4013      	ands	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b004      	add	sp, #16
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000

080019d8 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <LL_APB1_GRP2_EnableClock+0x28>)
 80019e2:	6999      	ldr	r1, [r3, #24]
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <LL_APB1_GRP2_EnableClock+0x28>)
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <LL_APB1_GRP2_EnableClock+0x28>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4013      	ands	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b004      	add	sp, #16
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000

08001a04 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <LL_FLASH_SetLatency+0x24>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	4393      	bics	r3, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <LL_FLASH_SetLatency+0x24>)
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	40022000 	.word	0x40022000

08001a2c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <LL_FLASH_GetLatency+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4013      	ands	r3, r2
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	40022000 	.word	0x40022000

08001a44 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	601a      	str	r2, [r3, #0]
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported) and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <LL_USART_ConfigAsyncMode+0x2c>)
 8001a6e:	401a      	ands	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	605a      	str	r2, [r3, #4]
#endif /* USART_IRDA_SUPPORT */
#else
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2208      	movs	r2, #8
 8001a7a:	4393      	bics	r3, r2
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	609a      	str	r2, [r3, #8]
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b002      	add	sp, #8
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	fffff7ff 	.word	0xfffff7ff

08001a90 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d101      	bne.n	8001aa8 <LL_USART_IsActiveFlag_RXNE+0x18>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	0018      	movs	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b80      	cmp	r3, #128	; 0x80
 8001ac4:	d101      	bne.n	8001aca <LL_USART_IsActiveFlag_TXE+0x18>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <LL_USART_IsActiveFlag_TXE+0x1a>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2240      	movs	r2, #64	; 0x40
 8001ae0:	621a      	str	r2, [r3, #32]
}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001af2:	f3ef 8310 	mrs	r3, PRIMASK
 8001af6:	60bb      	str	r3, [r7, #8]
  return(result);
 8001af8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	2301      	movs	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f383 8810 	msr	PRIMASK, r3
}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f383 8810 	msr	PRIMASK, r3
}
 8001b1e:	46c0      	nop			; (mov r8, r8)
}
 8001b20:	46c0      	nop			; (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b006      	add	sp, #24
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b30:	f3ef 8310 	mrs	r3, PRIMASK
 8001b34:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b36:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f383 8810 	msr	PRIMASK, r3
}
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <LL_USART_DisableIT_CTS+0x40>)
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	f383 8810 	msr	PRIMASK, r3
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b006      	add	sp, #24
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	fffffbff 	.word	0xfffffbff

08001b6c <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b002      	add	sp, #8
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	000a      	movs	r2, r1
 8001b8e:	1cfb      	adds	r3, r7, #3
 8001b90:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8001b92:	1cfb      	adds	r3, r7, #3
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b002      	add	sp, #8
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZN3pidC1Ev>:
	float Kd;
	float Max;
	float Min;

public:
	pid(){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
		this->Ui = 0;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	605a      	str	r2, [r3, #4]
		this->Up = 0;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
		this->SatErr = 0;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
	}
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_ZN9globalVarC1Ev>:
	float temperature;		//температура, которая поддерживается регулятором

	pwmOut regulator_pin;


	globalVar()
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	{
		this->temperature = 0.;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
		this->regulator_pin.pwm_frequency = 100;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2264      	movs	r2, #100	; 0x64
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
		this->regulator_pin.choice_of_duty_setter = false;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2228      	movs	r2, #40	; 0x28
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	5499      	strb	r1, [r3, r2]
		this->regulator_pin.duty = 0.;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
		this->regulator_pin.fb.temperature = 0.;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
		this->regulator_pin.pid.kc = 0.;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
		this->regulator_pin.pid.kd = 0.;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
		this->regulator_pin.pid.ki = 0.;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
		this->regulator_pin.pid.kp = 0.;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
		this->regulator_pin.pid.max_out = 0.;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
		this->regulator_pin.pid.min_out = 0.;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
		this->regulator_pin.pid.out = 0.;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
	}
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZN8regulPinC1EmPm>:
	uint32_t autoreload;
	uint32_t timer_freq;
	void pwmInit(uint32_t timer_freq, uint32_t freq);
public:
	void init() {this->pwmInit(this->timer_freq, *(this->cur_freq));}
	regulPin(uint32_t timer_freq, uint32_t* cur_freq)
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
	{
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f7ff ffb6 	bl	8001bbc <_ZN3pidC1Ev>
		this->timer_freq = timer_freq;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
		this->cur_freq = cur_freq;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b004      	add	sp, #16
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_ZN12programTimer11timerUpdateEv>:
	}
	void timerInit(uint32_t delay, uint32_t main_freq)
	{
		this->callback_count_val = main_freq * delay / 1000;
	}
	void timerUpdate()
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
	{
		if(this->state == programTimerState::kOff) return;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d01c      	beq.n	8001cb0 <_ZN12programTimer11timerUpdateEv+0x4a>
		this->counter++;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	60da      	str	r2, [r3, #12]
		if((this->counter >= this->callback_count_val) && (this->state == programTimerState::kOn))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d312      	bcc.n	8001cb2 <_ZN12programTimer11timerUpdateEv+0x4c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10e      	bne.n	8001cb2 <_ZN12programTimer11timerUpdateEv+0x4c>
		{

			this->timer_callback();
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	0010      	movs	r0, r2
 8001c9e:	4798      	blx	r3

			this->counter = 0;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
			this->timerStop();
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 f805 	bl	8001cb8 <_ZN12programTimer9timerStopEv>
 8001cae:	e000      	b.n	8001cb2 <_ZN12programTimer11timerUpdateEv+0x4c>
		if(this->state == programTimerState::kOff) return;
 8001cb0:	46c0      	nop			; (mov r8, r8)
		}
	}
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_ZN12programTimer9timerStopEv>:
	void timerStop()
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	{
		this->state = programTimerState::kOff;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	605a      	str	r2, [r3, #4]
		//this->counter = 0;
	}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b002      	add	sp, #8
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_ZN8uartProt15getResReadyFlagEv>:
	void okRes();
public:
	uint8_t tx_buf[kSizeOfBuffs];
	uint8_t tx_len;
	uartProt(globalVar* global_var_p, uint32_t timer_freq);
	bool getResReadyFlag() {return this->res_ready;}
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	5c9b      	ldrb	r3, [r3, r2]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZN8uartProt11resTransmitEv>:
	void resTransmit() {this->res_ready = false;}
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	5499      	strb	r1, [r3, r2]
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_ZN8uartProt6updateEv>:
	void update()
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	{
		this->timerUpdate();
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7ff ffad 	bl	8001c66 <_ZN12programTimer11timerUpdateEv>
	}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b002      	add	sp, #8
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_Z8USART_TXPht>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USART_TX (uint8_t* dt, uint16_t sz)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	000a      	movs	r2, r1
 8001d1e:	1cbb      	adds	r3, r7, #2
 8001d20:	801a      	strh	r2, [r3, #0]
	uint16_t ind = 0;
 8001d22:	230e      	movs	r3, #14
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	2200      	movs	r2, #0
 8001d28:	801a      	strh	r2, [r3, #0]
	while (ind<sz)
 8001d2a:	230e      	movs	r3, #14
 8001d2c:	18fa      	adds	r2, r7, r3
 8001d2e:	1cbb      	adds	r3, r7, #2
 8001d30:	8812      	ldrh	r2, [r2, #0]
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d21b      	bcs.n	8001d70 <_Z8USART_TXPht+0x5c>
	{
		while (!LL_USART_IsActiveFlag_TXE(USART1)) {}
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <_Z8USART_TXPht+0x64>)
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff feb9 	bl	8001ab2 <LL_USART_IsActiveFlag_TXE>
 8001d40:	0003      	movs	r3, r0
 8001d42:	425a      	negs	r2, r3
 8001d44:	4153      	adcs	r3, r2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d000      	beq.n	8001d4e <_Z8USART_TXPht+0x3a>
 8001d4c:	e7f4      	b.n	8001d38 <_Z8USART_TXPht+0x24>
		LL_USART_TransmitData8(USART1,*(uint8_t*)(dt+ind));
 8001d4e:	240e      	movs	r4, #14
 8001d50:	193b      	adds	r3, r7, r4
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	18d3      	adds	r3, r2, r3
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <_Z8USART_TXPht+0x64>)
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	0010      	movs	r0, r2
 8001d60:	f7ff ff10 	bl	8001b84 <LL_USART_TransmitData8>
		ind++;
 8001d64:	193b      	adds	r3, r7, r4
 8001d66:	881a      	ldrh	r2, [r3, #0]
 8001d68:	193b      	adds	r3, r7, r4
 8001d6a:	3201      	adds	r2, #1
 8001d6c:	801a      	strh	r2, [r3, #0]
	while (ind<sz)
 8001d6e:	e7dc      	b.n	8001d2a <_Z8USART_TXPht+0x16>
	}
}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b005      	add	sp, #20
 8001d76:	bd90      	pop	{r4, r7, pc}
 8001d78:	40013800 	.word	0x40013800

08001d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8001d80:	2001      	movs	r0, #1
 8001d82:	f7ff fe29 	bl	80019d8 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	055b      	lsls	r3, r3, #21
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7ff fe0e 	bl	80019ac <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 8001d90:	2301      	movs	r3, #1
 8001d92:	425b      	negs	r3, r3
 8001d94:	2103      	movs	r1, #3
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff fcb6 	bl	8001708 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d9c:	f000 f8b2 	bl	8001f04 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da0:	f000 f9e0 	bl	8002164 <_ZL12MX_GPIO_Initv>
  MX_TIM14_Init();
 8001da4:	f000 f900 	bl	8001fa8 <_ZL13MX_TIM14_Initv>
  MX_TIM16_Init();
 8001da8:	f000 f926 	bl	8001ff8 <_ZL13MX_TIM16_Initv>
  MX_USART1_UART_Init();
 8001dac:	f000 f950 	bl	8002050 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

		if(uart_protocol.getResReadyFlag())
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <main+0x5c>)
 8001db2:	0018      	movs	r0, r3
 8001db4:	f7ff ff8b 	bl	8001cce <_ZN8uartProt15getResReadyFlagEv>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d0f9      	beq.n	8001db0 <main+0x34>
		{
			USART_TX(uart_protocol.tx_buf,uart_protocol.tx_len);
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <main+0x5c>)
 8001dbe:	22e6      	movs	r2, #230	; 0xe6
 8001dc0:	5c9b      	ldrb	r3, [r3, r2]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <main+0x60>)
 8001dc6:	0011      	movs	r1, r2
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7ff ffa3 	bl	8001d14 <_Z8USART_TXPht>
			uart_protocol.resTransmit();
 8001dce:	4b02      	ldr	r3, [pc, #8]	; (8001dd8 <main+0x5c>)
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff ff87 	bl	8001ce4 <_ZN8uartProt11resTransmitEv>
		if(uart_protocol.getResReadyFlag())
 8001dd6:	e7eb      	b.n	8001db0 <main+0x34>
 8001dd8:	20000084 	.word	0x20000084
 8001ddc:	20000106 	.word	0x20000106

08001de0 <TIM16_IRQHandler>:



//	1kHz
extern "C" void TIM16_IRQHandler(void)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
	uart_protocol.update();
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <TIM16_IRQHandler+0xb8>)
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff ff87 	bl	8001cfc <_ZN8uartProt6updateEv>
	uint8_t status = temp_sensor.init(skipRom::kSkip);
 8001dee:	1dfc      	adds	r4, r7, #7
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <TIM16_IRQHandler+0xbc>)
 8001df2:	2101      	movs	r1, #1
 8001df4:	0018      	movs	r0, r3
 8001df6:	f001 fa4a 	bl	800328e <_ZN7ds18b204initE7skipRom>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	7023      	strb	r3, [r4, #0]
	temp_sensor.MeasureTemperCmd(skipRom::kSkip, 0);
 8001dfe:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <TIM16_IRQHandler+0xbc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	2101      	movs	r1, #1
 8001e04:	0018      	movs	r0, r3
 8001e06:	f001 fa74 	bl	80032f2 <_ZN7ds18b2016MeasureTemperCmdE7skipRomh>
	temp_sensor.ReadStratcpad(skipRom::kSkip, dt, 0);
 8001e0a:	4a25      	ldr	r2, [pc, #148]	; (8001ea0 <TIM16_IRQHandler+0xc0>)
 8001e0c:	4823      	ldr	r0, [pc, #140]	; (8001e9c <TIM16_IRQHandler+0xbc>)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2101      	movs	r1, #1
 8001e12:	f001 fa8a 	bl	800332a <_ZN7ds18b2013ReadStratcpadE7skipRomPhh>
	raw_temper = ((uint16_t)dt[1] << 8) | dt[0];
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <TIM16_IRQHandler+0xc0>)
 8001e18:	785b      	ldrb	r3, [r3, #1]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	b21a      	sxth	r2, r3
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <TIM16_IRQHandler+0xc0>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	4313      	orrs	r3, r2
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <TIM16_IRQHandler+0xc4>)
 8001e2c:	801a      	strh	r2, [r3, #0]
	global_var.regulator_pin.fb.temperature = temp_sensor.Convert(raw_temper);
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <TIM16_IRQHandler+0xc4>)
 8001e30:	881a      	ldrh	r2, [r3, #0]
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <TIM16_IRQHandler+0xbc>)
 8001e34:	0011      	movs	r1, r2
 8001e36:	0018      	movs	r0, r3
 8001e38:	f001 faae 	bl	8003398 <_ZN7ds18b207ConvertEt>
 8001e3c:	1c02      	adds	r2, r0, #0
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <TIM16_IRQHandler+0xc8>)
 8001e40:	621a      	str	r2, [r3, #32]

	if (TIM16->SR & TIM_SR_UIF) {
 8001e42:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <TIM16_IRQHandler+0xcc>)
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	4193      	sbcs	r3, r2
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01d      	beq.n	8001e90 <TIM16_IRQHandler+0xb0>

		if(global_var.regulator_pin.choice_of_duty_setter)
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <TIM16_IRQHandler+0xc8>)
 8001e56:	2228      	movs	r2, #40	; 0x28
 8001e58:	5c9b      	ldrb	r3, [r3, r2]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00a      	beq.n	8001e74 <TIM16_IRQHandler+0x94>
			TIM14->CCR1 = term_reg.regulate(global_var.regulator_pin.duty);
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <TIM16_IRQHandler+0xc8>)
 8001e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e62:	4c13      	ldr	r4, [pc, #76]	; (8001eb0 <TIM16_IRQHandler+0xd0>)
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <TIM16_IRQHandler+0xd4>)
 8001e66:	1c11      	adds	r1, r2, #0
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f001 fc45 	bl	80036f8 <_ZN8regulPin8regulateEf>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	6363      	str	r3, [r4, #52]	; 0x34
 8001e72:	e00a      	b.n	8001e8a <TIM16_IRQHandler+0xaa>
		else
			TIM14->CCR1 = term_reg.regulate(global_var.temperature, global_var.regulator_pin.fb.temperature);
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <TIM16_IRQHandler+0xc8>)
 8001e76:	6819      	ldr	r1, [r3, #0]
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <TIM16_IRQHandler+0xc8>)
 8001e7a:	6a1a      	ldr	r2, [r3, #32]
 8001e7c:	4c0c      	ldr	r4, [pc, #48]	; (8001eb0 <TIM16_IRQHandler+0xd0>)
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <TIM16_IRQHandler+0xd4>)
 8001e80:	0018      	movs	r0, r3
 8001e82:	f001 fbeb 	bl	800365c <_ZN8regulPin8regulateEff>
 8001e86:	0003      	movs	r3, r0
 8001e88:	6363      	str	r3, [r4, #52]	; 0x34

		TIM16->SR = 0;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <TIM16_IRQHandler+0xcc>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
		//TIM16->SR &= ~TIM_SR_UIF;
	}
}
 8001e90:	46c0      	nop			; (mov r8, r8)
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b003      	add	sp, #12
 8001e96:	bd90      	pop	{r4, r7, pc}
 8001e98:	20000084 	.word	0x20000084
 8001e9c:	2000016c 	.word	0x2000016c
 8001ea0:	20000170 	.word	0x20000170
 8001ea4:	20000178 	.word	0x20000178
 8001ea8:	20000020 	.word	0x20000020
 8001eac:	40014400 	.word	0x40014400
 8001eb0:	40002000 	.word	0x40002000
 8001eb4:	20000050 	.word	0x20000050

08001eb8 <USART1_IRQHandler>:

extern "C" void USART1_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_RXNE(USART1))
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <USART1_IRQHandler+0x44>)
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff fde6 	bl	8001a90 <LL_USART_IsActiveFlag_RXNE>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	1e5a      	subs	r2, r3, #1
 8001ec8:	4193      	sbcs	r3, r2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d012      	beq.n	8001ef6 <USART1_IRQHandler+0x3e>
	{
		LL_USART_ClearFlag_TC(USART1);
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <USART1_IRQHandler+0x44>)
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7ff fdfe 	bl	8001ad4 <LL_USART_ClearFlag_TC>
		uart_protocol.rxCallback(LL_USART_ReceiveData8(USART1));
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <USART1_IRQHandler+0x44>)
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7ff fe46 	bl	8001b6c <LL_USART_ReceiveData8>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <USART1_IRQHandler+0x48>)
 8001ee6:	0011      	movs	r1, r2
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f001 ff4b 	bl	8003d84 <_ZN8uartProt10rxCallbackEh>
		USART1->ICR = 0xFFFFFFFF;
 8001eee:	4b03      	ldr	r3, [pc, #12]	; (8001efc <USART1_IRQHandler+0x44>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4252      	negs	r2, r2
 8001ef4:	621a      	str	r2, [r3, #32]
	}


}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40013800 	.word	0x40013800
 8001f00:	20000084 	.word	0x20000084

08001f04 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7ff fd7b 	bl	8001a04 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8001f0e:	f7ff fd8d 	bl	8001a2c <LL_FLASH_GetLatency>
 8001f12:	0003      	movs	r3, r0
 8001f14:	3b01      	subs	r3, #1
 8001f16:	1e5a      	subs	r2, r3, #1
 8001f18:	4193      	sbcs	r3, r2
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d000      	beq.n	8001f22 <_Z18SystemClock_Configv+0x1e>
 8001f20:	e7f5      	b.n	8001f0e <_Z18SystemClock_Configv+0xa>
  {
  }
  LL_RCC_HSE_Enable();
 8001f22:	f7ff fc5f 	bl	80017e4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001f26:	f7ff fc6b 	bl	8001800 <LL_RCC_HSE_IsReady>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	1e5a      	subs	r2, r3, #1
 8001f30:	4193      	sbcs	r3, r2
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d000      	beq.n	8001f3a <_Z18SystemClock_Configv+0x36>
 8001f38:	e7f5      	b.n	8001f26 <_Z18SystemClock_Configv+0x22>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	035a      	lsls	r2, r3, #13
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	025b      	lsls	r3, r3, #9
 8001f42:	0011      	movs	r1, r2
 8001f44:	0018      	movs	r0, r3
 8001f46:	f7ff fcf5 	bl	8001934 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001f4a:	f7ff fcd1 	bl	80018f0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001f4e:	f7ff fcdd 	bl	800190c <LL_RCC_PLL_IsReady>
 8001f52:	0003      	movs	r3, r0
 8001f54:	3b01      	subs	r3, #1
 8001f56:	1e5a      	subs	r2, r3, #1
 8001f58:	4193      	sbcs	r3, r2
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d000      	beq.n	8001f62 <_Z18SystemClock_Configv+0x5e>
 8001f60:	e7f5      	b.n	8001f4e <_Z18SystemClock_Configv+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff fc80 	bl	8001868 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff fc91 	bl	8001890 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f7ff fc5a 	bl	8001828 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001f74:	f7ff fc6c 	bl	8001850 <LL_RCC_GetSysClkSource>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	3b08      	subs	r3, #8
 8001f7c:	1e5a      	subs	r2, r3, #1
 8001f7e:	4193      	sbcs	r3, r2
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d000      	beq.n	8001f88 <_Z18SystemClock_Configv+0x84>
 8001f86:	e7f5      	b.n	8001f74 <_Z18SystemClock_Configv+0x70>
  {

  }
  LL_Init1msTick(48000000);
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <_Z18SystemClock_Configv+0xa0>)
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f001 f84e 	bl	800302c <LL_Init1msTick>
  LL_SetSystemCoreClock(48000000);
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <_Z18SystemClock_Configv+0xa0>)
 8001f92:	0018      	movs	r0, r3
 8001f94:	f001 f85a 	bl	800304c <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff fc8f 	bl	80018bc <LL_RCC_SetUSARTClockSource>
}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	02dc6c00 	.word	0x02dc6c00

08001fa8 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fae:	003b      	movs	r3, r7
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	2318      	movs	r3, #24
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	f001 ff26 	bl	8003e08 <memset>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001fbc:	003b      	movs	r3, r7
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fc2:	003b      	movs	r3, r7
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fc8:	003b      	movs	r3, r7
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fce:	003b      	movs	r3, r7
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fd4:	003b      	movs	r3, r7
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001fda:	003b      	movs	r3, r7
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	003b      	movs	r3, r7
 8001fe2:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <_ZL13MX_TIM14_Initv+0x4c>)
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	0010      	movs	r0, r2
 8001fe8:	f000 fa7a 	bl	80024e0 <LL_GPIO_Init>

}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b006      	add	sp, #24
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	48000400 	.word	0x48000400

08001ff8 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	/* Clock Tim1 */
	RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <_ZL13MX_TIM16_Initv+0x4c>)
 8001ffe:	699a      	ldr	r2, [r3, #24]
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <_ZL13MX_TIM16_Initv+0x4c>)
 8002002:	2180      	movs	r1, #128	; 0x80
 8002004:	0289      	lsls	r1, r1, #10
 8002006:	430a      	orrs	r2, r1
 8002008:	619a      	str	r2, [r3, #24]
	/* TIM16 interrupt Init */
	NVIC_SetPriority(TIM16_IRQn, 0);
 800200a:	2100      	movs	r1, #0
 800200c:	2015      	movs	r0, #21
 800200e:	f7ff fb7b 	bl	8001708 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM16_IRQn);
 8002012:	2015      	movs	r0, #21
 8002014:	f7ff fb5e 	bl	80016d4 <__NVIC_EnableIRQ>
	/* T=1ms */
	TIM16->PSC = 48 - 1;
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <_ZL13MX_TIM16_Initv+0x50>)
 800201a:	222f      	movs	r2, #47	; 0x2f
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->ARR = 1000 - 1;
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <_ZL13MX_TIM16_Initv+0x50>)
 8002020:	4a0a      	ldr	r2, [pc, #40]	; (800204c <_ZL13MX_TIM16_Initv+0x54>)
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Update Interrupt Enable */
	TIM16->DIER |= TIM_DIER_UIE;
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <_ZL13MX_TIM16_Initv+0x50>)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <_ZL13MX_TIM16_Initv+0x50>)
 800202a:	2101      	movs	r1, #1
 800202c:	430a      	orrs	r2, r1
 800202e:	60da      	str	r2, [r3, #12]
	/* Counter enable */
	TIM16->CR1 |= TIM_CR1_CEN;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <_ZL13MX_TIM16_Initv+0x50>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <_ZL13MX_TIM16_Initv+0x50>)
 8002036:	2101      	movs	r1, #1
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
	/* Tim11 Interrupt enable */
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	40021000 	.word	0x40021000
 8002048:	40014400 	.word	0x40014400
 800204c:	000003e7 	.word	0x000003e7

08002050 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b08f      	sub	sp, #60	; 0x3c
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002056:	241c      	movs	r4, #28
 8002058:	193b      	adds	r3, r7, r4
 800205a:	0018      	movs	r0, r3
 800205c:	231c      	movs	r3, #28
 800205e:	001a      	movs	r2, r3
 8002060:	2100      	movs	r1, #0
 8002062:	f001 fed1 	bl	8003e08 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	0018      	movs	r0, r3
 800206a:	2318      	movs	r3, #24
 800206c:	001a      	movs	r2, r3
 800206e:	2100      	movs	r1, #0
 8002070:	f001 feca 	bl	8003e08 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	01db      	lsls	r3, r3, #7
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff fcad 	bl	80019d8 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	029b      	lsls	r3, r3, #10
 8002082:	0018      	movs	r0, r3
 8002084:	f7ff fc7c 	bl	8001980 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	2202      	movs	r2, #2
 8002094:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2203      	movs	r2, #3
 800209a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2201      	movs	r2, #1
 80020ac:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	1d3a      	adds	r2, r7, #4
 80020b0:	2390      	movs	r3, #144	; 0x90
 80020b2:	05db      	lsls	r3, r3, #23
 80020b4:	0011      	movs	r1, r2
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 fa12 	bl	80024e0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	00d2      	lsls	r2, r2, #3
 80020c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	2202      	movs	r2, #2
 80020c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	2203      	movs	r2, #3
 80020ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	2200      	movs	r2, #0
 80020d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	2201      	movs	r2, #1
 80020e0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	1d3a      	adds	r2, r7, #4
 80020e4:	2390      	movs	r3, #144	; 0x90
 80020e6:	05db      	lsls	r3, r3, #23
 80020e8:	0011      	movs	r1, r2
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 f9f8 	bl	80024e0 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 80020f0:	2100      	movs	r1, #0
 80020f2:	201b      	movs	r0, #27
 80020f4:	f7ff fb08 	bl	8001708 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80020f8:	201b      	movs	r0, #27
 80020fa:	f7ff faeb 	bl	80016d4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80020fe:	193b      	adds	r3, r7, r4
 8002100:	22e1      	movs	r2, #225	; 0xe1
 8002102:	0252      	lsls	r2, r2, #9
 8002104:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002106:	0021      	movs	r1, r4
 8002108:	187b      	adds	r3, r7, r1
 800210a:	2200      	movs	r2, #0
 800210c:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800210e:	187b      	adds	r3, r7, r1
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002114:	187b      	adds	r3, r7, r1
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800211a:	187b      	adds	r3, r7, r1
 800211c:	220c      	movs	r2, #12
 800211e:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002120:	187b      	adds	r3, r7, r1
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002126:	187b      	adds	r3, r7, r1
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 800212c:	187b      	adds	r3, r7, r1
 800212e:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <_ZL19MX_USART1_UART_Initv+0x110>)
 8002130:	0019      	movs	r1, r3
 8002132:	0010      	movs	r0, r2
 8002134:	f000 ff08 	bl	8002f48 <LL_USART_Init>
  LL_USART_EnableIT_RXNE(USART1);
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <_ZL19MX_USART1_UART_Initv+0x110>)
 800213a:	0018      	movs	r0, r3
 800213c:	f7ff fcd5 	bl	8001aea <LL_USART_EnableIT_RXNE>
  LL_USART_DisableIT_CTS(USART1);
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <_ZL19MX_USART1_UART_Initv+0x110>)
 8002142:	0018      	movs	r0, r3
 8002144:	f7ff fcf0 	bl	8001b28 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <_ZL19MX_USART1_UART_Initv+0x110>)
 800214a:	0018      	movs	r0, r3
 800214c:	f7ff fc88 	bl	8001a60 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <_ZL19MX_USART1_UART_Initv+0x110>)
 8002152:	0018      	movs	r0, r3
 8002154:	f7ff fc76 	bl	8001a44 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002158:	46c0      	nop			; (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	b00f      	add	sp, #60	; 0x3c
 800215e:	bd90      	pop	{r4, r7, pc}
 8002160:	40013800 	.word	0x40013800

08002164 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216a:	003b      	movs	r3, r7
 800216c:	0018      	movs	r0, r3
 800216e:	2318      	movs	r3, #24
 8002170:	001a      	movs	r2, r3
 8002172:	2100      	movs	r1, #0
 8002174:	f001 fe48 	bl	8003e08 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	03db      	lsls	r3, r3, #15
 800217c:	0018      	movs	r0, r3
 800217e:	f7ff fbff 	bl	8001980 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	029b      	lsls	r3, r3, #10
 8002186:	0018      	movs	r0, r3
 8002188:	f7ff fbfa 	bl	8001980 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	02db      	lsls	r3, r3, #11
 8002190:	0018      	movs	r0, r3
 8002192:	f7ff fbf5 	bl	8001980 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TM1637_DIO_GPIO_Port, TM1637_DIO_Pin);
 8002196:	2390      	movs	r3, #144	; 0x90
 8002198:	05db      	lsls	r3, r3, #23
 800219a:	2102      	movs	r1, #2
 800219c:	0018      	movs	r0, r3
 800219e:	f7ff fd01 	bl	8001ba4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TM1637_CLK_GPIO_Port, TM1637_CLK_Pin);
 80021a2:	2390      	movs	r3, #144	; 0x90
 80021a4:	05db      	lsls	r3, r3, #23
 80021a6:	2104      	movs	r1, #4
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7ff fcfb 	bl	8001ba4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DS18B20_PIN_GPIO_Port, DS18B20_PIN_Pin);
 80021ae:	2390      	movs	r3, #144	; 0x90
 80021b0:	05db      	lsls	r3, r3, #23
 80021b2:	2110      	movs	r1, #16
 80021b4:	0018      	movs	r0, r3
 80021b6:	f7ff fcf5 	bl	8001ba4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = TM1637_DIO_Pin;
 80021ba:	003b      	movs	r3, r7
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80021c0:	003b      	movs	r3, r7
 80021c2:	2201      	movs	r2, #1
 80021c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021c6:	003b      	movs	r3, r7
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021cc:	003b      	movs	r3, r7
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021d2:	003b      	movs	r3, r7
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TM1637_DIO_GPIO_Port, &GPIO_InitStruct);
 80021d8:	003a      	movs	r2, r7
 80021da:	2390      	movs	r3, #144	; 0x90
 80021dc:	05db      	lsls	r3, r3, #23
 80021de:	0011      	movs	r1, r2
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 f97d 	bl	80024e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TM1637_CLK_Pin;
 80021e6:	003b      	movs	r3, r7
 80021e8:	2204      	movs	r2, #4
 80021ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80021ec:	003b      	movs	r3, r7
 80021ee:	2201      	movs	r2, #1
 80021f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021f2:	003b      	movs	r3, r7
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021f8:	003b      	movs	r3, r7
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021fe:	003b      	movs	r3, r7
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TM1637_CLK_GPIO_Port, &GPIO_InitStruct);
 8002204:	003a      	movs	r2, r7
 8002206:	2390      	movs	r3, #144	; 0x90
 8002208:	05db      	lsls	r3, r3, #23
 800220a:	0011      	movs	r1, r2
 800220c:	0018      	movs	r0, r3
 800220e:	f000 f967 	bl	80024e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DS18B20_PIN_Pin;
 8002212:	003b      	movs	r3, r7
 8002214:	2210      	movs	r2, #16
 8002216:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002218:	003b      	movs	r3, r7
 800221a:	2201      	movs	r2, #1
 800221c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800221e:	003b      	movs	r3, r7
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002224:	003b      	movs	r3, r7
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800222a:	003b      	movs	r3, r7
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DS18B20_PIN_GPIO_Port, &GPIO_InitStruct);
 8002230:	003a      	movs	r2, r7
 8002232:	2390      	movs	r3, #144	; 0x90
 8002234:	05db      	lsls	r3, r3, #23
 8002236:	0011      	movs	r1, r2
 8002238:	0018      	movs	r0, r3
 800223a:	f000 f951 	bl	80024e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENCODER_BUTTON_Pin;
 800223e:	003b      	movs	r3, r7
 8002240:	2220      	movs	r2, #32
 8002242:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002244:	003b      	movs	r3, r7
 8002246:	2200      	movs	r2, #0
 8002248:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800224a:	003b      	movs	r3, r7
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ENCODER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002250:	003a      	movs	r2, r7
 8002252:	2390      	movs	r3, #144	; 0x90
 8002254:	05db      	lsls	r3, r3, #23
 8002256:	0011      	movs	r1, r2
 8002258:	0018      	movs	r0, r3
 800225a:	f000 f941 	bl	80024e0 <LL_GPIO_Init>

}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	46bd      	mov	sp, r7
 8002262:	b006      	add	sp, #24
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <_Z41__static_initialization_and_destruction_0ii>:
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d118      	bne.n	80022aa <_Z41__static_initialization_and_destruction_0ii+0x42>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d114      	bne.n	80022aa <_Z41__static_initialization_and_destruction_0ii+0x42>
globalVar global_var;
 8002280:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002282:	0018      	movs	r0, r3
 8002284:	f7ff fcac 	bl	8001be0 <_ZN9globalVarC1Ev>
regulPin term_reg(kTimerFreq, &global_var.regulator_pin.pwm_frequency);
 8002288:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800228a:	490d      	ldr	r1, [pc, #52]	; (80022c0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800228e:	0018      	movs	r0, r3
 8002290:	f7ff fcd4 	bl	8001c3c <_ZN8regulPinC1EmPm>
uartProt uart_protocol(&global_var,1000);
 8002294:	23fa      	movs	r3, #250	; 0xfa
 8002296:	009a      	lsls	r2, r3, #2
 8002298:	4907      	ldr	r1, [pc, #28]	; (80022b8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800229c:	0018      	movs	r0, r3
 800229e:	f001 fb5b 	bl	8003958 <_ZN8uartProtC1EP9globalVarm>
ds18b20 temp_sensor;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80022a4:	0018      	movs	r0, r3
 80022a6:	f001 f8a3 	bl	80033f0 <_ZN7ds18b20C1Ev>
}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b002      	add	sp, #8
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	0000ffff 	.word	0x0000ffff
 80022b8:	20000020 	.word	0x20000020
 80022bc:	20000044 	.word	0x20000044
 80022c0:	02dc6c00 	.word	0x02dc6c00
 80022c4:	20000050 	.word	0x20000050
 80022c8:	20000084 	.word	0x20000084
 80022cc:	2000016c 	.word	0x2000016c

080022d0 <_GLOBAL__sub_I_global_var>:
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <_GLOBAL__sub_I_global_var+0x14>)
 80022d6:	0019      	movs	r1, r3
 80022d8:	2001      	movs	r0, #1
 80022da:	f7ff ffc5 	bl	8002268 <_Z41__static_initialization_and_destruction_0ii>
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	0000ffff 	.word	0x0000ffff

080022e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <NMI_Handler+0x4>

080022ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f2:	e7fe      	b.n	80022f2 <HardFault_Handler+0x4>

080022f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800231c:	480d      	ldr	r0, [pc, #52]	; (8002354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800231e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <LoopForever+0x6>)
  ldr r1, =_edata
 8002322:	490e      	ldr	r1, [pc, #56]	; (800235c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002324:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <LoopForever+0xe>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002338:	4c0b      	ldr	r4, [pc, #44]	; (8002368 <LoopForever+0x16>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002346:	f7ff ffe4 	bl	8002312 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800234a:	f001 fd39 	bl	8003dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800234e:	f7ff fd15 	bl	8001d7c <main>

08002352 <LoopForever>:

LoopForever:
    b LoopForever
 8002352:	e7fe      	b.n	8002352 <LoopForever>
  ldr   r0, =_estack
 8002354:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800235c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002360:	08003fd8 	.word	0x08003fd8
  ldr r2, =_sbss
 8002364:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002368:	2000017c 	.word	0x2000017c

0800236c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800236c:	e7fe      	b.n	800236c <ADC1_IRQHandler>

0800236e <LL_GPIO_SetPinMode>:
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6819      	ldr	r1, [r3, #0]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	435b      	muls	r3, r3
 8002382:	001a      	movs	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	189b      	adds	r3, r3, r2
 800238a:	43db      	mvns	r3, r3
 800238c:	400b      	ands	r3, r1
 800238e:	001a      	movs	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	435b      	muls	r3, r3
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	434b      	muls	r3, r1
 8002398:	431a      	orrs	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	601a      	str	r2, [r3, #0]
}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b004      	add	sp, #16
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <LL_GPIO_SetPinOutputType>:
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	43d2      	mvns	r2, r2
 80023ba:	401a      	ands	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	434b      	muls	r3, r1
 80023c2:	431a      	orrs	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	605a      	str	r2, [r3, #4]
}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b004      	add	sp, #16
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <LL_GPIO_SetPinSpeed>:
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6899      	ldr	r1, [r3, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	435b      	muls	r3, r3
 80023e4:	001a      	movs	r2, r3
 80023e6:	0013      	movs	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	189b      	adds	r3, r3, r2
 80023ec:	43db      	mvns	r3, r3
 80023ee:	400b      	ands	r3, r1
 80023f0:	001a      	movs	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	435b      	muls	r3, r3
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	434b      	muls	r3, r1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	609a      	str	r2, [r3, #8]
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b004      	add	sp, #16
 8002406:	bd80      	pop	{r7, pc}

08002408 <LL_GPIO_SetPinPull>:
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	68d9      	ldr	r1, [r3, #12]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	435b      	muls	r3, r3
 800241c:	001a      	movs	r2, r3
 800241e:	0013      	movs	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	189b      	adds	r3, r3, r2
 8002424:	43db      	mvns	r3, r3
 8002426:	400b      	ands	r3, r1
 8002428:	001a      	movs	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	435b      	muls	r3, r3
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	434b      	muls	r3, r1
 8002432:	431a      	orrs	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	60da      	str	r2, [r3, #12]
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b004      	add	sp, #16
 800243e:	bd80      	pop	{r7, pc}

08002440 <LL_GPIO_SetAFPin_0_7>:
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a19      	ldr	r1, [r3, #32]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	435b      	muls	r3, r3
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4353      	muls	r3, r2
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	435a      	muls	r2, r3
 800245c:	0013      	movs	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	43db      	mvns	r3, r3
 8002464:	400b      	ands	r3, r1
 8002466:	001a      	movs	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	435b      	muls	r3, r3
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	434b      	muls	r3, r1
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	434b      	muls	r3, r1
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	434b      	muls	r3, r1
 8002478:	431a      	orrs	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	621a      	str	r2, [r3, #32]
}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	46bd      	mov	sp, r7
 8002482:	b004      	add	sp, #16
 8002484:	bd80      	pop	{r7, pc}

08002486 <LL_GPIO_SetAFPin_8_15>:
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	0a12      	lsrs	r2, r2, #8
 800249e:	4353      	muls	r3, r2
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	0a12      	lsrs	r2, r2, #8
 80024a4:	4353      	muls	r3, r2
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	0a12      	lsrs	r2, r2, #8
 80024aa:	435a      	muls	r2, r3
 80024ac:	0013      	movs	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	43db      	mvns	r3, r3
 80024b4:	400b      	ands	r3, r1
 80024b6:	001a      	movs	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	0a09      	lsrs	r1, r1, #8
 80024c0:	434b      	muls	r3, r1
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	0a09      	lsrs	r1, r1, #8
 80024c6:	434b      	muls	r3, r1
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	0a09      	lsrs	r1, r1, #8
 80024cc:	434b      	muls	r3, r1
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	434b      	muls	r3, r1
 80024d2:	431a      	orrs	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bd80      	pop	{r7, pc}

080024e0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80024ee:	e048      	b.n	8002582 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4091      	lsls	r1, r2
 80024fa:	000a      	movs	r2, r1
 80024fc:	4013      	ands	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d03a      	beq.n	800257c <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d003      	beq.n	8002516 <LL_GPIO_Init+0x36>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d10e      	bne.n	8002534 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	0018      	movs	r0, r3
 8002520:	f7ff ff56 	bl	80023d0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6819      	ldr	r1, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	0018      	movs	r0, r3
 8002530:	f7ff ff39 	bl	80023a6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	0018      	movs	r0, r3
 800253e:	f7ff ff63 	bl	8002408 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d111      	bne.n	800256e <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2bff      	cmp	r3, #255	; 0xff
 800254e:	d807      	bhi.n	8002560 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0018      	movs	r0, r3
 800255a:	f7ff ff71 	bl	8002440 <LL_GPIO_SetAFPin_0_7>
 800255e:	e006      	b.n	800256e <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff ff8c 	bl	8002486 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	0018      	movs	r0, r3
 8002578:	f7ff fef9 	bl	800236e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3301      	adds	r3, #1
 8002580:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	40da      	lsrs	r2, r3
 800258a:	1e13      	subs	r3, r2, #0
 800258c:	d1b0      	bne.n	80024f0 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800258e:	2300      	movs	r3, #0
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	b004      	add	sp, #16
 8002596:	bd80      	pop	{r7, pc}

08002598 <LL_RCC_HSI_IsReady>:
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <LL_RCC_HSI_IsReady+0x1c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2202      	movs	r2, #2
 80025a2:	4013      	ands	r3, r2
 80025a4:	3b02      	subs	r3, #2
 80025a6:	425a      	negs	r2, r3
 80025a8:	4153      	adcs	r3, r2
 80025aa:	b2db      	uxtb	r3, r3
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	40021000 	.word	0x40021000

080025b8 <LL_RCC_LSE_IsReady>:
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <LL_RCC_LSE_IsReady+0x1c>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	2202      	movs	r2, #2
 80025c2:	4013      	ands	r3, r2
 80025c4:	3b02      	subs	r3, #2
 80025c6:	425a      	negs	r2, r3
 80025c8:	4153      	adcs	r3, r2
 80025ca:	b2db      	uxtb	r3, r3
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	40021000 	.word	0x40021000

080025d8 <LL_RCC_GetSysClkSource>:
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <LL_RCC_GetSysClkSource+0x14>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	220c      	movs	r2, #12
 80025e2:	4013      	ands	r3, r2
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	40021000 	.word	0x40021000

080025f0 <LL_RCC_GetAHBPrescaler>:
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <LL_RCC_GetAHBPrescaler+0x14>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	22f0      	movs	r2, #240	; 0xf0
 80025fa:	4013      	ands	r3, r2
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	40021000 	.word	0x40021000

08002608 <LL_RCC_GetAPB1Prescaler>:
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <LL_RCC_GetAPB1Prescaler+0x14>)
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	23e0      	movs	r3, #224	; 0xe0
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4013      	ands	r3, r2
}
 8002616:	0018      	movs	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000

08002620 <LL_RCC_GetUSARTClockSource>:
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <LL_RCC_GetUSARTClockSource+0x24>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	2103      	movs	r1, #3
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4091      	lsls	r1, r2
 8002632:	000a      	movs	r2, r1
 8002634:	401a      	ands	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	4313      	orrs	r3, r2
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000

08002648 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <LL_RCC_PLL_GetMainSource+0x14>)
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	025b      	lsls	r3, r3, #9
 8002654:	4013      	ands	r3, r2
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000

08002660 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	23f0      	movs	r3, #240	; 0xf0
 800266a:	039b      	lsls	r3, r3, #14
 800266c:	4013      	ands	r3, r2
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000

08002678 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <LL_RCC_PLL_GetPrediv+0x14>)
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	220f      	movs	r2, #15
 8002682:	4013      	ands	r3, r2
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	40021000 	.word	0x40021000

08002690 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d12d      	bne.n	80026fe <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7ff ffbb 	bl	8002620 <LL_RCC_GetUSARTClockSource>
 80026aa:	0003      	movs	r3, r0
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d00a      	beq.n	80026c6 <LL_RCC_GetUSARTClockFreq+0x36>
 80026b0:	d818      	bhi.n	80026e4 <LL_RCC_GetUSARTClockFreq+0x54>
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d002      	beq.n	80026bc <LL_RCC_GetUSARTClockFreq+0x2c>
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d00c      	beq.n	80026d4 <LL_RCC_GetUSARTClockFreq+0x44>
 80026ba:	e013      	b.n	80026e4 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80026bc:	f000 f82c 	bl	8002718 <RCC_GetSystemClockFreq>
 80026c0:	0003      	movs	r3, r0
 80026c2:	60fb      	str	r3, [r7, #12]
        break;
 80026c4:	e020      	b.n	8002708 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80026c6:	f7ff ff67 	bl	8002598 <LL_RCC_HSI_IsReady>
 80026ca:	1e03      	subs	r3, r0, #0
 80026cc:	d019      	beq.n	8002702 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <LL_RCC_GetUSARTClockFreq+0x84>)
 80026d0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80026d2:	e016      	b.n	8002702 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80026d4:	f7ff ff70 	bl	80025b8 <LL_RCC_LSE_IsReady>
 80026d8:	1e03      	subs	r3, r0, #0
 80026da:	d014      	beq.n	8002706 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80026e2:	e010      	b.n	8002706 <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80026e4:	f000 f818 	bl	8002718 <RCC_GetSystemClockFreq>
 80026e8:	0003      	movs	r3, r0
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f83a 	bl	8002764 <RCC_GetHCLKClockFreq>
 80026f0:	0003      	movs	r3, r0
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 f84c 	bl	8002790 <RCC_GetPCLK1ClockFreq>
 80026f8:	0003      	movs	r3, r0
 80026fa:	60fb      	str	r3, [r7, #12]
        break;
 80026fc:	e004      	b.n	8002708 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	e002      	b.n	8002708 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	e000      	b.n	8002708 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8002706:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002708:	68fb      	ldr	r3, [r7, #12]
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b004      	add	sp, #16
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	007a1200 	.word	0x007a1200

08002718 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002722:	f7ff ff59 	bl	80025d8 <LL_RCC_GetSysClkSource>
 8002726:	0003      	movs	r3, r0
 8002728:	2b08      	cmp	r3, #8
 800272a:	d00b      	beq.n	8002744 <RCC_GetSystemClockFreq+0x2c>
 800272c:	d80f      	bhi.n	800274e <RCC_GetSystemClockFreq+0x36>
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <RCC_GetSystemClockFreq+0x20>
 8002732:	2b04      	cmp	r3, #4
 8002734:	d003      	beq.n	800273e <RCC_GetSystemClockFreq+0x26>
 8002736:	e00a      	b.n	800274e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <RCC_GetSystemClockFreq+0x48>)
 800273a:	607b      	str	r3, [r7, #4]
      break;
 800273c:	e00a      	b.n	8002754 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <RCC_GetSystemClockFreq+0x48>)
 8002740:	607b      	str	r3, [r7, #4]
      break;
 8002742:	e007      	b.n	8002754 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002744:	f000 f838 	bl	80027b8 <RCC_PLL_GetFreqDomain_SYS>
 8002748:	0003      	movs	r3, r0
 800274a:	607b      	str	r3, [r7, #4]
      break;
 800274c:	e002      	b.n	8002754 <RCC_GetSystemClockFreq+0x3c>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <RCC_GetSystemClockFreq+0x48>)
 8002750:	607b      	str	r3, [r7, #4]
      break;
 8002752:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8002754:	687b      	ldr	r3, [r7, #4]
}
 8002756:	0018      	movs	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	b002      	add	sp, #8
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	007a1200 	.word	0x007a1200

08002764 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800276c:	f7ff ff40 	bl	80025f0 <LL_RCC_GetAHBPrescaler>
 8002770:	0003      	movs	r3, r0
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	220f      	movs	r2, #15
 8002776:	4013      	ands	r3, r2
 8002778:	4a04      	ldr	r2, [pc, #16]	; (800278c <RCC_GetHCLKClockFreq+0x28>)
 800277a:	5cd3      	ldrb	r3, [r2, r3]
 800277c:	001a      	movs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	40d3      	lsrs	r3, r2
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b002      	add	sp, #8
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	08003f30 	.word	0x08003f30

08002790 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002798:	f7ff ff36 	bl	8002608 <LL_RCC_GetAPB1Prescaler>
 800279c:	0003      	movs	r3, r0
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <RCC_GetPCLK1ClockFreq+0x24>)
 80027a2:	5cd3      	ldrb	r3, [r2, r3]
 80027a4:	001a      	movs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	40d3      	lsrs	r3, r2
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b002      	add	sp, #8
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	08003f40 	.word	0x08003f40

080027b8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	2300      	movs	r3, #0
 80027c4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80027c6:	f7ff ff3f 	bl	8002648 <LL_RCC_PLL_GetMainSource>
 80027ca:	0003      	movs	r3, r0
 80027cc:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	025b      	lsls	r3, r3, #9
 80027da:	429a      	cmp	r2, r3
 80027dc:	d003      	beq.n	80027e6 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80027de:	e005      	b.n	80027ec <RCC_PLL_GetFreqDomain_SYS+0x34>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80027e2:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80027e4:	e005      	b.n	80027f2 <RCC_PLL_GetFreqDomain_SYS+0x3a>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80027e8:	607b      	str	r3, [r7, #4]
      break;
 80027ea:	e002      	b.n	80027f2 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80027ee:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80027f0:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80027f2:	f7ff ff41 	bl	8002678 <LL_RCC_PLL_GetPrediv>
 80027f6:	0003      	movs	r3, r0
 80027f8:	3301      	adds	r3, #1
 80027fa:	0019      	movs	r1, r3
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7fd fc83 	bl	8000108 <__udivsi3>
 8002802:	0003      	movs	r3, r0
 8002804:	001c      	movs	r4, r3
 8002806:	f7ff ff2b 	bl	8002660 <LL_RCC_PLL_GetMultiplicator>
 800280a:	0003      	movs	r3, r0
 800280c:	0c9b      	lsrs	r3, r3, #18
 800280e:	220f      	movs	r2, #15
 8002810:	4013      	ands	r3, r2
 8002812:	3302      	adds	r3, #2
 8002814:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002816:	0018      	movs	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	b003      	add	sp, #12
 800281c:	bd90      	pop	{r4, r7, pc}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	003d0900 	.word	0x003d0900
 8002824:	007a1200 	.word	0x007a1200

08002828 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b002      	add	sp, #8
 800283e:	bd80      	pop	{r7, pc}

08002840 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002850:	46c0      	nop			; (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b002      	add	sp, #8
 8002856:	bd80      	pop	{r7, pc}

08002858 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}

08002870 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}

08002888 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b002      	add	sp, #8
 800289e:	bd80      	pop	{r7, pc}

080028a0 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80028b0:	46c0      	nop			; (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b002      	add	sp, #8
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	2201      	movs	r2, #1
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	615a      	str	r2, [r3, #20]
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a2c      	ldr	r2, [pc, #176]	; (80029b0 <LL_TIM_Init+0xc4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d003      	beq.n	800290c <LL_TIM_Init+0x20>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a2b      	ldr	r2, [pc, #172]	; (80029b4 <LL_TIM_Init+0xc8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d107      	bne.n	800291c <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2270      	movs	r2, #112	; 0x70
 8002910:	4393      	bics	r3, r2
 8002912:	001a      	movs	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a24      	ldr	r2, [pc, #144]	; (80029b0 <LL_TIM_Init+0xc4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00f      	beq.n	8002944 <LL_TIM_Init+0x58>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a23      	ldr	r2, [pc, #140]	; (80029b4 <LL_TIM_Init+0xc8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00b      	beq.n	8002944 <LL_TIM_Init+0x58>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <LL_TIM_Init+0xcc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d007      	beq.n	8002944 <LL_TIM_Init+0x58>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a21      	ldr	r2, [pc, #132]	; (80029bc <LL_TIM_Init+0xd0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d003      	beq.n	8002944 <LL_TIM_Init+0x58>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a20      	ldr	r2, [pc, #128]	; (80029c0 <LL_TIM_Init+0xd4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d106      	bne.n	8002952 <LL_TIM_Init+0x66>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <LL_TIM_Init+0xd8>)
 8002948:	401a      	ands	r2, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0011      	movs	r1, r2
 8002960:	0018      	movs	r0, r3
 8002962:	f7ff ff6d 	bl	8002840 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	001a      	movs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0011      	movs	r1, r2
 8002970:	0018      	movs	r0, r3
 8002972:	f7ff ff59 	bl	8002828 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <LL_TIM_Init+0xc4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d007      	beq.n	800298e <LL_TIM_Init+0xa2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <LL_TIM_Init+0xd0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <LL_TIM_Init+0xa2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <LL_TIM_Init+0xd4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d106      	bne.n	800299c <LL_TIM_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0011      	movs	r1, r2
 8002996:	0018      	movs	r0, r3
 8002998:	f7ff ff5e 	bl	8002858 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	0018      	movs	r0, r3
 80029a0:	f7ff ff96 	bl	80028d0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b004      	add	sp, #16
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40000400 	.word	0x40000400
 80029b8:	40002000 	.word	0x40002000
 80029bc:	40014400 	.word	0x40014400
 80029c0:	40014800 	.word	0x40014800
 80029c4:	fffffcff 	.word	0xfffffcff

080029c8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80029d4:	2317      	movs	r3, #23
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	015b      	lsls	r3, r3, #5
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d036      	beq.n	8002a54 <LL_TIM_OC_Init+0x8c>
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	015b      	lsls	r3, r3, #5
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d83c      	bhi.n	8002a6a <LL_TIM_OC_Init+0xa2>
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d021      	beq.n	8002a3e <LL_TIM_OC_Init+0x76>
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d832      	bhi.n	8002a6a <LL_TIM_OC_Init+0xa2>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d003      	beq.n	8002a12 <LL_TIM_OC_Init+0x4a>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d00b      	beq.n	8002a28 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002a10:	e02b      	b.n	8002a6a <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002a12:	2317      	movs	r3, #23
 8002a14:	18fc      	adds	r4, r7, r3
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 f82d 	bl	8002a7c <OC1Config>
 8002a22:	0003      	movs	r3, r0
 8002a24:	7023      	strb	r3, [r4, #0]
      break;
 8002a26:	e021      	b.n	8002a6c <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002a28:	2317      	movs	r3, #23
 8002a2a:	18fc      	adds	r4, r7, r3
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	0011      	movs	r1, r2
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 f8a0 	bl	8002b78 <OC2Config>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	7023      	strb	r3, [r4, #0]
      break;
 8002a3c:	e016      	b.n	8002a6c <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002a3e:	2317      	movs	r3, #23
 8002a40:	18fc      	adds	r4, r7, r3
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	0011      	movs	r1, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 f919 	bl	8002c80 <OC3Config>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	7023      	strb	r3, [r4, #0]
      break;
 8002a52:	e00b      	b.n	8002a6c <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002a54:	2317      	movs	r3, #23
 8002a56:	18fc      	adds	r4, r7, r3
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	0011      	movs	r1, r2
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 f992 	bl	8002d88 <OC4Config>
 8002a64:	0003      	movs	r3, r0
 8002a66:	7023      	strb	r3, [r4, #0]
      break;
 8002a68:	e000      	b.n	8002a6c <LL_TIM_OC_Init+0xa4>
      break;
 8002a6a:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8002a6c:	2317      	movs	r3, #23
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	781b      	ldrb	r3, [r3, #0]
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b007      	add	sp, #28
 8002a78:	bd90      	pop	{r4, r7, pc}
	...

08002a7c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4393      	bics	r3, r2
 8002a8e:	001a      	movs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	4393      	bics	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2270      	movs	r2, #112	; 0x70
 8002ab2:	4393      	bics	r3, r2
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	4393      	bics	r3, r2
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4393      	bics	r3, r2
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a20      	ldr	r2, [pc, #128]	; (8002b64 <OC1Config+0xe8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <OC1Config+0x7a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a1f      	ldr	r2, [pc, #124]	; (8002b68 <OC1Config+0xec>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d003      	beq.n	8002af6 <OC1Config+0x7a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <OC1Config+0xf0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d120      	bne.n	8002b38 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2208      	movs	r2, #8
 8002afa:	4393      	bics	r3, r2
 8002afc:	001a      	movs	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	001a      	movs	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <OC1Config+0xf4>)
 8002b1e:	401a      	ands	r2, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <OC1Config+0xf8>)
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	0011      	movs	r1, r2
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7ff fe8f 	bl	8002870 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b006      	add	sp, #24
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40014400 	.word	0x40014400
 8002b6c:	40014800 	.word	0x40014800
 8002b70:	fffffeff 	.word	0xfffffeff
 8002b74:	fffffdff 	.word	0xfffffdff

08002b78 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	2210      	movs	r2, #16
 8002b88:	4393      	bics	r3, r2
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <OC2Config+0xec>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4a2e      	ldr	r2, [pc, #184]	; (8002c68 <OC2Config+0xf0>)
 8002bae:	401a      	ands	r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	4393      	bics	r3, r2
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2210      	movs	r2, #16
 8002bd0:	4393      	bics	r3, r2
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <OC2Config+0xf4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <OC2Config+0x7e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <OC2Config+0xf8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d003      	beq.n	8002bf6 <OC2Config+0x7e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a20      	ldr	r2, [pc, #128]	; (8002c74 <OC2Config+0xfc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d121      	bne.n	8002c3a <OC2Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	4393      	bics	r3, r2
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	019b      	lsls	r3, r3, #6
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2240      	movs	r2, #64	; 0x40
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	001a      	movs	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	019b      	lsls	r3, r3, #6
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <OC2Config+0x100>)
 8002c1e:	401a      	ands	r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <OC2Config+0x104>)
 8002c2e:	401a      	ands	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0011      	movs	r1, r2
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f7ff fe1a 	bl	8002888 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b006      	add	sp, #24
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	fffffcff 	.word	0xfffffcff
 8002c68:	ffff8fff 	.word	0xffff8fff
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40014400 	.word	0x40014400
 8002c74:	40014800 	.word	0x40014800
 8002c78:	fffffbff 	.word	0xfffffbff
 8002c7c:	fffff7ff 	.word	0xfffff7ff

08002c80 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4a35      	ldr	r2, [pc, #212]	; (8002d64 <OC3Config+0xe4>)
 8002c90:	401a      	ands	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2203      	movs	r2, #3
 8002cac:	4393      	bics	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2270      	movs	r2, #112	; 0x70
 8002cb4:	4393      	bics	r3, r2
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	4a29      	ldr	r2, [pc, #164]	; (8002d68 <OC3Config+0xe8>)
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	4a24      	ldr	r2, [pc, #144]	; (8002d64 <OC3Config+0xe4>)
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <OC3Config+0xec>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d007      	beq.n	8002cf8 <OC3Config+0x78>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a21      	ldr	r2, [pc, #132]	; (8002d70 <OC3Config+0xf0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <OC3Config+0x78>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <OC3Config+0xf4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d11f      	bne.n	8002d38 <OC3Config+0xb8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <OC3Config+0xf8>)
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	029b      	lsls	r3, r3, #10
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <OC3Config+0xfc>)
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	029b      	lsls	r3, r3, #10
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4a19      	ldr	r2, [pc, #100]	; (8002d80 <OC3Config+0x100>)
 8002d1c:	401a      	ands	r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4a16      	ldr	r2, [pc, #88]	; (8002d84 <OC3Config+0x104>)
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	015b      	lsls	r3, r3, #5
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7ff fda7 	bl	80028a0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b006      	add	sp, #24
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	fffffeff 	.word	0xfffffeff
 8002d68:	fffffdff 	.word	0xfffffdff
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40014400 	.word	0x40014400
 8002d74:	40014800 	.word	0x40014800
 8002d78:	fffff7ff 	.word	0xfffff7ff
 8002d7c:	fffffbff 	.word	0xfffffbff
 8002d80:	ffffefff 	.word	0xffffefff
 8002d84:	ffffdfff 	.word	0xffffdfff

08002d88 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <OC4Config+0xb4>)
 8002d98:	401a      	ands	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <OC4Config+0xb8>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <OC4Config+0xbc>)
 8002dbc:	401a      	ands	r2, r3
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <OC4Config+0xc0>)
 8002dcc:	401a      	ands	r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	031b      	lsls	r3, r3, #12
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <OC4Config+0xb4>)
 8002ddc:	401a      	ands	r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	031b      	lsls	r3, r3, #12
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <OC4Config+0xc4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <OC4Config+0x78>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a17      	ldr	r2, [pc, #92]	; (8002e50 <OC4Config+0xc8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d003      	beq.n	8002e00 <OC4Config+0x78>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a16      	ldr	r2, [pc, #88]	; (8002e54 <OC4Config+0xcc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d107      	bne.n	8002e10 <OC4Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <OC4Config+0xd0>)
 8002e04:	401a      	ands	r2, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	019b      	lsls	r3, r3, #6
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0011      	movs	r1, r2
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7ff fd47 	bl	80028b8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	0018      	movs	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b006      	add	sp, #24
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	ffffefff 	.word	0xffffefff
 8002e40:	fffffcff 	.word	0xfffffcff
 8002e44:	ffff8fff 	.word	0xffff8fff
 8002e48:	ffffdfff 	.word	0xffffdfff
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800
 8002e58:	ffffbfff 	.word	0xffffbfff

08002e5c <LL_USART_IsEnabled>:
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <LL_USART_IsEnabled+0x18>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <LL_USART_IsEnabled+0x1a>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <LL_USART_SetStopBitsLength>:
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <LL_USART_SetStopBitsLength+0x24>)
 8002e90:	401a      	ands	r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	605a      	str	r2, [r3, #4]
}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b002      	add	sp, #8
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	ffffcfff 	.word	0xffffcfff

08002ea8 <LL_USART_SetHWFlowCtrl>:
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <LL_USART_SetHWFlowCtrl+0x24>)
 8002eb8:	401a      	ands	r2, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	fffffcff 	.word	0xfffffcff

08002ed0 <LL_USART_SetBaudRate>:
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d11c      	bne.n	8002f22 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	005a      	lsls	r2, r3, #1
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	18d3      	adds	r3, r2, r3
 8002ef2:	6839      	ldr	r1, [r7, #0]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7fd f907 	bl	8000108 <__udivsi3>
 8002efa:	0003      	movs	r3, r0
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	4a10      	ldr	r2, [pc, #64]	; (8002f44 <LL_USART_SetBaudRate+0x74>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	085b      	lsrs	r3, r3, #1
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	001a      	movs	r2, r3
 8002f10:	2307      	movs	r3, #7
 8002f12:	4013      	ands	r3, r2
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	60da      	str	r2, [r3, #12]
}
 8002f20:	e00c      	b.n	8002f3c <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	085a      	lsrs	r2, r3, #1
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	18d3      	adds	r3, r2, r3
 8002f2a:	6839      	ldr	r1, [r7, #0]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7fd f8eb 	bl	8000108 <__udivsi3>
 8002f32:	0003      	movs	r3, r0
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	001a      	movs	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	60da      	str	r2, [r3, #12]
}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b006      	add	sp, #24
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	0000fff0 	.word	0x0000fff0

08002f48 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002f52:	230f      	movs	r3, #15
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7ff ff7b 	bl	8002e5c <LL_USART_IsEnabled>
 8002f66:	1e03      	subs	r3, r0, #0
 8002f68:	d13b      	bne.n	8002fe2 <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <LL_USART_Init+0xa8>)
 8002f70:	401a      	ands	r2, r3
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6859      	ldr	r1, [r3, #4]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	4319      	orrs	r1, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4319      	orrs	r1, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	430b      	orrs	r3, r1
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0011      	movs	r1, r2
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff ff72 	bl	8002e80 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0011      	movs	r1, r2
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff ff7f 	bl	8002ea8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a11      	ldr	r2, [pc, #68]	; (8002ff4 <LL_USART_Init+0xac>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d104      	bne.n	8002fbc <LL_USART_Init+0x74>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f7ff fb6c 	bl	8002690 <LL_RCC_GetUSARTClockFreq>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00f      	beq.n	8002fe2 <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 8002fca:	230f      	movs	r3, #15
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff77 	bl	8002ed0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002fe2:	230f      	movs	r3, #15
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	781b      	ldrb	r3, [r3, #0]
}
 8002fe8:	0018      	movs	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b004      	add	sp, #16
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	ffff69f3 	.word	0xffff69f3
 8002ff4:	40013800 	.word	0x40013800

08002ff8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7fd f87f 	bl	8000108 <__udivsi3>
 800300a:	0003      	movs	r3, r0
 800300c:	001a      	movs	r2, r3
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <LL_InitTick+0x30>)
 8003010:	3a01      	subs	r2, #1
 8003012:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003014:	4b04      	ldr	r3, [pc, #16]	; (8003028 <LL_InitTick+0x30>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301a:	4b03      	ldr	r3, [pc, #12]	; (8003028 <LL_InitTick+0x30>)
 800301c:	2205      	movs	r2, #5
 800301e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}
 8003028:	e000e010 	.word	0xe000e010

0800302c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003034:	23fa      	movs	r3, #250	; 0xfa
 8003036:	009a      	lsls	r2, r3, #2
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	0011      	movs	r1, r2
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff ffdb 	bl	8002ff8 <LL_InitTick>
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b002      	add	sp, #8
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <LL_SetSystemCoreClock+0x18>)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	601a      	str	r2, [r3, #0]
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b002      	add	sp, #8
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	20000000 	.word	0x20000000

08003068 <_ZL10DelayMicrom>:
 */

#include "ds18b20.h"

__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <_ZL10DelayMicrom+0x38>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	490b      	ldr	r1, [pc, #44]	; (80030a4 <_ZL10DelayMicrom+0x3c>)
 8003076:	0018      	movs	r0, r3
 8003078:	f7fd f846 	bl	8000108 <__udivsi3>
 800307c:	0003      	movs	r3, r0
 800307e:	001a      	movs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4353      	muls	r3, r2
 8003084:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	1e5a      	subs	r2, r3, #1
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	1e5a      	subs	r2, r3, #1
 800308e:	4193      	sbcs	r3, r2
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d000      	beq.n	8003098 <_ZL10DelayMicrom+0x30>
 8003096:	e7f6      	b.n	8003086 <_ZL10DelayMicrom+0x1e>
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	b002      	add	sp, #8
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000000 	.word	0x20000000
 80030a4:	00895440 	.word	0x00895440

080030a8 <_ZN7ds18b205ResetEv>:
uint8_t ds18b20::Reset(void)
{
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	uint16_t status;
	RESET_PIN; //������ �������
 80030b0:	2390      	movs	r3, #144	; 0x90
 80030b2:	05db      	lsls	r3, r3, #23
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	2390      	movs	r3, #144	; 0x90
 80030b8:	05db      	lsls	r3, r3, #23
 80030ba:	2110      	movs	r1, #16
 80030bc:	438a      	bics	r2, r1
 80030be:	615a      	str	r2, [r3, #20]
	DelayMicro(485);//�������� ��� ������� �� 480 �����������
 80030c0:	23e6      	movs	r3, #230	; 0xe6
 80030c2:	33ff      	adds	r3, #255	; 0xff
 80030c4:	0018      	movs	r0, r3
 80030c6:	f7ff ffcf 	bl	8003068 <_ZL10DelayMicrom>
	SET_PIN; //������� �������
 80030ca:	2390      	movs	r3, #144	; 0x90
 80030cc:	05db      	lsls	r3, r3, #23
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	2390      	movs	r3, #144	; 0x90
 80030d2:	05db      	lsls	r3, r3, #23
 80030d4:	2110      	movs	r1, #16
 80030d6:	430a      	orrs	r2, r1
 80030d8:	615a      	str	r2, [r3, #20]
	DelayMicro(65);//�������� ��� ������� �� 60 �����������
 80030da:	2041      	movs	r0, #65	; 0x41
 80030dc:	f7ff ffc4 	bl	8003068 <_ZL10DelayMicrom>
	status = READ_BIT_DS;//��������� �������
 80030e0:	2390      	movs	r3, #144	; 0x90
 80030e2:	05db      	lsls	r3, r3, #23
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	240e      	movs	r4, #14
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	2110      	movs	r1, #16
 80030ee:	400a      	ands	r2, r1
 80030f0:	801a      	strh	r2, [r3, #0]
	DelayMicro(500);//�������� ��� ������� �� 480 �����������
 80030f2:	23fa      	movs	r3, #250	; 0xfa
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	0018      	movs	r0, r3
 80030f8:	f7ff ffb6 	bl	8003068 <_ZL10DelayMicrom>
	return (status ? 1 : 0);//������ ���������
 80030fc:	193b      	adds	r3, r7, r4
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <_ZN7ds18b205ResetEv+0x60>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <_ZN7ds18b205ResetEv+0x62>
 8003108:	2300      	movs	r3, #0
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b005      	add	sp, #20
 8003110:	bd90      	pop	{r4, r7, pc}

08003112 <_ZN7ds18b207ReadBitEv>:

uint8_t ds18b20::ReadBit(void)
{
 8003112:	b590      	push	{r4, r7, lr}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 800311a:	230f      	movs	r3, #15
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
	RESET_PIN; //������ �������
 8003122:	2390      	movs	r3, #144	; 0x90
 8003124:	05db      	lsls	r3, r3, #23
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	2390      	movs	r3, #144	; 0x90
 800312a:	05db      	lsls	r3, r3, #23
 800312c:	2110      	movs	r1, #16
 800312e:	438a      	bics	r2, r1
 8003130:	615a      	str	r2, [r3, #20]
	DelayMicro(2);
 8003132:	2002      	movs	r0, #2
 8003134:	f7ff ff98 	bl	8003068 <_ZL10DelayMicrom>
	SET_PIN; //������� �������
 8003138:	2390      	movs	r3, #144	; 0x90
 800313a:	05db      	lsls	r3, r3, #23
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	2390      	movs	r3, #144	; 0x90
 8003140:	05db      	lsls	r3, r3, #23
 8003142:	2110      	movs	r1, #16
 8003144:	430a      	orrs	r2, r1
 8003146:	615a      	str	r2, [r3, #20]
	DelayMicro(13);
 8003148:	200d      	movs	r0, #13
 800314a:	f7ff ff8d 	bl	8003068 <_ZL10DelayMicrom>
	bit = (READ_BIT_DS ? 1 : 0);//��������� �������
 800314e:	2390      	movs	r3, #144	; 0x90
 8003150:	05db      	lsls	r3, r3, #23
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2210      	movs	r2, #16
 8003156:	4013      	ands	r3, r2
 8003158:	d001      	beq.n	800315e <_ZN7ds18b207ReadBitEv+0x4c>
 800315a:	2201      	movs	r2, #1
 800315c:	e000      	b.n	8003160 <_ZN7ds18b207ReadBitEv+0x4e>
 800315e:	2200      	movs	r2, #0
 8003160:	240f      	movs	r4, #15
 8003162:	193b      	adds	r3, r7, r4
 8003164:	701a      	strb	r2, [r3, #0]
	DelayMicro(45);
 8003166:	202d      	movs	r0, #45	; 0x2d
 8003168:	f7ff ff7e 	bl	8003068 <_ZL10DelayMicrom>
	return bit;
 800316c:	193b      	adds	r3, r7, r4
 800316e:	781b      	ldrb	r3, [r3, #0]
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b005      	add	sp, #20
 8003176:	bd90      	pop	{r4, r7, pc}

08003178 <_ZN7ds18b208ReadByteEv>:

uint8_t ds18b20::ReadByte(void)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8003180:	230f      	movs	r3, #15
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i <= 7; i++)
 8003188:	230e      	movs	r3, #14
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	240e      	movs	r4, #14
 8003192:	193b      	adds	r3, r7, r4
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b07      	cmp	r3, #7
 8003198:	d817      	bhi.n	80031ca <_ZN7ds18b208ReadByteEv+0x52>
	data += this->ReadBit() << i;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	0018      	movs	r0, r3
 800319e:	f7ff ffb8 	bl	8003112 <_ZN7ds18b207ReadBitEv>
 80031a2:	0003      	movs	r3, r0
 80031a4:	001a      	movs	r2, r3
 80031a6:	0020      	movs	r0, r4
 80031a8:	183b      	adds	r3, r7, r0
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	409a      	lsls	r2, r3
 80031ae:	0013      	movs	r3, r2
 80031b0:	b2d9      	uxtb	r1, r3
 80031b2:	220f      	movs	r2, #15
 80031b4:	18bb      	adds	r3, r7, r2
 80031b6:	18ba      	adds	r2, r7, r2
 80031b8:	7812      	ldrb	r2, [r2, #0]
 80031ba:	188a      	adds	r2, r1, r2
 80031bc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i <= 7; i++)
 80031be:	183b      	adds	r3, r7, r0
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	183b      	adds	r3, r7, r0
 80031c4:	3201      	adds	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e7e2      	b.n	8003190 <_ZN7ds18b208ReadByteEv+0x18>
	return data;
 80031ca:	230f      	movs	r3, #15
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	781b      	ldrb	r3, [r3, #0]
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b005      	add	sp, #20
 80031d6:	bd90      	pop	{r4, r7, pc}

080031d8 <_ZN7ds18b208WriteBitEh>:

void ds18b20::WriteBit(uint8_t bit)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	000a      	movs	r2, r1
 80031e2:	1cfb      	adds	r3, r7, #3
 80031e4:	701a      	strb	r2, [r3, #0]
	RESET_PIN;
 80031e6:	2390      	movs	r3, #144	; 0x90
 80031e8:	05db      	lsls	r3, r3, #23
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	2390      	movs	r3, #144	; 0x90
 80031ee:	05db      	lsls	r3, r3, #23
 80031f0:	2110      	movs	r1, #16
 80031f2:	438a      	bics	r2, r1
 80031f4:	615a      	str	r2, [r3, #20]
	DelayMicro(bit ? 3 : 65);
 80031f6:	1cfb      	adds	r3, r7, #3
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <_ZN7ds18b208WriteBitEh+0x2a>
 80031fe:	2303      	movs	r3, #3
 8003200:	e000      	b.n	8003204 <_ZN7ds18b208WriteBitEh+0x2c>
 8003202:	2341      	movs	r3, #65	; 0x41
 8003204:	0018      	movs	r0, r3
 8003206:	f7ff ff2f 	bl	8003068 <_ZL10DelayMicrom>
	SET_PIN;
 800320a:	2390      	movs	r3, #144	; 0x90
 800320c:	05db      	lsls	r3, r3, #23
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	2390      	movs	r3, #144	; 0x90
 8003212:	05db      	lsls	r3, r3, #23
 8003214:	2110      	movs	r1, #16
 8003216:	430a      	orrs	r2, r1
 8003218:	615a      	str	r2, [r3, #20]
	DelayMicro(bit ? 65 : 3);
 800321a:	1cfb      	adds	r3, r7, #3
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <_ZN7ds18b208WriteBitEh+0x4e>
 8003222:	2341      	movs	r3, #65	; 0x41
 8003224:	e000      	b.n	8003228 <_ZN7ds18b208WriteBitEh+0x50>
 8003226:	2303      	movs	r3, #3
 8003228:	0018      	movs	r0, r3
 800322a:	f7ff ff1d 	bl	8003068 <_ZL10DelayMicrom>
}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	46bd      	mov	sp, r7
 8003232:	b002      	add	sp, #8
 8003234:	bd80      	pop	{r7, pc}

08003236 <_ZN7ds18b209WriteByteEh>:

void ds18b20::WriteByte(uint8_t dt)
{
 8003236:	b590      	push	{r4, r7, lr}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	000a      	movs	r2, r1
 8003240:	1cfb      	adds	r3, r7, #3
 8003242:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
 8003244:	230f      	movs	r3, #15
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	240f      	movs	r4, #15
 800324e:	193b      	adds	r3, r7, r4
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b07      	cmp	r3, #7
 8003254:	d817      	bhi.n	8003286 <_ZN7ds18b209WriteByteEh+0x50>
	{
		this->WriteBit(dt >> i & 1);
 8003256:	1cfb      	adds	r3, r7, #3
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	193b      	adds	r3, r7, r4
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	411a      	asrs	r2, r3
 8003260:	0013      	movs	r3, r2
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2201      	movs	r2, #1
 8003266:	4013      	ands	r3, r2
 8003268:	b2da      	uxtb	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0011      	movs	r1, r2
 800326e:	0018      	movs	r0, r3
 8003270:	f7ff ffb2 	bl	80031d8 <_ZN7ds18b208WriteBitEh>
		//Delay Protection
		DelayMicro(5);
 8003274:	2005      	movs	r0, #5
 8003276:	f7ff fef7 	bl	8003068 <_ZL10DelayMicrom>
	for (uint8_t i = 0; i < 8; i++)
 800327a:	193b      	adds	r3, r7, r4
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	193b      	adds	r3, r7, r4
 8003280:	3201      	adds	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e7e2      	b.n	800324c <_ZN7ds18b209WriteByteEh+0x16>
	}
}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	b005      	add	sp, #20
 800328c:	bd90      	pop	{r4, r7, pc}

0800328e <_ZN7ds18b204initE7skipRom>:

uint8_t ds18b20::init(skipRom mode)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
	if(this->Reset()) return 1;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	0018      	movs	r0, r3
 800329c:	f7ff ff04 	bl	80030a8 <_ZN7ds18b205ResetEv>
 80032a0:	0003      	movs	r3, r0
 80032a2:	1e5a      	subs	r2, r3, #1
 80032a4:	4193      	sbcs	r3, r2
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <_ZN7ds18b204initE7skipRom+0x22>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e01c      	b.n	80032ea <_ZN7ds18b204initE7skipRom+0x5c>
	if(mode==skipRom::kSkip)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d118      	bne.n	80032e8 <_ZN7ds18b204initE7skipRom+0x5a>
	{
		//SKIP ROM
		this->WriteByte(0xCC);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	21cc      	movs	r1, #204	; 0xcc
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7ff ffbb 	bl	8003236 <_ZN7ds18b209WriteByteEh>
		//WRITE SCRATCHPAD
		this->WriteByte(0x4E);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	214e      	movs	r1, #78	; 0x4e
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff ffb6 	bl	8003236 <_ZN7ds18b209WriteByteEh>
		//TH REGISTER 100 ��������
		this->WriteByte(0x64);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2164      	movs	r1, #100	; 0x64
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7ff ffb1 	bl	8003236 <_ZN7ds18b209WriteByteEh>
		//TL REGISTER - 30 ��������
		this->WriteByte(0x9E);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	219e      	movs	r1, #158	; 0x9e
 80032d8:	0018      	movs	r0, r3
 80032da:	f7ff ffac 	bl	8003236 <_ZN7ds18b209WriteByteEh>
		//Resolution 12 bit
		this->WriteByte(resolution::k12Bit);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	217f      	movs	r1, #127	; 0x7f
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7ff ffa7 	bl	8003236 <_ZN7ds18b209WriteByteEh>
	}
	return 0;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b002      	add	sp, #8
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <_ZN7ds18b2016MeasureTemperCmdE7skipRomh>:

void ds18b20::MeasureTemperCmd(skipRom mode, uint8_t DevNum)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	701a      	strb	r2, [r3, #0]
	this->Reset();
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	0018      	movs	r0, r3
 8003304:	f7ff fed0 	bl	80030a8 <_ZN7ds18b205ResetEv>
	if(mode==skipRom::kSkip)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d104      	bne.n	8003318 <_ZN7ds18b2016MeasureTemperCmdE7skipRomh+0x26>
	{
		//SKIP ROM
		this->WriteByte(0xCC);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	21cc      	movs	r1, #204	; 0xcc
 8003312:	0018      	movs	r0, r3
 8003314:	f7ff ff8f 	bl	8003236 <_ZN7ds18b209WriteByteEh>
	}
	//CONVERT T
	this->WriteByte(0x44);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2144      	movs	r1, #68	; 0x44
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff ff8a 	bl	8003236 <_ZN7ds18b209WriteByteEh>
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b004      	add	sp, #16
 8003328:	bd80      	pop	{r7, pc}

0800332a <_ZN7ds18b2013ReadStratcpadE7skipRomPhh>:

void ds18b20::ReadStratcpad(skipRom mode, uint8_t *Data, uint8_t DevNum)
{
 800332a:	b5b0      	push	{r4, r5, r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	001a      	movs	r2, r3
 8003338:	1cfb      	adds	r3, r7, #3
 800333a:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  this->Reset();
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	0018      	movs	r0, r3
 8003340:	f7ff feb2 	bl	80030a8 <_ZN7ds18b205ResetEv>
  if(mode==skipRom::kSkip)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d104      	bne.n	8003354 <_ZN7ds18b2013ReadStratcpadE7skipRomPhh+0x2a>
  {
    //SKIP ROM
	  this->WriteByte(0xCC);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	21cc      	movs	r1, #204	; 0xcc
 800334e:	0018      	movs	r0, r3
 8003350:	f7ff ff71 	bl	8003236 <_ZN7ds18b209WriteByteEh>
  }
  //READ SCRATCHPAD
  this->WriteByte(0xBE);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	21be      	movs	r1, #190	; 0xbe
 8003358:	0018      	movs	r0, r3
 800335a:	f7ff ff6c 	bl	8003236 <_ZN7ds18b209WriteByteEh>
  for(i=0;i<8;i++)
 800335e:	2317      	movs	r3, #23
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	2517      	movs	r5, #23
 8003368:	197b      	adds	r3, r7, r5
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b07      	cmp	r3, #7
 800336e:	d80f      	bhi.n	8003390 <_ZN7ds18b2013ReadStratcpadE7skipRomPhh+0x66>
  {
    Data[i] = this->ReadByte();
 8003370:	197b      	adds	r3, r7, r5
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	18d4      	adds	r4, r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	0018      	movs	r0, r3
 800337c:	f7ff fefc 	bl	8003178 <_ZN7ds18b208ReadByteEv>
 8003380:	0003      	movs	r3, r0
 8003382:	7023      	strb	r3, [r4, #0]
  for(i=0;i<8;i++)
 8003384:	197b      	adds	r3, r7, r5
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	197b      	adds	r3, r7, r5
 800338a:	3201      	adds	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e7ea      	b.n	8003366 <_ZN7ds18b2013ReadStratcpadE7skipRomPhh+0x3c>
  }
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b006      	add	sp, #24
 8003396:	bdb0      	pop	{r4, r5, r7, pc}

08003398 <_ZN7ds18b207ConvertEt>:
  if (dt&(1<<11)) return 1;
  else return 0;
}
//----------------------------------------------------------
float ds18b20::Convert(uint16_t dt)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	000a      	movs	r2, r1
 80033a2:	1cbb      	adds	r3, r7, #2
 80033a4:	801a      	strh	r2, [r3, #0]
  float t;
  t = (float) ((dt&0x07FF)>>4); //��������� �������� � ������� ����
 80033a6:	1cbb      	adds	r3, r7, #2
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	001a      	movs	r2, r3
 80033b0:	237f      	movs	r3, #127	; 0x7f
 80033b2:	4013      	ands	r3, r2
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7fd fdf5 	bl	8000fa4 <__aeabi_i2f>
 80033ba:	1c03      	adds	r3, r0, #0
 80033bc:	60fb      	str	r3, [r7, #12]
  //�������� ������� �����
  t += (float)(dt&0x000F) / 16.0f;
 80033be:	1cbb      	adds	r3, r7, #2
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	220f      	movs	r2, #15
 80033c4:	4013      	ands	r3, r2
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7fd fdec 	bl	8000fa4 <__aeabi_i2f>
 80033cc:	1c03      	adds	r3, r0, #0
 80033ce:	2183      	movs	r1, #131	; 0x83
 80033d0:	05c9      	lsls	r1, r1, #23
 80033d2:	1c18      	adds	r0, r3, #0
 80033d4:	f7fd f92a 	bl	800062c <__aeabi_fdiv>
 80033d8:	1c03      	adds	r3, r0, #0
 80033da:	1c19      	adds	r1, r3, #0
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7fc ff87 	bl	80002f0 <__aeabi_fadd>
 80033e2:	1c03      	adds	r3, r0, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  return t;
 80033e6:	68fb      	ldr	r3, [r7, #12]
}
 80033e8:	1c18      	adds	r0, r3, #0
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b004      	add	sp, #16
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <_ZN7ds18b20C1Ev>:


ds18b20::ds18b20() {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}

08003402 <_ZN3pid12calculatePidEbff>:

	float calculatePid(bool R, float ref, float fb)
 8003402:	b590      	push	{r4, r7, lr}
 8003404:	b089      	sub	sp, #36	; 0x24
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	200b      	movs	r0, #11
 8003410:	183b      	adds	r3, r7, r0
 8003412:	1c0a      	adds	r2, r1, #0
 8003414:	701a      	strb	r2, [r3, #0]
	{
	  float Up1, Ud, Out1;
	  float Out;
	  if (R)
 8003416:	183b      	adds	r3, r7, r0
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00c      	beq.n	8003438 <_ZN3pid12calculatePidEbff+0x36>
	  {
	    Out    = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
	    this->Up     = 0;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
	    this->Ui     = 0;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	605a      	str	r2, [r3, #4]
	    this->SatErr = 0;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
	    return Out;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	e06c      	b.n	8003512 <_ZN3pid12calculatePidEbff+0x110>
	  }

	  Up1       = this->Kp * (ref - fb);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68dc      	ldr	r4, [r3, #12]
 800343c:	6839      	ldr	r1, [r7, #0]
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd fbe2 	bl	8000c08 <__aeabi_fsub>
 8003444:	1c03      	adds	r3, r0, #0
 8003446:	1c19      	adds	r1, r3, #0
 8003448:	1c20      	adds	r0, r4, #0
 800344a:	f7fd fab7 	bl	80009bc <__aeabi_fmul>
 800344e:	1c03      	adds	r3, r0, #0
 8003450:	61fb      	str	r3, [r7, #28]
	  this->Ui     = this->Ui + (this->Ki * Up1) + (this->Kc * this->SatErr);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685c      	ldr	r4, [r3, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	69f9      	ldr	r1, [r7, #28]
 800345c:	1c18      	adds	r0, r3, #0
 800345e:	f7fd faad 	bl	80009bc <__aeabi_fmul>
 8003462:	1c03      	adds	r3, r0, #0
 8003464:	1c19      	adds	r1, r3, #0
 8003466:	1c20      	adds	r0, r4, #0
 8003468:	f7fc ff42 	bl	80002f0 <__aeabi_fadd>
 800346c:	1c03      	adds	r3, r0, #0
 800346e:	1c1c      	adds	r4, r3, #0
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	1c19      	adds	r1, r3, #0
 800347a:	1c10      	adds	r0, r2, #0
 800347c:	f7fd fa9e 	bl	80009bc <__aeabi_fmul>
 8003480:	1c03      	adds	r3, r0, #0
 8003482:	1c19      	adds	r1, r3, #0
 8003484:	1c20      	adds	r0, r4, #0
 8003486:	f7fc ff33 	bl	80002f0 <__aeabi_fadd>
 800348a:	1c03      	adds	r3, r0, #0
 800348c:	1c1a      	adds	r2, r3, #0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]
	  Ud        = (this->Kd *  (Up1 - this->Up));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	699c      	ldr	r4, [r3, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	1c19      	adds	r1, r3, #0
 800349c:	69f8      	ldr	r0, [r7, #28]
 800349e:	f7fd fbb3 	bl	8000c08 <__aeabi_fsub>
 80034a2:	1c03      	adds	r3, r0, #0
 80034a4:	1c19      	adds	r1, r3, #0
 80034a6:	1c20      	adds	r0, r4, #0
 80034a8:	f7fd fa88 	bl	80009bc <__aeabi_fmul>
 80034ac:	1c03      	adds	r3, r0, #0
 80034ae:	61bb      	str	r3, [r7, #24]
	  Out1      = Up1 + this->Ui + Ud;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	69f9      	ldr	r1, [r7, #28]
 80034b6:	1c18      	adds	r0, r3, #0
 80034b8:	f7fc ff1a 	bl	80002f0 <__aeabi_fadd>
 80034bc:	1c03      	adds	r3, r0, #0
 80034be:	1c19      	adds	r1, r3, #0
 80034c0:	69b8      	ldr	r0, [r7, #24]
 80034c2:	f7fc ff15 	bl	80002f0 <__aeabi_fadd>
 80034c6:	1c03      	adds	r3, r0, #0
 80034c8:	617b      	str	r3, [r7, #20]
	  Out    = _sat(Out1, this->Max, this->Min);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	1c19      	adds	r1, r3, #0
 80034d0:	6978      	ldr	r0, [r7, #20]
 80034d2:	f7fc fecb 	bl	800026c <__aeabi_fcmpgt>
 80034d6:	1e03      	subs	r3, r0, #0
 80034d8:	d002      	beq.n	80034e0 <_ZN3pid12calculatePidEbff+0xde>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	e00b      	b.n	80034f8 <_ZN3pid12calculatePidEbff+0xf6>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	1c19      	adds	r1, r3, #0
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7fc feac 	bl	8000244 <__aeabi_fcmplt>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d002      	beq.n	80034f6 <_ZN3pid12calculatePidEbff+0xf4>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	e000      	b.n	80034f8 <_ZN3pid12calculatePidEbff+0xf6>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	613b      	str	r3, [r7, #16]
	  this->SatErr = Out - Out1;
 80034fa:	6979      	ldr	r1, [r7, #20]
 80034fc:	6938      	ldr	r0, [r7, #16]
 80034fe:	f7fd fb83 	bl	8000c08 <__aeabi_fsub>
 8003502:	1c03      	adds	r3, r0, #0
 8003504:	1c1a      	adds	r2, r3, #0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	609a      	str	r2, [r3, #8]
	  this->Up     = Up1;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	601a      	str	r2, [r3, #0]
	  return Out;
 8003510:	693b      	ldr	r3, [r7, #16]
	}
 8003512:	1c18      	adds	r0, r3, #0
 8003514:	46bd      	mov	sp, r7
 8003516:	b009      	add	sp, #36	; 0x24
 8003518:	bd90      	pop	{r4, r7, pc}

0800351a <LL_TIM_DisableARRPreload>:
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	4393      	bics	r3, r2
 800352a:	001a      	movs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	601a      	str	r2, [r3, #0]
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b002      	add	sp, #8
 8003536:	bd80      	pop	{r7, pc}

08003538 <LL_TIM_OC_DisableFast>:
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d01e      	beq.n	8003586 <LL_TIM_OC_DisableFast+0x4e>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b04      	cmp	r3, #4
 800354c:	d019      	beq.n	8003582 <LL_TIM_OC_DisableFast+0x4a>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b10      	cmp	r3, #16
 8003552:	d014      	beq.n	800357e <LL_TIM_OC_DisableFast+0x46>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	d00f      	beq.n	800357a <LL_TIM_OC_DisableFast+0x42>
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	429a      	cmp	r2, r3
 8003562:	d008      	beq.n	8003576 <LL_TIM_OC_DisableFast+0x3e>
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	429a      	cmp	r2, r3
 800356c:	d101      	bne.n	8003572 <LL_TIM_OC_DisableFast+0x3a>
 800356e:	2305      	movs	r3, #5
 8003570:	e00a      	b.n	8003588 <LL_TIM_OC_DisableFast+0x50>
 8003572:	2306      	movs	r3, #6
 8003574:	e008      	b.n	8003588 <LL_TIM_OC_DisableFast+0x50>
 8003576:	2304      	movs	r3, #4
 8003578:	e006      	b.n	8003588 <LL_TIM_OC_DisableFast+0x50>
 800357a:	2303      	movs	r3, #3
 800357c:	e004      	b.n	8003588 <LL_TIM_OC_DisableFast+0x50>
 800357e:	2302      	movs	r3, #2
 8003580:	e002      	b.n	8003588 <LL_TIM_OC_DisableFast+0x50>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <LL_TIM_OC_DisableFast+0x50>
 8003586:	2300      	movs	r3, #0
 8003588:	200f      	movs	r0, #15
 800358a:	183a      	adds	r2, r7, r0
 800358c:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3318      	adds	r3, #24
 8003592:	0019      	movs	r1, r3
 8003594:	183b      	adds	r3, r7, r0
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <LL_TIM_OC_DisableFast+0x8c>)
 800359a:	5cd3      	ldrb	r3, [r2, r3]
 800359c:	18cb      	adds	r3, r1, r3
 800359e:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	183a      	adds	r2, r7, r0
 80035a6:	7812      	ldrb	r2, [r2, #0]
 80035a8:	4907      	ldr	r1, [pc, #28]	; (80035c8 <LL_TIM_OC_DisableFast+0x90>)
 80035aa:	5c8a      	ldrb	r2, [r1, r2]
 80035ac:	0011      	movs	r1, r2
 80035ae:	2204      	movs	r2, #4
 80035b0:	408a      	lsls	r2, r1
 80035b2:	43d2      	mvns	r2, r2
 80035b4:	401a      	ands	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	601a      	str	r2, [r3, #0]
}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	b004      	add	sp, #16
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	08003f48 	.word	0x08003f48
 80035c8:	08003f50 	.word	0x08003f50

080035cc <LL_TIM_OC_EnablePreload>:
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d01e      	beq.n	800361a <LL_TIM_OC_EnablePreload+0x4e>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d019      	beq.n	8003616 <LL_TIM_OC_EnablePreload+0x4a>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b10      	cmp	r3, #16
 80035e6:	d014      	beq.n	8003612 <LL_TIM_OC_EnablePreload+0x46>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d00f      	beq.n	800360e <LL_TIM_OC_EnablePreload+0x42>
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d008      	beq.n	800360a <LL_TIM_OC_EnablePreload+0x3e>
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	429a      	cmp	r2, r3
 8003600:	d101      	bne.n	8003606 <LL_TIM_OC_EnablePreload+0x3a>
 8003602:	2305      	movs	r3, #5
 8003604:	e00a      	b.n	800361c <LL_TIM_OC_EnablePreload+0x50>
 8003606:	2306      	movs	r3, #6
 8003608:	e008      	b.n	800361c <LL_TIM_OC_EnablePreload+0x50>
 800360a:	2304      	movs	r3, #4
 800360c:	e006      	b.n	800361c <LL_TIM_OC_EnablePreload+0x50>
 800360e:	2303      	movs	r3, #3
 8003610:	e004      	b.n	800361c <LL_TIM_OC_EnablePreload+0x50>
 8003612:	2302      	movs	r3, #2
 8003614:	e002      	b.n	800361c <LL_TIM_OC_EnablePreload+0x50>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <LL_TIM_OC_EnablePreload+0x50>
 800361a:	2300      	movs	r3, #0
 800361c:	200f      	movs	r0, #15
 800361e:	183a      	adds	r2, r7, r0
 8003620:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3318      	adds	r3, #24
 8003626:	0019      	movs	r1, r3
 8003628:	183b      	adds	r3, r7, r0
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	4a09      	ldr	r2, [pc, #36]	; (8003654 <LL_TIM_OC_EnablePreload+0x88>)
 800362e:	5cd3      	ldrb	r3, [r2, r3]
 8003630:	18cb      	adds	r3, r1, r3
 8003632:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	183b      	adds	r3, r7, r0
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	4906      	ldr	r1, [pc, #24]	; (8003658 <LL_TIM_OC_EnablePreload+0x8c>)
 800363e:	5ccb      	ldrb	r3, [r1, r3]
 8003640:	0019      	movs	r1, r3
 8003642:	2308      	movs	r3, #8
 8003644:	408b      	lsls	r3, r1
 8003646:	431a      	orrs	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	601a      	str	r2, [r3, #0]
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b004      	add	sp, #16
 8003652:	bd80      	pop	{r7, pc}
 8003654:	08003f48 	.word	0x08003f48
 8003658:	08003f50 	.word	0x08003f50

0800365c <_ZN8regulPin8regulateEff>:

#define   _IQ24(A)      (long) ((A) * 16777216.0L)
#define __IQmpy(A, B, Q)         (long) (((long long) (A) * (long long) (B)) >> Q)

uint32_t regulPin::regulate(float ref, float fb)
{
 800365c:	b5b0      	push	{r4, r5, r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af00      	add	r7, sp, #0
 8003662:	61f8      	str	r0, [r7, #28]
 8003664:	61b9      	str	r1, [r7, #24]
 8003666:	617a      	str	r2, [r7, #20]
	float result = 0.;
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
	long result_iq = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	623b      	str	r3, [r7, #32]
	if(*(this->cur_freq) != this->prev_freq)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	429a      	cmp	r2, r3
 800367c:	d008      	beq.n	8003690 <_ZN8regulPin8regulateEff+0x34>
		this->pwmInit(this->timer_freq, *(this->cur_freq));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f880 	bl	8003790 <_ZN8regulPin7pwmInitEmm>

	result = this->calculatePid(false, ref, fb);
 8003690:	69f8      	ldr	r0, [r7, #28]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	2100      	movs	r1, #0
 8003698:	f7ff feb3 	bl	8003402 <_ZN3pid12calculatePidEbff>
 800369c:	1c03      	adds	r3, r0, #0
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
	result_iq = _IQ24(result);
 80036a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036a2:	f7fd ffb1 	bl	8001608 <__aeabi_f2d>
 80036a6:	2200      	movs	r2, #0
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <_ZN8regulPin8regulateEff+0x98>)
 80036aa:	f7fd fd0b 	bl	80010c4 <__aeabi_dmul>
 80036ae:	0002      	movs	r2, r0
 80036b0:	000b      	movs	r3, r1
 80036b2:	0010      	movs	r0, r2
 80036b4:	0019      	movs	r1, r3
 80036b6:	f7fd ff71 	bl	800159c <__aeabi_d2iz>
 80036ba:	0003      	movs	r3, r0
 80036bc:	623b      	str	r3, [r7, #32]
	return __IQmpy(result_iq, (int)this->autoreload, 24);
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	17db      	asrs	r3, r3, #31
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	17db      	asrs	r3, r3, #31
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68b8      	ldr	r0, [r7, #8]
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	f7fc fddc 	bl	8000294 <__aeabi_lmul>
 80036dc:	0002      	movs	r2, r0
 80036de:	000b      	movs	r3, r1
 80036e0:	0219      	lsls	r1, r3, #8
 80036e2:	0e14      	lsrs	r4, r2, #24
 80036e4:	430c      	orrs	r4, r1
 80036e6:	161d      	asrs	r5, r3, #24
 80036e8:	0023      	movs	r3, r4

}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b00a      	add	sp, #40	; 0x28
 80036f0:	bdb0      	pop	{r4, r5, r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	41700000 	.word	0x41700000

080036f8 <_ZN8regulPin8regulateEf>:

uint32_t regulPin::regulate(float duty)
{
 80036f8:	b5b0      	push	{r4, r5, r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6178      	str	r0, [r7, #20]
 8003700:	6139      	str	r1, [r7, #16]
	long result_iq = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
	if(duty > 1.) duty = 1.;
 8003706:	21fe      	movs	r1, #254	; 0xfe
 8003708:	0589      	lsls	r1, r1, #22
 800370a:	6938      	ldr	r0, [r7, #16]
 800370c:	f7fc fdae 	bl	800026c <__aeabi_fcmpgt>
 8003710:	1e03      	subs	r3, r0, #0
 8003712:	d002      	beq.n	800371a <_ZN8regulPin8regulateEf+0x22>
 8003714:	23fe      	movs	r3, #254	; 0xfe
 8003716:	059b      	lsls	r3, r3, #22
 8003718:	613b      	str	r3, [r7, #16]
	if(*(this->cur_freq) != this->prev_freq)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	429a      	cmp	r2, r3
 8003726:	d008      	beq.n	800373a <_ZN8regulPin8regulateEf+0x42>
		this->pwmInit(this->timer_freq, *(this->cur_freq));
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	0018      	movs	r0, r3
 8003736:	f000 f82b 	bl	8003790 <_ZN8regulPin7pwmInitEmm>


	result_iq = _IQ24(duty);
 800373a:	6938      	ldr	r0, [r7, #16]
 800373c:	f7fd ff64 	bl	8001608 <__aeabi_f2d>
 8003740:	2200      	movs	r2, #0
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <_ZN8regulPin8regulateEf+0x94>)
 8003744:	f7fd fcbe 	bl	80010c4 <__aeabi_dmul>
 8003748:	0002      	movs	r2, r0
 800374a:	000b      	movs	r3, r1
 800374c:	0010      	movs	r0, r2
 800374e:	0019      	movs	r1, r3
 8003750:	f7fd ff24 	bl	800159c <__aeabi_d2iz>
 8003754:	0003      	movs	r3, r0
 8003756:	61fb      	str	r3, [r7, #28]
	return __IQmpy(result_iq, (int)this->autoreload, 24);
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	17db      	asrs	r3, r3, #31
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	17db      	asrs	r3, r3, #31
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68b8      	ldr	r0, [r7, #8]
 8003770:	68f9      	ldr	r1, [r7, #12]
 8003772:	f7fc fd8f 	bl	8000294 <__aeabi_lmul>
 8003776:	0002      	movs	r2, r0
 8003778:	000b      	movs	r3, r1
 800377a:	0219      	lsls	r1, r3, #8
 800377c:	0e14      	lsrs	r4, r2, #24
 800377e:	430c      	orrs	r4, r1
 8003780:	161d      	asrs	r5, r3, #24
 8003782:	0023      	movs	r3, r4

}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b008      	add	sp, #32
 800378a:	bdb0      	pop	{r4, r5, r7, pc}
 800378c:	41700000 	.word	0x41700000

08003790 <_ZN8regulPin7pwmInitEmm>:

void regulPin::pwmInit(uint32_t timer_freq, uint32_t freq)
{
 8003790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003792:	b095      	sub	sp, #84	; 0x54
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
	this->prev_freq = freq;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t Autoreload;
	uint16_t Prescaler;
	if(freq == 0)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d078      	beq.n	800389a <_ZN8regulPin7pwmInitEmm+0x10a>
		return;
	}
	else
	{
		//Autoreload = _IQ1div(kTimerFreq, (gl_p->system_var.output_5.pwm_frequency.value.all << 1));
		Autoreload = timer_freq / freq;
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	68b8      	ldr	r0, [r7, #8]
 80037ac:	f7fc fcac 	bl	8000108 <__udivsi3>
 80037b0:	0003      	movs	r3, r0
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		Prescaler = 1;
 80037b4:	234a      	movs	r3, #74	; 0x4a
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	2201      	movs	r2, #1
 80037ba:	801a      	strh	r2, [r3, #0]

		while (Autoreload > 0xFFFF)
 80037bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	025b      	lsls	r3, r3, #9
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d30c      	bcc.n	80037e0 <_ZN8regulPin7pwmInitEmm+0x50>
		{
			Autoreload >>= 1;
 80037c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	64fb      	str	r3, [r7, #76]	; 0x4c
			timer_freq >>= 1;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	60bb      	str	r3, [r7, #8]
			Prescaler <<= 1;
 80037d2:	234a      	movs	r3, #74	; 0x4a
 80037d4:	18fa      	adds	r2, r7, r3
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	18db      	adds	r3, r3, r3
 80037dc:	8013      	strh	r3, [r2, #0]
		while (Autoreload > 0xFFFF)
 80037de:	e7ed      	b.n	80037bc <_ZN8regulPin7pwmInitEmm+0x2c>
		}

		Autoreload = Autoreload - 1;
 80037e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e2:	3b01      	subs	r3, #1
 80037e4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Prescaler = Prescaler - 1;
 80037e6:	264a      	movs	r6, #74	; 0x4a
 80037e8:	19bb      	adds	r3, r7, r6
 80037ea:	19ba      	adds	r2, r7, r6
 80037ec:	8812      	ldrh	r2, [r2, #0]
 80037ee:	3a01      	subs	r2, #1
 80037f0:	801a      	strh	r2, [r3, #0]
	}


	this->autoreload = Autoreload;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c


	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80037f8:	2534      	movs	r5, #52	; 0x34
 80037fa:	197b      	adds	r3, r7, r5
 80037fc:	0018      	movs	r0, r3
 80037fe:	2314      	movs	r3, #20
 8003800:	001a      	movs	r2, r3
 8003802:	2100      	movs	r1, #0
 8003804:	f000 fb00 	bl	8003e08 <memset>
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003808:	2414      	movs	r4, #20
 800380a:	193b      	adds	r3, r7, r4
 800380c:	0018      	movs	r0, r3
 800380e:	2320      	movs	r3, #32
 8003810:	001a      	movs	r2, r3
 8003812:	2100      	movs	r1, #0
 8003814:	f000 faf8 	bl	8003e08 <memset>

	TIM_InitStruct.Prescaler = Prescaler;
 8003818:	197b      	adds	r3, r7, r5
 800381a:	19ba      	adds	r2, r7, r6
 800381c:	8812      	ldrh	r2, [r2, #0]
 800381e:	801a      	strh	r2, [r3, #0]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003820:	197b      	adds	r3, r7, r5
 8003822:	2200      	movs	r2, #0
 8003824:	605a      	str	r2, [r3, #4]
	TIM_InitStruct.Autoreload = Autoreload;
 8003826:	197b      	adds	r3, r7, r5
 8003828:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800382a:	609a      	str	r2, [r3, #8]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800382c:	197b      	adds	r3, r7, r5
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
	LL_TIM_Init(TIM14, &TIM_InitStruct);
 8003832:	197b      	adds	r3, r7, r5
 8003834:	4a1b      	ldr	r2, [pc, #108]	; (80038a4 <_ZN8regulPin7pwmInitEmm+0x114>)
 8003836:	0019      	movs	r1, r3
 8003838:	0010      	movs	r0, r2
 800383a:	f7ff f857 	bl	80028ec <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM14);
 800383e:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <_ZN8regulPin7pwmInitEmm+0x114>)
 8003840:	0018      	movs	r0, r3
 8003842:	f7ff fe6a 	bl	800351a <LL_TIM_DisableARRPreload>
	LL_TIM_OC_EnablePreload(TIM14, LL_TIM_CHANNEL_CH1);
 8003846:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <_ZN8regulPin7pwmInitEmm+0x114>)
 8003848:	2101      	movs	r1, #1
 800384a:	0018      	movs	r0, r3
 800384c:	f7ff febe 	bl	80035cc <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003850:	0021      	movs	r1, r4
 8003852:	187b      	adds	r3, r7, r1
 8003854:	2260      	movs	r2, #96	; 0x60
 8003856:	601a      	str	r2, [r3, #0]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003858:	187b      	adds	r3, r7, r1
 800385a:	2200      	movs	r2, #0
 800385c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
	TIM_OC_InitStruct.CompareValue = 0;
 8003864:	187b      	adds	r3, r7, r1
 8003866:	2200      	movs	r2, #0
 8003868:	60da      	str	r2, [r3, #12]
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800386a:	187b      	adds	r3, r7, r1
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_Init(TIM14, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003870:	187b      	adds	r3, r7, r1
 8003872:	480c      	ldr	r0, [pc, #48]	; (80038a4 <_ZN8regulPin7pwmInitEmm+0x114>)
 8003874:	001a      	movs	r2, r3
 8003876:	2101      	movs	r1, #1
 8003878:	f7ff f8a6 	bl	80029c8 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM14, LL_TIM_CHANNEL_CH1);
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <_ZN8regulPin7pwmInitEmm+0x114>)
 800387e:	2101      	movs	r1, #1
 8003880:	0018      	movs	r0, r3
 8003882:	f7ff fe59 	bl	8003538 <LL_TIM_OC_DisableFast>
	TIM14->CR1 |= TIM_CR1_CEN;
 8003886:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <_ZN8regulPin7pwmInitEmm+0x114>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <_ZN8regulPin7pwmInitEmm+0x114>)
 800388c:	2101      	movs	r1, #1
 800388e:	430a      	orrs	r2, r1
 8003890:	601a      	str	r2, [r3, #0]
	TIM14->CCR1 = 0;
 8003892:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <_ZN8regulPin7pwmInitEmm+0x114>)
 8003894:	2200      	movs	r2, #0
 8003896:	635a      	str	r2, [r3, #52]	; 0x34
 8003898:	e000      	b.n	800389c <_ZN8regulPin7pwmInitEmm+0x10c>
		return;
 800389a:	46c0      	nop			; (mov r8, r8)


}
 800389c:	46bd      	mov	sp, r7
 800389e:	b015      	add	sp, #84	; 0x54
 80038a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	40002000 	.word	0x40002000

080038a8 <_ZN12programTimer14timer_callbackEv>:
	virtual void timer_callback() {};
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <_ZN12programTimerC1Ev>:
	programTimer()
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	{
 80038c0:	4a08      	ldr	r2, [pc, #32]	; (80038e4 <_ZN12programTimerC1Ev+0x2c>)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	601a      	str	r2, [r3, #0]
		this->state = programTimerState::kOff;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	605a      	str	r2, [r3, #4]
		this->callback_count_val = 0;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
		this->counter = 0;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	60da      	str	r2, [r3, #12]
	}
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	08003fc8 	.word	0x08003fc8

080038e8 <_ZN12programTimer9timerInitEmm>:
	void timerInit(uint32_t delay, uint32_t main_freq)
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
		this->callback_count_val = main_freq * delay / 1000;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	4353      	muls	r3, r2
 80038fa:	22fa      	movs	r2, #250	; 0xfa
 80038fc:	0091      	lsls	r1, r2, #2
 80038fe:	0018      	movs	r0, r3
 8003900:	f7fc fc02 	bl	8000108 <__udivsi3>
 8003904:	0003      	movs	r3, r0
 8003906:	001a      	movs	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	609a      	str	r2, [r3, #8]
	}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b004      	add	sp, #16
 8003912:	bd80      	pop	{r7, pc}

08003914 <_ZN12programTimer10timerStartEv>:
	void timerStart()
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
		this->state = programTimerState::kOn;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	605a      	str	r2, [r3, #4]
		this->counter = 0;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	60da      	str	r2, [r3, #12]
	}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}

08003930 <_ZN8uartProt14timer_callbackEv>:
	void timer_callback() {this->rx_len -= 1; this->parse();}
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2274      	movs	r2, #116	; 0x74
 800393c:	5c9b      	ldrb	r3, [r3, r2]
 800393e:	3b01      	subs	r3, #1
 8003940:	b2d9      	uxtb	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2274      	movs	r2, #116	; 0x74
 8003946:	5499      	strb	r1, [r3, r2]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	0018      	movs	r0, r3
 800394c:	f000 f986 	bl	8003c5c <_ZN8uartProt5parseEv>
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b002      	add	sp, #8
 8003956:	bd80      	pop	{r7, pc}

08003958 <_ZN8uartProtC1EP9globalVarm>:
 */

#include "uart_prot.h"
#include <stdlib.h>
#include <stdio.h>
uartProt::uartProt(globalVar* global_var_p, uint32_t timer_freq) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	0018      	movs	r0, r3
 8003968:	f7ff ffa6 	bl	80038b8 <_ZN12programTimerC1Ev>
 800396c:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <_ZN8uartProtC1EP9globalVarm+0x98>)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->global_var_p = global_var_p;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	679a      	str	r2, [r3, #120]	; 0x78
	this->rx_len = 0;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2274      	movs	r2, #116	; 0x74
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]
	this->tx_len = 0;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	22e6      	movs	r2, #230	; 0xe6
 8003984:	2100      	movs	r1, #0
 8003986:	5499      	strb	r1, [r3, r2]
	this->res_ready = false;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	2100      	movs	r1, #0
 800398e:	5499      	strb	r1, [r3, r2]
	this->com_err = errors::kNoError;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	67da      	str	r2, [r3, #124]	; 0x7c
	this->get_all_graphs_mode = false;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2281      	movs	r2, #129	; 0x81
 800399a:	2100      	movs	r1, #0
 800399c:	5499      	strb	r1, [r3, r2]
	timerInit(5, timer_freq);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	2105      	movs	r1, #5
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff ff9f 	bl	80038e8 <_ZN12programTimer9timerInitEmm>
	for(uint8_t i = 0; i <kSizeOfBuffs; i++)
 80039aa:	2317      	movs	r3, #23
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	2017      	movs	r0, #23
 80039b4:	183b      	adds	r3, r7, r0
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b63      	cmp	r3, #99	; 0x63
 80039ba:	d813      	bhi.n	80039e4 <_ZN8uartProtC1EP9globalVarm+0x8c>
	{
		this->rx_buf[i] = 0;
 80039bc:	183b      	adds	r3, r7, r0
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	18d3      	adds	r3, r2, r3
 80039c4:	2200      	movs	r2, #0
 80039c6:	741a      	strb	r2, [r3, #16]
		this->tx_buf[i] = 0;
 80039c8:	183b      	adds	r3, r7, r0
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	2182      	movs	r1, #130	; 0x82
 80039d0:	18d3      	adds	r3, r2, r3
 80039d2:	185b      	adds	r3, r3, r1
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <kSizeOfBuffs; i++)
 80039d8:	183b      	adds	r3, r7, r0
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	183b      	adds	r3, r7, r0
 80039de:	3201      	adds	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	e7e6      	b.n	80039b2 <_ZN8uartProtC1EP9globalVarm+0x5a>
	}
}
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b006      	add	sp, #24
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	08003fbc 	.word	0x08003fbc

080039f4 <_Z3powmh>:

uint32_t pow(uint32_t a, uint8_t s)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	000a      	movs	r2, r1
 80039fe:	1cfb      	adds	r3, r7, #3
 8003a00:	701a      	strb	r2, [r3, #0]
	uint32_t result = a;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
	if(s == 0) return 1;
 8003a06:	1cfb      	adds	r3, r7, #3
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <_Z3powmh+0x1e>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e015      	b.n	8003a3e <_Z3powmh+0x4a>
	if(s == 1) return a;
 8003a12:	1cfb      	adds	r3, r7, #3
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <_Z3powmh+0x2a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	e00f      	b.n	8003a3e <_Z3powmh+0x4a>
	for(int i = 1; i < s; i++) result*= a;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	1cfb      	adds	r3, r7, #3
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	da07      	bge.n	8003a3c <_Z3powmh+0x48>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	4353      	muls	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	3301      	adds	r3, #1
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	e7f2      	b.n	8003a22 <_Z3powmh+0x2e>
	return result;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b004      	add	sp, #16
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <_ZN8uartProt13stringToFloatEhh>:



float uartProt::stringToFloat(uint8_t start, uint8_t end)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b08d      	sub	sp, #52	; 0x34
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	0008      	movs	r0, r1
 8003a52:	0011      	movs	r1, r2
 8003a54:	1cfb      	adds	r3, r7, #3
 8003a56:	1c02      	adds	r2, r0, #0
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	1cbb      	adds	r3, r7, #2
 8003a5c:	1c0a      	adds	r2, r1, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
	uint32_t int_part = 0.;
 8003a60:	2300      	movs	r3, #0
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fract_part = 0.;
 8003a64:	2300      	movs	r3, #0
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
	//найдем точку
	uint8_t point_pos = 0;
 8003a68:	2327      	movs	r3, #39	; 0x27
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
	uint8_t int_part_len = 0;
 8003a70:	2326      	movs	r3, #38	; 0x26
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
	uint8_t fract_part_len = 0;
 8003a78:	230b      	movs	r3, #11
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < end; i++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	623b      	str	r3, [r7, #32]
 8003a84:	1cbb      	adds	r3, r7, #2
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	da0e      	bge.n	8003aac <_ZN8uartProt13stringToFloatEhh+0x64>
		if (this->rx_buf[i] == '.')
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	18d3      	adds	r3, r2, r3
 8003a94:	3310      	adds	r3, #16
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b2e      	cmp	r3, #46	; 0x2e
 8003a9a:	d103      	bne.n	8003aa4 <_ZN8uartProt13stringToFloatEhh+0x5c>
			point_pos = i;
 8003a9c:	2327      	movs	r3, #39	; 0x27
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	6a3a      	ldr	r2, [r7, #32]
 8003aa2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < end; i++)
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	623b      	str	r3, [r7, #32]
 8003aaa:	e7eb      	b.n	8003a84 <_ZN8uartProt13stringToFloatEhh+0x3c>
	//нет точки, значит отсутстует дробная часть (a3.01)
	int_part_len = point_pos - start;
 8003aac:	2426      	movs	r4, #38	; 0x26
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	2027      	movs	r0, #39	; 0x27
 8003ab2:	1839      	adds	r1, r7, r0
 8003ab4:	1cfa      	adds	r2, r7, #3
 8003ab6:	7809      	ldrb	r1, [r1, #0]
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	1a8a      	subs	r2, r1, r2
 8003abc:	701a      	strb	r2, [r3, #0]
	fract_part_len = end - point_pos - 1; //-1 для перого симола
 8003abe:	1cba      	adds	r2, r7, #2
 8003ac0:	0001      	movs	r1, r0
 8003ac2:	187b      	adds	r3, r7, r1
 8003ac4:	7812      	ldrb	r2, [r2, #0]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	230b      	movs	r3, #11
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
	if (point_pos == 0) { fract_part = 0.; int_part_len = end - 1; }
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d106      	bne.n	8003aea <_ZN8uartProt13stringToFloatEhh+0xa2>
 8003adc:	2300      	movs	r3, #0
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ae0:	193b      	adds	r3, r7, r4
 8003ae2:	1cba      	adds	r2, r7, #2
 8003ae4:	7812      	ldrb	r2, [r2, #0]
 8003ae6:	3a01      	subs	r2, #1
 8003ae8:	701a      	strb	r2, [r3, #0]


	float temper = 0.;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
	//10.01
	//отделение дробной и целой частей
	uint8_t k = 0;
 8003aee:	231b      	movs	r3, #27
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
	for (int i = start; i < int_part_len + start; i++)
 8003af6:	1cfb      	adds	r3, r7, #3
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	2026      	movs	r0, #38	; 0x26
 8003afe:	183b      	adds	r3, r7, r0
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	1cfb      	adds	r3, r7, #3
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	18d3      	adds	r3, r2, r3
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	da1f      	bge.n	8003b4e <_ZN8uartProt13stringToFloatEhh+0x106>
	{
		int_part += (this->rx_buf[i] - '0') * pow(10, int_part_len - 1 - k++);
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	18d3      	adds	r3, r2, r3
 8003b14:	3310      	adds	r3, #16
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	3b30      	subs	r3, #48	; 0x30
 8003b1a:	001c      	movs	r4, r3
 8003b1c:	221b      	movs	r2, #27
 8003b1e:	18bb      	adds	r3, r7, r2
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	18ba      	adds	r2, r7, r2
 8003b24:	1c59      	adds	r1, r3, #1
 8003b26:	7011      	strb	r1, [r2, #0]
 8003b28:	183a      	adds	r2, r7, r0
 8003b2a:	7812      	ldrb	r2, [r2, #0]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	0019      	movs	r1, r3
 8003b36:	200a      	movs	r0, #10
 8003b38:	f7ff ff5c 	bl	80039f4 <_Z3powmh>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	4363      	muls	r3, r4
 8003b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b42:	18d3      	adds	r3, r2, r3
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = start; i < int_part_len + start; i++)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e7d6      	b.n	8003afc <_ZN8uartProt13stringToFloatEhh+0xb4>
	}
	k = 0;
 8003b4e:	231b      	movs	r3, #27
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
	if (point_pos >= 3)
 8003b56:	2227      	movs	r2, #39	; 0x27
 8003b58:	18bb      	adds	r3, r7, r2
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d929      	bls.n	8003bb4 <_ZN8uartProt13stringToFloatEhh+0x16c>
		for (int i = point_pos + 1; i < end; i++)
 8003b60:	18bb      	adds	r3, r7, r2
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	3301      	adds	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	1cbb      	adds	r3, r7, #2
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	da23      	bge.n	8003bba <_ZN8uartProt13stringToFloatEhh+0x172>
		{
			fract_part += (this->rx_buf[i] - '0') * pow(10, fract_part_len - 1 - k++);
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	18d3      	adds	r3, r2, r3
 8003b78:	3310      	adds	r3, #16
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	3b30      	subs	r3, #48	; 0x30
 8003b7e:	001c      	movs	r4, r3
 8003b80:	221b      	movs	r2, #27
 8003b82:	18bb      	adds	r3, r7, r2
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	18ba      	adds	r2, r7, r2
 8003b88:	1c59      	adds	r1, r3, #1
 8003b8a:	7011      	strb	r1, [r2, #0]
 8003b8c:	220b      	movs	r2, #11
 8003b8e:	18ba      	adds	r2, r7, r2
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	200a      	movs	r0, #10
 8003b9e:	f7ff ff29 	bl	80039f4 <_Z3powmh>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	4363      	muls	r3, r4
 8003ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba8:	18d3      	adds	r3, r2, r3
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = point_pos + 1; i < end; i++)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	e7d9      	b.n	8003b68 <_ZN8uartProt13stringToFloatEhh+0x120>
		}
	else
	{
		this->com_err = errors::kSyntacsisError;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	67da      	str	r2, [r3, #124]	; 0x7c
		//ошибка BBода
	}


	temper = fract_part;
 8003bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bbc:	f7fd fa40 	bl	8001040 <__aeabi_ui2f>
 8003bc0:	1c03      	adds	r3, r0, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < fract_part_len; i++)temper /= 10;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	230b      	movs	r3, #11
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	da09      	bge.n	8003be8 <_ZN8uartProt13stringToFloatEhh+0x1a0>
 8003bd4:	490c      	ldr	r1, [pc, #48]	; (8003c08 <_ZN8uartProt13stringToFloatEhh+0x1c0>)
 8003bd6:	69f8      	ldr	r0, [r7, #28]
 8003bd8:	f7fc fd28 	bl	800062c <__aeabi_fdiv>
 8003bdc:	1c03      	adds	r3, r0, #0
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3301      	adds	r3, #1
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	e7ef      	b.n	8003bc8 <_ZN8uartProt13stringToFloatEhh+0x180>
	temper += int_part;
 8003be8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bea:	f7fd fa29 	bl	8001040 <__aeabi_ui2f>
 8003bee:	1c03      	adds	r3, r0, #0
 8003bf0:	1c19      	adds	r1, r3, #0
 8003bf2:	69f8      	ldr	r0, [r7, #28]
 8003bf4:	f7fc fb7c 	bl	80002f0 <__aeabi_fadd>
 8003bf8:	1c03      	adds	r3, r0, #0
 8003bfa:	61fb      	str	r3, [r7, #28]

	return temper;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
}
 8003bfe:	1c18      	adds	r0, r3, #0
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b00d      	add	sp, #52	; 0x34
 8003c04:	bd90      	pop	{r4, r7, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	41200000 	.word	0x41200000

08003c0c <_ZN8uartProt11parseErrorsEv>:
void uartProt::parseErrors()
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
//		this->tx_buf[3] = '\r';
//		//this->tx_buf[4] = '\n';
//		this->tx_len = 5;
//		this->res_ready = true;
//	}
}
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <_ZN8uartProt5okResEv>:

void uartProt::okRes()
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	this->tx_buf[0] = 'O';
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2282      	movs	r2, #130	; 0x82
 8003c28:	214f      	movs	r1, #79	; 0x4f
 8003c2a:	5499      	strb	r1, [r3, r2]
	this->tx_buf[1] = 'K';
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2283      	movs	r2, #131	; 0x83
 8003c30:	214b      	movs	r1, #75	; 0x4b
 8003c32:	5499      	strb	r1, [r3, r2]
	this->tx_buf[2] = '\r';
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2284      	movs	r2, #132	; 0x84
 8003c38:	210d      	movs	r1, #13
 8003c3a:	5499      	strb	r1, [r3, r2]
	this->tx_buf[3] = '\n';
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2285      	movs	r2, #133	; 0x85
 8003c40:	210a      	movs	r1, #10
 8003c42:	5499      	strb	r1, [r3, r2]
	this->tx_len = 4;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	22e6      	movs	r2, #230	; 0xe6
 8003c48:	2104      	movs	r1, #4
 8003c4a:	5499      	strb	r1, [r3, r2]
	this->res_ready = true;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	2101      	movs	r1, #1
 8003c52:	5499      	strb	r1, [r3, r2]
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <_ZN8uartProt5parseEv>:

void uartProt::parse()
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	switch (this->rx_buf[0])
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	7c1b      	ldrb	r3, [r3, #16]
 8003c68:	2b74      	cmp	r3, #116	; 0x74
 8003c6a:	d007      	beq.n	8003c7c <_ZN8uartProt5parseEv+0x20>
 8003c6c:	dd00      	ble.n	8003c70 <_ZN8uartProt5parseEv+0x14>
 8003c6e:	e083      	b.n	8003d78 <_ZN8uartProt5parseEv+0x11c>
 8003c70:	2b70      	cmp	r3, #112	; 0x70
 8003c72:	d100      	bne.n	8003c76 <_ZN8uartProt5parseEv+0x1a>
 8003c74:	e071      	b.n	8003d5a <_ZN8uartProt5parseEv+0xfe>
 8003c76:	2b73      	cmp	r3, #115	; 0x73
 8003c78:	d01c      	beq.n	8003cb4 <_ZN8uartProt5parseEv+0x58>
	}




}
 8003c7a:	e07d      	b.n	8003d78 <_ZN8uartProt5parseEv+0x11c>
		float temp_float_res = stringToFloat(1, this->rx_len);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2274      	movs	r2, #116	; 0x74
 8003c80:	5c9a      	ldrb	r2, [r3, r2]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2101      	movs	r1, #1
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7ff fede 	bl	8003a48 <_ZN8uartProt13stringToFloatEhh>
 8003c8c:	1c03      	adds	r3, r0, #0
 8003c8e:	60bb      	str	r3, [r7, #8]
		if(this->com_err == errors::kNoError)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d108      	bne.n	8003caa <_ZN8uartProt5parseEv+0x4e>
			this->okRes();
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7ff ffbe 	bl	8003c1c <_ZN8uartProt5okResEv>
			this->global_var_p->temperature = temp_float_res;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	601a      	str	r2, [r3, #0]
		break;
 8003ca8:	e066      	b.n	8003d78 <_ZN8uartProt5parseEv+0x11c>
			this->parseErrors();
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7ff ffad 	bl	8003c0c <_ZN8uartProt11parseErrorsEv>
		break;
 8003cb2:	e061      	b.n	8003d78 <_ZN8uartProt5parseEv+0x11c>
		if(this->rx_buf[1] != parameters::kChoiceOfutySetter)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7c5b      	ldrb	r3, [r3, #17]
 8003cb8:	2b73      	cmp	r3, #115	; 0x73
 8003cba:	d009      	beq.n	8003cd0 <_ZN8uartProt5parseEv+0x74>
			temp_float_res = stringToFloat(2, this->rx_len);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2274      	movs	r2, #116	; 0x74
 8003cc0:	5c9a      	ldrb	r2, [r3, r2]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f7ff febe 	bl	8003a48 <_ZN8uartProt13stringToFloatEhh>
 8003ccc:	1c03      	adds	r3, r0, #0
 8003cce:	60fb      	str	r3, [r7, #12]
		if (this->com_err == errors::kNoError)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d14e      	bne.n	8003d76 <_ZN8uartProt5parseEv+0x11a>
			this->okRes();
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7ff ff9e 	bl	8003c1c <_ZN8uartProt5okResEv>
			switch (this->rx_buf[1])
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7c5b      	ldrb	r3, [r3, #17]
 8003ce4:	3b63      	subs	r3, #99	; 0x63
 8003ce6:	2b16      	cmp	r3, #22
 8003ce8:	d835      	bhi.n	8003d56 <_ZN8uartProt5parseEv+0xfa>
 8003cea:	009a      	lsls	r2, r3, #2
 8003cec:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <_ZN8uartProt5parseEv+0x124>)
 8003cee:	18d3      	adds	r3, r2, r3
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	469f      	mov	pc, r3
				this->global_var_p->regulator_pin.choice_of_duty_setter = true;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf8:	2228      	movs	r2, #40	; 0x28
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]
				break;
 8003cfe:	e02b      	b.n	8003d58 <_ZN8uartProt5parseEv+0xfc>
				this->global_var_p->regulator_pin.duty = temp_float_res;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
				break;
 8003d08:	e026      	b.n	8003d58 <_ZN8uartProt5parseEv+0xfc>
				this->global_var_p->regulator_pin.pid.kc = temp_float_res;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	60da      	str	r2, [r3, #12]
				break;
 8003d12:	e021      	b.n	8003d58 <_ZN8uartProt5parseEv+0xfc>
				this->global_var_p->regulator_pin.pid.kd = temp_float_res;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	611a      	str	r2, [r3, #16]
				break;
 8003d1c:	e01c      	b.n	8003d58 <_ZN8uartProt5parseEv+0xfc>
				this->global_var_p->regulator_pin.pid.ki = temp_float_res;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	609a      	str	r2, [r3, #8]
				break;
 8003d26:	e017      	b.n	8003d58 <_ZN8uartProt5parseEv+0xfc>
				this->global_var_p->regulator_pin.pid.kp = temp_float_res;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	605a      	str	r2, [r3, #4]
				break;
 8003d30:	e012      	b.n	8003d58 <_ZN8uartProt5parseEv+0xfc>
				this->global_var_p->regulator_pin.pid.max_out = temp_float_res;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	619a      	str	r2, [r3, #24]
				break;
 8003d3a:	e00d      	b.n	8003d58 <_ZN8uartProt5parseEv+0xfc>
				this->global_var_p->regulator_pin.pid.min_out = temp_float_res;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	615a      	str	r2, [r3, #20]
				break;
 8003d44:	e008      	b.n	8003d58 <_ZN8uartProt5parseEv+0xfc>
				this->global_var_p->regulator_pin.pwm_frequency = int(temp_float_res);
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f7fd f90c 	bl	8000f64 <__aeabi_f2iz>
 8003d4c:	0002      	movs	r2, r0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8003d54:	e000      	b.n	8003d58 <_ZN8uartProt5parseEv+0xfc>
				break;
 8003d56:	46c0      	nop			; (mov r8, r8)
		break;
 8003d58:	e00d      	b.n	8003d76 <_ZN8uartProt5parseEv+0x11a>
		this->okRes();
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7ff ff5d 	bl	8003c1c <_ZN8uartProt5okResEv>
		this->get_all_graphs_mode = !this->get_all_graphs_mode;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2281      	movs	r2, #129	; 0x81
 8003d66:	5c9b      	ldrb	r3, [r3, r2]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4053      	eors	r3, r2
 8003d6c:	b2d9      	uxtb	r1, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2281      	movs	r2, #129	; 0x81
 8003d72:	5499      	strb	r1, [r3, r2]
		break;
 8003d74:	e000      	b.n	8003d78 <_ZN8uartProt5parseEv+0x11c>
		break;
 8003d76:	46c0      	nop			; (mov r8, r8)
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b004      	add	sp, #16
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	08003f58 	.word	0x08003f58

08003d84 <_ZN8uartProt10rxCallbackEh>:

void uartProt::rxCallback(uint8_t new_rx_byte)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	000a      	movs	r2, r1
 8003d8e:	1cfb      	adds	r3, r7, #3
 8003d90:	701a      	strb	r2, [r3, #0]
	this->rx_buf[this->rx_len++] = new_rx_byte;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2274      	movs	r2, #116	; 0x74
 8003d96:	5c9b      	ldrb	r3, [r3, r2]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	b2d0      	uxtb	r0, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	2174      	movs	r1, #116	; 0x74
 8003da0:	5450      	strb	r0, [r2, r1]
 8003da2:	001a      	movs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	189b      	adds	r3, r3, r2
 8003da8:	1cfa      	adds	r2, r7, #3
 8003daa:	7812      	ldrb	r2, [r2, #0]
 8003dac:	741a      	strb	r2, [r3, #16]
	this->timerStart();
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7ff fdaf 	bl	8003914 <_ZN12programTimer10timerStartEv>
}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b002      	add	sp, #8
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <__libc_init_array>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	4d0c      	ldr	r5, [pc, #48]	; (8003df8 <__libc_init_array+0x38>)
 8003dc6:	4c0d      	ldr	r4, [pc, #52]	; (8003dfc <__libc_init_array+0x3c>)
 8003dc8:	1b64      	subs	r4, r4, r5
 8003dca:	10a4      	asrs	r4, r4, #2
 8003dcc:	42a6      	cmp	r6, r4
 8003dce:	d109      	bne.n	8003de4 <__libc_init_array+0x24>
 8003dd0:	2600      	movs	r6, #0
 8003dd2:	f000 f821 	bl	8003e18 <_init>
 8003dd6:	4d0a      	ldr	r5, [pc, #40]	; (8003e00 <__libc_init_array+0x40>)
 8003dd8:	4c0a      	ldr	r4, [pc, #40]	; (8003e04 <__libc_init_array+0x44>)
 8003dda:	1b64      	subs	r4, r4, r5
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	42a6      	cmp	r6, r4
 8003de0:	d105      	bne.n	8003dee <__libc_init_array+0x2e>
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	00b3      	lsls	r3, r6, #2
 8003de6:	58eb      	ldr	r3, [r5, r3]
 8003de8:	4798      	blx	r3
 8003dea:	3601      	adds	r6, #1
 8003dec:	e7ee      	b.n	8003dcc <__libc_init_array+0xc>
 8003dee:	00b3      	lsls	r3, r6, #2
 8003df0:	58eb      	ldr	r3, [r5, r3]
 8003df2:	4798      	blx	r3
 8003df4:	3601      	adds	r6, #1
 8003df6:	e7f2      	b.n	8003dde <__libc_init_array+0x1e>
 8003df8:	08003fcc 	.word	0x08003fcc
 8003dfc:	08003fcc 	.word	0x08003fcc
 8003e00:	08003fcc 	.word	0x08003fcc
 8003e04:	08003fd4 	.word	0x08003fd4

08003e08 <memset>:
 8003e08:	0003      	movs	r3, r0
 8003e0a:	1882      	adds	r2, r0, r2
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d100      	bne.n	8003e12 <memset+0xa>
 8003e10:	4770      	bx	lr
 8003e12:	7019      	strb	r1, [r3, #0]
 8003e14:	3301      	adds	r3, #1
 8003e16:	e7f9      	b.n	8003e0c <memset+0x4>

08003e18 <_init>:
 8003e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1e:	bc08      	pop	{r3}
 8003e20:	469e      	mov	lr, r3
 8003e22:	4770      	bx	lr

08003e24 <_fini>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2a:	bc08      	pop	{r3}
 8003e2c:	469e      	mov	lr, r3
 8003e2e:	4770      	bx	lr
